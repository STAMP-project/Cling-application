import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl23.homoscedasticTTest(statisticalSummary24, statisticalSummary25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3002");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33, (int) (short) -1, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3003");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double double29 = tDistribution24.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution24);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, 1, 0);
        double double46 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray41);
        double double47 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray33, doubleArray41);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double49 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = tTestImpl12.t(35.0d, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.5553480614894135d + "'", double37 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 34.99999999999999d + "'", double46 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.5553480614894135d + "'", double48 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 34.99999999999999d + "'", double49 == 34.99999999999999d);
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setNumberOfSuccesses(10);
        double double13 = pascalDistribution6.getProbabilityOfSuccess();
        int int14 = pascalDistribution6.getNumberOfSuccesses();
        pascalDistribution6.setProbabilityOfSuccess(0.965126505523586d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3005");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream29 = printStream1.append('4');
        java.io.PrintStream printStream31 = printStream29.append((java.lang.CharSequence) "allemand");
        printStream29.println((float) 1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream31);
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3006");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setProbabilityOfSuccess(0.0d);
        double double14 = pascalDistribution6.probability(10.0d);
        int int15 = pascalDistribution6.getNumberOfSuccesses();
        double double16 = pascalDistribution6.getProbabilityOfSuccess();
        pascalDistribution6.setProbabilityOfSuccess((double) 0L);
        double double20 = pascalDistribution6.probability(515.6999999999999d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3007");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale3.getDisplayCountry(locale5);
        java.lang.String str9 = locale0.getDisplayName(locale5);
        java.lang.String str10 = locale0.getDisplayScript();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getDisplayVariant();
        java.lang.String str14 = locale0.getDisplayLanguage(locale11);
        java.lang.String str15 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "allemand" + "'", str4, "allemand");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "allemand" + "'", str9, "allemand");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution7 = distributionFactory0.createTDistribution((double) (byte) 1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl8 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution7);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double double19 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray10, (double) (short) 10);
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray10);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double27 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray22);
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double double30 = org.apache.commons.math.stat.StatUtils.min(doubleArray22);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray22, (int) 'u', 2147483647);
        double double34 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = tTestImpl8.homoscedasticTTest(doubleArray10, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(tDistribution7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.5553480614894135d + "'", double14 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale.Builder builder13 = builder10.addUnicodeLocaleAttribute("german");
        java.util.Locale.Builder builder14 = builder10.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.setLanguageTag("France");
        java.util.Locale.Builder builder18 = builder16.setRegion("CA");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "german");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        java.io.PrintWriter printWriter49 = printWriter5.append('#');
        printWriter5.flush();
        java.util.Locale locale51 = null;
        java.lang.Object[] objArray53 = null;
        java.io.PrintWriter printWriter54 = printWriter5.format(locale51, "CA", objArray53);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "allemand" + "'", str22, "allemand");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter54);
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        java.io.PrintStream printStream3 = new java.io.PrintStream("French (France)");
        printStream3.println((float) (short) -1);
        printStream3.println(' ');
        printStream3.print(false);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream3);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getDisplayVariant();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String str16 = locale11.getDisplayLanguage(locale14);
        boolean boolean17 = locale11.hasExtensions();
        java.lang.Object[] objArray19 = null;
        java.io.PrintWriter printWriter20 = printWriter10.printf(locale11, "German", objArray19);
        java.util.Locale locale21 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale[] localeArray32 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList33);
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 1, mathException27, (byte) 0, localeList35, 1225.0d };
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("de", objArray37);
        java.io.PrintWriter printWriter40 = printWriter10.printf(locale21, "zh-CN", objArray37);
        printWriter10.write((int) '#');
        printWriter10.print('x');
        printWriter10.print((long) (short) 1);
        printWriter10.println((float) (short) 10);
        printStream1.println((java.lang.Object) (short) 10);
        printStream1.println((long) 97);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Deutsch" + "'", str16, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter40);
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3012");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double10 = poissonDistribution8.cumulativeProbability((int) '#');
        double double13 = poissonDistribution8.cumulativeProbability(0, (int) 'x');
        double double16 = poissonDistribution8.cumulativeProbability(0.9646641462260455d, (double) 2147483647);
        double double18 = poissonDistribution8.normalApproximateProbability((int) (byte) 100);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.6321205588285574d + "'", double16 == 0.6321205588285574d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3013");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "allemand" + "'", str1, "allemand");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (int) 'a', (int) ' ', 35.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3015");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.FDistribution fDistribution9 = distributionFactory0.createFDistribution(Double.POSITIVE_INFINITY, 52.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(fDistribution9);
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3016");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 1, 0);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray17, doubleArray25);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double[] doubleArray40 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double41 = org.apache.commons.math.stat.StatUtils.max(doubleArray40);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40, (double) (byte) 100);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40, 0.0d);
        double double46 = org.apache.commons.math.stat.StatUtils.sum(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = tTestImpl15.homoscedasticTTest(doubleArray17, doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 515.7000000000007d + "'", double43 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 515.7d + "'", double45 == 515.7d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 61.0d + "'", double46 == 61.0d);
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3017");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        double double9 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom((double) 'a');
        fDistribution6.setDenominatorDegreesOfFreedom(117.0d);
        double double14 = fDistribution6.getNumeratorDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 12.2d);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.print((int) (byte) 10);
        printWriter5.print(false);
        printWriter5.print(100.0d);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getISO3Country();
        printWriter5.print((java.lang.Object) locale14);
        java.io.PrintWriter printWriter18 = printWriter5.append(' ');
        printWriter18.print((long) ' ');
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale21.getDisplayLanguage(locale22);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 1, mathException31, (byte) 0, localeList39, 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("");
        mathException42.addSuppressed((java.lang.Throwable) mathException44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException44);
        java.lang.String[] strArray49 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("allemand", (java.lang.Object[]) strArray49);
        mathException46.addSuppressed((java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException51);
        java.lang.Throwable[] throwableArray54 = mathException51.getSuppressed();
        java.io.PrintWriter printWriter55 = printWriter18.format(locale21, "", (java.lang.Object[]) throwableArray54);
        java.lang.String str56 = locale21.getLanguage();
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FRA" + "'", str15, "FRA");
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Italienisch" + "'", str24, "Italienisch");
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "it" + "'", str56, "it");
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3020");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream4 = new java.io.PrintStream("en");
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale[] localeArray21 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList22);
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 1, mathException16, (byte) 0, localeList24, 1225.0d };
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("de", objArray26);
        java.io.PrintStream printStream29 = printStream7.printf(locale10, "hi!", objArray26);
        java.io.PrintStream printStream30 = printStream4.printf("FR", objArray26);
        java.io.PrintWriter printWriter31 = printWriter1.format("zh-CN", objArray26);
        java.lang.String[] strArray34 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ITA", (java.lang.Object[]) strArray34);
        java.io.PrintWriter printWriter36 = printWriter1.printf("Deutsch", (java.lang.Object[]) strArray34);
        java.io.PrintWriter printWriter38 = printWriter1.append((java.lang.CharSequence) "\uc601\uc5b4");
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getDisplayName();
        java.lang.String str41 = locale39.getLanguage();
        java.util.Locale locale42 = locale39.stripExtensions();
        java.lang.String str43 = locale39.getISO3Language();
        java.util.Set<java.lang.String> strSet44 = locale39.getUnicodeLocaleKeys();
        printWriter38.println((java.lang.Object) strSet44);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Deutsch" + "'", str40, "Deutsch");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "deu" + "'", str43, "deu");
        org.junit.Assert.assertNotNull(strSet44);
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3021");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11, (double) '#');
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray11);
        double double19 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray11, (double) 1.0f);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double21 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray11);
        double double22 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory18 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution21 = distributionFactory18.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory18.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory18.createTDistribution((double) 1L);
        double double25 = tDistribution24.getDegreesOfFreedom();
        tTestImpl17.setDistribution(tDistribution24);
        tDistribution24.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl29 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(117.0d);
        tTestImpl15.setDistribution(tDistribution24);
        org.apache.commons.math.distribution.TDistribution tDistribution33 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution33);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory35 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution38 = distributionFactory35.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory35.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory35.createTDistribution((double) 1L);
        double double42 = tDistribution41.getDegreesOfFreedom();
        tTestImpl34.setDistribution(tDistribution41);
        org.apache.commons.math.distribution.TDistribution tDistribution44 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl45 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution44);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory46 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution49 = distributionFactory46.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution50 = distributionFactory46.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution52 = distributionFactory46.createTDistribution((double) 1L);
        double double53 = tDistribution52.getDegreesOfFreedom();
        tTestImpl45.setDistribution(tDistribution52);
        tTestImpl34.setDistribution(tDistribution52);
        tTestImpl15.setDistribution(tDistribution52);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary58 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double59 = tTestImpl15.t(statisticalSummary57, statisticalSummary58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory18);
        org.junit.Assert.assertNotNull(weibullDistribution21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory35);
        org.junit.Assert.assertNotNull(weibullDistribution38);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory46);
        org.junit.Assert.assertNotNull(weibullDistribution49);
        org.junit.Assert.assertNotNull(normalDistribution50);
        org.junit.Assert.assertNotNull(tDistribution52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3023");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        java.io.PrintStream printStream3 = new java.io.PrintStream("French (France)");
        printStream3.println((float) (short) -1);
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale[] localeArray17 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList18);
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 1, mathException12, (byte) 0, localeList20, 1225.0d };
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("de", objArray22);
        java.io.PrintStream printStream25 = printStream3.printf(locale6, "hi!", objArray22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, (double) '#');
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        printStream25.print((java.lang.Object) doubleArray27);
        double[] doubleArray35 = new double[] { '#' };
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray27, doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.println((float) (short) -1);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale[] localeArray54 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.util.Locale>) localeList55);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 1, mathException49, (byte) 0, localeList57, 1225.0d };
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("de", objArray59);
        java.io.PrintStream printStream62 = printStream40.printf(locale43, "hi!", objArray59);
        double[] doubleArray64 = new double[] { '#' };
        double double65 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray64);
        double double66 = org.apache.commons.math.stat.StatUtils.variance(doubleArray64);
        double double68 = org.apache.commons.math.stat.StatUtils.variance(doubleArray64, (double) '#');
        double double69 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray64);
        printStream62.print((java.lang.Object) doubleArray64);
        double[] doubleArray72 = new double[] { '#' };
        double double73 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray72);
        double double74 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray64, doubleArray72);
        double double75 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray27, doubleArray72);
        double double77 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray27, 12.2d);
        double double78 = org.apache.commons.math.stat.StatUtils.max(doubleArray27);
        double[] doubleArray84 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = tTestImpl1.homoscedasticT(doubleArray27, doubleArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1225.0d + "'", double65 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1225.0d + "'", double69 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1225.0d + "'", double73 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 35.0d + "'", double77 == 35.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 35.0d + "'", double78 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 52.0d + "'", double85 == 52.0d);
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3024");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str4 = locale1.toLanguageTag();
        java.lang.String str5 = locale1.getDisplayLanguage();
        java.lang.String str6 = locale1.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.print("org.apache.commons.math.MathException: de");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory9 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory9.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution15 = distributionFactory9.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double16 = cauchyDistribution15.getScale();
        cauchyDistribution15.setScale((double) 1.0f);
        double double19 = cauchyDistribution15.getMedian();
        cauchyDistribution15.setScale((double) 1);
        printStream1.println((java.lang.Object) cauchyDistribution15);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale23.getDisplayLanguage(locale24);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = locale27.getISO3Language();
        java.lang.String str29 = locale27.getDisplayName();
        boolean boolean30 = locale27.hasExtensions();
        java.lang.String str31 = locale24.getDisplayLanguage(locale27);
        java.io.PrintStream printStream34 = new java.io.PrintStream("French (France)");
        printStream34.println((float) (short) -1);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale[] localeArray48 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList49);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 1, mathException43, (byte) 0, localeList51, 1225.0d };
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("de", objArray53);
        java.io.PrintStream printStream56 = printStream34.printf(locale37, "hi!", objArray53);
        java.io.PrintStream printStream57 = printStream1.format(locale24, "USA", objArray53);
        java.lang.Class<?> wildcardClass58 = objArray53.getClass();
        org.junit.Assert.assertNotNull(distributionFactory9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(cauchyDistribution15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Italienisch" + "'", str26, "Italienisch");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fra" + "'", str28, "fra");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "French (France)" + "'", str29, "French (France)");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "allemand" + "'", str31, "allemand");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3026");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("inglese (Stati Uniti)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayScript(locale9);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale7.getDisplayScript(locale11);
        java.lang.String str14 = locale7.toLanguageTag();
        java.lang.String str15 = locale5.getDisplayLanguage(locale7);
        java.lang.String str16 = locale7.getVariant();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale21 = new java.util.Locale("allemand", "allemand", "");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale21);
        java.lang.String str24 = locale21.toLanguageTag();
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = locale21.getDisplayLanguage(locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "French" + "'", str15, "French");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals(locale21.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "allemand" + "'", str24, "allemand");
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3028");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 2147483647, 120, 0.24999999999999964d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100L);
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3030");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, 0.36787944117144233d);
        double double24 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double25 = org.apache.commons.math.stat.StatUtils.min(doubleArray17);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray27, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl15.pairedTTest(doubleArray17, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        double double5 = weibullDistribution3.getShape();
        double double6 = weibullDistribution3.getScale();
        double double7 = weibullDistribution3.getScale();
        weibullDistribution3.setScale(0.17044656615103027d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        printWriter5.write("US");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3033");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.print((long) ' ');
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        byte[] byteArray13 = new byte[] {};
        printStream12.write(byteArray13);
        printStream8.write(byteArray13);
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        printStream18.println(' ');
        printStream18.print(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = locale26.getDisplayLanguage(locale29);
        boolean boolean32 = locale26.hasExtensions();
        java.lang.Object[] objArray34 = null;
        java.io.PrintWriter printWriter35 = printWriter25.printf(locale26, "German", objArray34);
        java.util.Locale locale36 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter25.printf(locale36, "zh-CN", objArray52);
        java.io.PrintStream printStream56 = printStream8.format("Chinese (Taiwan)", objArray52);
        java.io.PrintWriter printWriter57 = printWriter5.printf("Franz\366sisch (Frankreich)", objArray52);
        printWriter5.println((int) (byte) 100);
        java.io.PrintStream printStream61 = new java.io.PrintStream("French (France)");
        printStream61.println((float) (short) -1);
        printStream61.println(' ');
        printStream61.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream69 = new java.io.PrintStream("French (France)");
        printStream69.println((float) (short) -1);
        java.io.PrintStream printStream72 = new java.io.PrintStream((java.io.OutputStream) printStream69);
        printStream69.print((long) (short) 0);
        java.io.PrintStream printStream76 = new java.io.PrintStream("French (France)");
        printStream76.println((float) (short) -1);
        java.io.PrintStream printStream79 = new java.io.PrintStream((java.io.OutputStream) printStream76);
        java.io.PrintWriter printWriter80 = new java.io.PrintWriter((java.io.OutputStream) printStream76);
        char[] charArray82 = new char[] { ' ' };
        printWriter80.write(charArray82);
        printStream69.print(charArray82);
        printStream61.println(charArray82);
        printWriter5.println(charArray82);
        java.io.PrintWriter printWriter88 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        printWriter5.println(false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Deutsch" + "'", str31, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[ ]");
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3034");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.DistributionFactory distributionFactory1 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution4 = distributionFactory1.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution7 = distributionFactory1.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution10 = distributionFactory1.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution12 = distributionFactory1.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution12);
        org.apache.commons.math.distribution.TDistribution tDistribution14 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution14);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double23 = tDistribution22.getDegreesOfFreedom();
        tTestImpl15.setDistribution(tDistribution22);
        tDistribution22.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl29 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        tTestImpl13.setDistribution(tDistribution22);
        tTestImpl0.setDistribution(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double34 = tTestImpl0.t(Double.POSITIVE_INFINITY, statisticalSummary33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory1);
        org.junit.Assert.assertNotNull(weibullDistribution4);
        org.junit.Assert.assertNotNull(fDistribution7);
        org.junit.Assert.assertNotNull(normalDistribution10);
        org.junit.Assert.assertNotNull(tDistribution12);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl16 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double19 = tTestImpl16.homoscedasticTTest(statisticalSummary17, statisticalSummary18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setRegion("FR");
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setLanguage("German");
        java.util.Locale.Builder builder14 = builder11.clearExtensions();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.clearExtensions();
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale17.getDisplayLanguage(locale18);
        java.lang.String str21 = locale18.getScript();
        java.util.Locale.Builder builder22 = builder14.setLocale(locale18);
        java.util.Locale.Builder builder23 = builder10.setLocale(locale18);
        java.util.Locale.Builder builder24 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italienisch" + "'", str20, "Italienisch");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        boolean boolean9 = printStream1.checkError();
        printStream1.print(0);
        java.io.PrintStream printStream13 = new java.io.PrintStream("French (France)");
        printStream13.println((float) (short) -1);
        printStream13.println(' ');
        printStream13.print(false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream13);
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale21.getDisplayVariant();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale21.getDisplayLanguage(locale24);
        boolean boolean27 = locale21.hasExtensions();
        java.lang.Object[] objArray29 = null;
        java.io.PrintWriter printWriter30 = printWriter20.printf(locale21, "German", objArray29);
        java.util.Locale locale31 = null;
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale[] localeArray42 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList43);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 1, mathException37, (byte) 0, localeList45, 1225.0d };
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", objArray47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("de", objArray47);
        java.io.PrintWriter printWriter50 = printWriter20.printf(locale31, "zh-CN", objArray47);
        printWriter20.write((int) '#');
        printWriter20.println(true);
        java.io.PrintStream printStream56 = new java.io.PrintStream("French (France)");
        printStream56.println((float) (short) -1);
        java.io.PrintStream printStream59 = new java.io.PrintStream((java.io.OutputStream) printStream56);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream56);
        char[] charArray62 = new char[] { ' ' };
        printWriter60.write(charArray62);
        java.io.PrintStream printStream65 = new java.io.PrintStream("French (France)");
        printStream65.println((float) (short) -1);
        java.io.PrintStream printStream68 = new java.io.PrintStream((java.io.OutputStream) printStream65);
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter((java.io.OutputStream) printStream65);
        char[] charArray71 = new char[] { ' ' };
        printWriter69.write(charArray71);
        printWriter60.println(charArray71);
        printWriter60.println((int) (short) 0);
        char[] charArray77 = new char[] { '4' };
        printWriter60.println(charArray77);
        printWriter20.println(charArray77);
        printStream1.print(charArray77);
        java.io.PrintStream printStream82 = printStream1.append((java.lang.CharSequence) "France");
        java.io.PrintStream printStream84 = printStream1.append('4');
        printStream84.print((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Deutsch" + "'", str26, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ ]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ ]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[4]");
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(printStream84);
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setNumeratorDegreesOfFreedom((double) (short) 10);
        fDistribution6.setNumeratorDegreesOfFreedom((double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = fDistribution6.inverseCumulativeProbability((double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3039");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) '#');
        printStream1.print("JPN");
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale16.getDisplayVariant();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale16.getDisplayLanguage(locale19);
        boolean boolean22 = locale16.hasExtensions();
        java.lang.Object[] objArray24 = null;
        java.io.PrintWriter printWriter25 = printWriter15.printf(locale16, "German", objArray24);
        java.io.PrintStream printStream27 = new java.io.PrintStream("French (France)");
        printStream27.println((float) (short) -1);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream27);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream27);
        char[] charArray33 = new char[] { ' ' };
        printWriter31.write(charArray33);
        java.io.PrintStream printStream36 = new java.io.PrintStream("French (France)");
        printStream36.println((float) (short) -1);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream36);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream36);
        char[] charArray42 = new char[] { ' ' };
        printWriter40.write(charArray42);
        printWriter31.println(charArray42);
        printWriter31.println((int) (short) 0);
        char[] charArray48 = new char[] { '4' };
        printWriter31.println(charArray48);
        printWriter25.print(charArray48);
        printWriter6.println(charArray48);
        printWriter6.println();
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Deutsch" + "'", str21, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ ]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ ]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[4]");
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double5 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray2);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray0, doubleArray2, (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 34.99999999999999d + "'", double5 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3041");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) '4', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = org.apache.commons.math.stat.StatUtils.mean(doubleArray33, (int) (short) 1, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double) 10.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(1.0000000000000402d);
        double double10 = poissonDistribution8.probability(2147483646);
        poissonDistribution8.setMean(1225.0d);
        poissonDistribution8.setMean(0.691462461274013d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        double[] doubleArray5 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5, (double) (byte) 100);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5);
        double double10 = org.apache.commons.math.stat.StatUtils.sum(doubleArray5);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray5, (int) 'a', (-1), 12.2d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 515.7000000000007d + "'", double8 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 515.6999999999999d + "'", double9 == 515.6999999999999d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 61.0d + "'", double10 == 61.0d);
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("", "org.apache.commons.math.MathException: French");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: French");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3046");
        java.io.PrintStream printStream1 = new java.io.PrintStream("de");
        boolean boolean2 = printStream1.checkError();
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        java.io.PrintStream printStream10 = new java.io.PrintStream("zh-CN");
        printStream10.print('a');
        java.io.PrintStream printStream14 = new java.io.PrintStream("French (France)");
        printStream14.print((long) ' ');
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        byte[] byteArray19 = new byte[] {};
        printStream18.write(byteArray19);
        printStream14.write(byteArray19);
        printStream10.write(byteArray19);
        printStream8.write(byteArray19);
        printStream1.write(byteArray19);
        java.io.PrintStream printStream26 = printStream1.append((java.lang.CharSequence) "german");
        printStream1.close();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3047");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale[] localeArray69 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 1, mathException64, (byte) 0, localeList72, 1225.0d };
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("de", objArray74);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", objArray74, (java.lang.Throwable) mathException78);
        java.io.PrintStream printStream80 = printStream57.format("", objArray74);
        java.io.PrintStream printStream82 = new java.io.PrintStream((java.io.OutputStream) printStream57, false);
        printStream57.print((int) ' ');
        printStream57.print((long) (short) -1);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream80);
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3048");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setRegion("de");
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale9.getDisplayCountry(locale11);
        java.lang.String str15 = locale6.getDisplayName(locale11);
        java.util.Locale.Builder builder16 = builder5.setLocale(locale11);
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder19 = builder17.setLanguage("france");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "German" + "'", str10, "German");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FRA" + "'", str12, "FRA");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "allemand" + "'", str15, "allemand");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3049");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.print((long) 'u');
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale[] localeArray35 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList36);
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 1, mathException30, (byte) 0, localeList38, 1225.0d };
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("de", objArray40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("Chinesisch (China)", objArray40);
        java.io.PrintWriter printWriter44 = printWriter8.format("French", objArray40);
        printWriter44.write("anglais (Etats-Unis)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter44);
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 0, 0);
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1225.0d);
        double double18 = org.apache.commons.math.stat.StatUtils.max(doubleArray9);
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.max(doubleArray21);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, (double) '#');
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray21, doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double35 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray27);
        double double36 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray9);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double double41 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) (short) 0, (int) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.5553480614894135d + "'", double15 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3051");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        printWriter10.println(true);
        printWriter10.println(1L);
        org.junit.Assert.assertNotNull(printWriter10);
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, (double) '#');
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double18 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math.stat.StatUtils.mean(doubleArray9, 0, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3053");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 1, mathException31, (byte) 0, localeList39, 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("de", objArray41);
        java.io.PrintStream printStream44 = printStream22.printf(locale25, "hi!", objArray41);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) '#');
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        printStream44.print((java.lang.Object) doubleArray46);
        double[] doubleArray54 = new double[] { '#' };
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray46, doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sum(doubleArray46);
        java.io.PrintStream printStream59 = new java.io.PrintStream("French (France)");
        printStream59.println((float) (short) -1);
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale[] localeArray73 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList74);
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 1, mathException68, (byte) 0, localeList76, 1225.0d };
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("de", objArray78);
        java.io.PrintStream printStream81 = printStream59.printf(locale62, "hi!", objArray78);
        double[] doubleArray83 = new double[] { '#' };
        double double84 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray83);
        double double85 = org.apache.commons.math.stat.StatUtils.variance(doubleArray83);
        double double87 = org.apache.commons.math.stat.StatUtils.variance(doubleArray83, (double) '#');
        double double88 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray83);
        printStream81.print((java.lang.Object) doubleArray83);
        double[] doubleArray91 = new double[] { '#' };
        double double92 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray91);
        double double93 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray83, doubleArray91);
        double double94 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray46, doubleArray91);
        double double95 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray91);
        double double96 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray91);
        double double97 = org.apache.commons.math.stat.StatUtils.mean(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[35.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1225.0d + "'", double84 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1225.0d + "'", double88 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[35.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1225.0d + "'", double92 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1225.0d + "'", double95 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 35.0d + "'", double97 == 35.0d);
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double27 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray22);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray15, doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = tTestImpl12.t((double) 1.0f, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory18 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution21 = distributionFactory18.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory18.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory18.createTDistribution((double) 1L);
        double double25 = tDistribution24.getDegreesOfFreedom();
        tTestImpl17.setDistribution(tDistribution24);
        tDistribution24.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl29 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(117.0d);
        tTestImpl15.setDistribution(tDistribution24);
        org.apache.commons.math.distribution.TDistribution tDistribution33 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution33);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory35 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution38 = distributionFactory35.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory35.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory35.createTDistribution((double) 1L);
        double double42 = tDistribution41.getDegreesOfFreedom();
        tTestImpl34.setDistribution(tDistribution41);
        org.apache.commons.math.distribution.TDistribution tDistribution44 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl45 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution44);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory46 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution49 = distributionFactory46.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution50 = distributionFactory46.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution52 = distributionFactory46.createTDistribution((double) 1L);
        double double53 = tDistribution52.getDegreesOfFreedom();
        tTestImpl45.setDistribution(tDistribution52);
        tTestImpl34.setDistribution(tDistribution52);
        tTestImpl15.setDistribution(tDistribution52);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary58 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double59 = tTestImpl15.homoscedasticT(statisticalSummary57, statisticalSummary58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory18);
        org.junit.Assert.assertNotNull(weibullDistribution21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory35);
        org.junit.Assert.assertNotNull(weibullDistribution38);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory46);
        org.junit.Assert.assertNotNull(weibullDistribution49);
        org.junit.Assert.assertNotNull(normalDistribution50);
        org.junit.Assert.assertNotNull(tDistribution52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3056");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl12.tTest(3.5080495063977146E-4d, statisticalSummary14, Double.POSITIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: Infinity");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3057");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.print((double) 0);
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        byte[] byteArray6 = new byte[] {};
        printStream5.write(byteArray6);
        printStream1.write(byteArray6);
        printStream1.println();
        printStream1.print(false);
        printStream1.flush();
        printStream1.print((long) (short) 100);
        printStream1.println(0.965126505523586d);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3059");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        double double8 = cauchyDistribution6.getScale();
        double double9 = cauchyDistribution6.getScale();
        double double10 = cauchyDistribution6.getMedian();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (short) 100);
        double double10 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) (short) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getVariant();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = locale1.getDisplayCountry(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getISO3Language();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale8.getDisplayScript(locale10);
        java.lang.String str12 = locale8.getISO3Language();
        java.lang.String str13 = locale6.getDisplayName(locale8);
        java.util.Locale locale14 = locale6.stripExtensions();
        java.lang.String str15 = locale14.toLanguageTag();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.lang.String str17 = locale4.getDisplayLanguage(locale14);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "de" + "'", str7, "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "German" + "'", str13, "German");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "de" + "'", str15, "de");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Deutsch" + "'", str17, "Deutsch");
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3062");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) '#');
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double26 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray16, (double) ' ');
        double double27 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double double28 = org.apache.commons.math.stat.StatUtils.min(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = tTestImpl13.tTest(0.691462461274013d, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3063");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 1, mathException11, (byte) 0, localeList19, 1225.0d };
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("de", objArray21);
        java.io.PrintStream printStream24 = printStream2.printf(locale5, "hi!", objArray21);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale5.getDisplayLanguage(locale25);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("\uc601\uc5b4\ubbf8\uad6d)");
        java.util.Locale.setDefault(category0, locale30);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str26, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.lang.String str3 = locale0.getDisplayName();
        java.lang.String str4 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese (Taiwan)" + "'", str1, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese (Taiwan)" + "'", str3, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh_TW" + "'", str4, "zh_TW");
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1225.0d);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.max(doubleArray13);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19, (double) '#');
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray13, doubleArray19);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double27 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray19);
        double double28 = org.apache.commons.math.stat.StatUtils.mean(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = org.apache.commons.math.stat.StatUtils.max(doubleArray19, 2147483647, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2147483647");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: 120.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3067");
        java.util.Locale locale2 = new java.util.Locale("\u65e5\u6587", "\ub3c5\uc77c\uc5b4");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u65e5\u6587\ub3c5\uc77c\uc5b4");
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.io.PrintStream printStream6 = new java.io.PrintStream("French (France)");
        printStream6.println((float) (short) -1);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream6);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream6);
        java.lang.Object obj11 = null;
        printWriter10.println(obj11);
        printWriter10.write((int) (short) 1);
        printWriter10.println((-1.0d));
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.setLanguage("German");
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder22 = builder19.setRegion("de");
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getDisplayVariant();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = locale28.getISO3Country();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleKeys();
        java.lang.String str31 = locale26.getDisplayCountry(locale28);
        java.lang.String str32 = locale23.getDisplayName(locale28);
        java.util.Locale.Builder builder33 = builder22.setLocale(locale28);
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter10.printf(locale28, "german", objArray35);
        java.util.Locale.Builder builder37 = builder3.setLocale(locale28);
        java.util.Locale.Builder builder38 = builder3.clearExtensions();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream41 = new java.io.PrintStream("French (France)");
        printStream41.println((float) (short) -1);
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.Locale[] localeArray55 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.util.Locale>) localeList56);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 1, mathException50, (byte) 0, localeList58, 1225.0d };
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("hi!", objArray60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("de", objArray60);
        java.io.PrintStream printStream63 = printStream41.printf(locale44, "hi!", objArray60);
        java.util.Locale locale64 = java.util.Locale.TAIWAN;
        java.lang.String str65 = locale44.getDisplayLanguage(locale64);
        java.util.Locale.setDefault(category39, locale44);
        java.util.Locale.Builder builder67 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder69 = builder67.setLanguage("German");
        java.util.Locale locale70 = builder67.build();
        java.util.Locale.Builder builder71 = builder67.clearExtensions();
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.lang.String str73 = locale72.getISO3Country();
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.lang.String str75 = locale74.getISO3Language();
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.lang.String str77 = locale74.getDisplayScript(locale76);
        java.util.Locale locale78 = java.util.Locale.ROOT;
        java.lang.String str79 = locale78.getDisplayName();
        java.lang.String str80 = locale74.getDisplayScript(locale78);
        java.lang.String str81 = locale74.toLanguageTag();
        java.lang.String str82 = locale72.getDisplayLanguage(locale74);
        java.util.Locale.Builder builder83 = builder67.setLocale(locale74);
        java.util.Locale.setDefault(category39, locale74);
        java.util.Locale locale85 = java.util.Locale.getDefault(category39);
        java.util.Locale.Builder builder86 = builder3.setLocale(locale85);
        java.lang.String str87 = locale85.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "german");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "German" + "'", str27, "German");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "FRA" + "'", str29, "FRA");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "allemand" + "'", str32, "allemand");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str65, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "german");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "FRA" + "'", str73, "FRA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "und" + "'", str81, "und");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "French" + "'", str82, "French");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3069");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.print((double) (byte) 100);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(100.0f);
        boolean boolean15 = printStream1.checkError();
        java.io.PrintStream printStream17 = printStream1.append((java.lang.CharSequence) "FRA");
        java.io.PrintStream printStream19 = new java.io.PrintStream("French (France)");
        printStream19.println((float) (short) -1);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream19);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        char[] charArray25 = new char[] { ' ' };
        printWriter23.write(charArray25);
        java.io.PrintStream printStream28 = new java.io.PrintStream("French (France)");
        printStream28.println((float) (short) -1);
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream28);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream28);
        char[] charArray34 = new char[] { ' ' };
        printWriter32.write(charArray34);
        printWriter23.println(charArray34);
        printWriter23.println((long) 'u');
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.println((float) (short) -1);
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream40);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.OutputStream) printStream40);
        char[] charArray46 = new char[] { ' ' };
        printWriter44.write(charArray46);
        printWriter23.write(charArray46);
        printStream1.println(charArray46);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ ]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ ]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ ]");
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayScript(locale9);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale7.getDisplayScript(locale11);
        java.lang.String str14 = locale7.toLanguageTag();
        java.lang.String str15 = locale5.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder16 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder21 = builder19.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "French" + "'", str15, "French");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3071");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.println(0.06680720126885681d);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.lang.String str3 = locale2.getISO3Country();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.lang.String str5 = locale0.getDisplayCountry(locale2);
        java.util.Locale locale6 = locale2.stripExtensions();
        org.apache.commons.math.distribution.DistributionFactory distributionFactory7 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution10 = distributionFactory7.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory7.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution13 = distributionFactory7.createExponentialDistribution((double) 1L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory7.createNormalDistribution((double) 'a', 35.0d);
        double double17 = normalDistribution16.getMean();
        boolean boolean18 = locale2.equals((java.lang.Object) double17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "German" + "'", str1, "German");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FRA" + "'", str3, "FRA");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(distributionFactory7);
        org.junit.Assert.assertNotNull(weibullDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution11);
        org.junit.Assert.assertNotNull(exponentialDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 97.0d + "'", double17 == 97.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3073");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.util.Locale locale3 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale4.getUnicodeLocaleType("org.apache.commons.math.MathException: French");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.MathException: French");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3074");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.print((int) (byte) 10);
        printWriter5.print(false);
        printWriter5.print(100.0d);
        java.io.PrintWriter printWriter15 = printWriter5.append((java.lang.CharSequence) "zho");
        printWriter5.println();
        java.io.PrintWriter printWriter18 = printWriter5.append((java.lang.CharSequence) "CA");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution14 = distributionFactory0.createExponentialDistribution((double) (short) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution17 = distributionFactory0.createCauchyDistribution(120.0d, 100.0d);
        double double18 = cauchyDistribution17.getScale();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(exponentialDistribution14);
        org.junit.Assert.assertNotNull(cauchyDistribution17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream1 = new java.io.PrintStream("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (-1), (int) (short) 10, 0.9646641462260455d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (short) 100);
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        double double13 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 4.560969057281146E-69d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 3.5553480614894135d + "'", double10 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double double35 = org.apache.commons.math.stat.StatUtils.min(doubleArray27);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27, (int) 'u', 2147483647);
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, 1, 0);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double[] doubleArray48 = new double[] { '#' };
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double53 = org.apache.commons.math.stat.StatUtils.sum(doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.max(doubleArray48);
        double double55 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray58);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double63 = org.apache.commons.math.stat.StatUtils.product(doubleArray58);
        double double64 = org.apache.commons.math.stat.StatUtils.sum(doubleArray58);
        double[] doubleArray66 = new double[] { '#' };
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray66, 1, 0);
        double double71 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray66);
        double double72 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray58, doubleArray66);
        double double73 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray48, doubleArray66);
        double double75 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray48, (double) 10);
        double double76 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray41, doubleArray48);
        double double79 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = tTestImpl15.pairedTTest(doubleArray27, doubleArray41, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 34.99999999999999d + "'", double51 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.5553480614894135d + "'", double52 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 34.99999999999999d + "'", double61 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.5553480614894135d + "'", double62 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1225.0d + "'", double67 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 34.99999999999999d + "'", double71 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 35.0d + "'", double75 == 35.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double10 = poissonDistribution8.cumulativeProbability((int) '#');
        double double13 = poissonDistribution8.cumulativeProbability(0, (int) 'x');
        double double15 = poissonDistribution8.normalApproximateProbability((-1));
        double double17 = poissonDistribution8.normalApproximateProbability((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = poissonDistribution8.inverseCumulativeProbability(515.6999999999999d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.06680720126885803d + "'", double15 == 0.06680720126885803d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.308537538725987d + "'", double17 == 0.308537538725987d);
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3081");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.max(doubleArray14, 0, 0);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double double27 = org.apache.commons.math.stat.StatUtils.sum(doubleArray21);
        double double29 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray21, (double) (short) 100);
        double double30 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray14, doubleArray21);
        double double32 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray14, 0.24999999999999964d);
        double double33 = org.apache.commons.math.stat.StatUtils.mean(doubleArray14);
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale[] localeArray49 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList50);
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 1, mathException44, (byte) 0, localeList52, 1225.0d };
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("de", objArray54);
        java.io.PrintStream printStream57 = printStream35.printf(locale38, "hi!", objArray54);
        double[] doubleArray59 = new double[] { '#' };
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray59);
        double double61 = org.apache.commons.math.stat.StatUtils.variance(doubleArray59);
        double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray59, (double) '#');
        double double64 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray59);
        printStream57.print((java.lang.Object) doubleArray59);
        double[] doubleArray67 = new double[] { '#' };
        double double68 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double69 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray59, doubleArray67);
        double double70 = org.apache.commons.math.stat.StatUtils.min(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = tTestImpl12.pairedTTest(doubleArray14, doubleArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 3.5553480614894135d + "'", double25 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1225.0d + "'", double60 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1225.0d + "'", double64 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1225.0d + "'", double68 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 35.0d + "'", double70 == 35.0d);
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11, (double) '#');
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray11);
        double double19 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray11, (double) 1.0f);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double21 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray11);
        double double22 = org.apache.commons.math.stat.StatUtils.min(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3083");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setRegion("FR");
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setLanguage("German");
        java.util.Locale.Builder builder14 = builder11.clearExtensions();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.clearExtensions();
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale17.getDisplayLanguage(locale18);
        java.lang.String str21 = locale18.getScript();
        java.util.Locale.Builder builder22 = builder14.setLocale(locale18);
        java.util.Locale.Builder builder23 = builder10.setLocale(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder23.addUnicodeLocaleAttribute("\uc774\ud0c8\ub9ac\uc544\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ??????????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italienisch" + "'", str20, "Italienisch");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3084");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("Undetermined (FR_FR)", "Cina");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Cina");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3085");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = tTestImpl13.tTest(statisticalSummary14, statisticalSummary15, (-9.992007221626409E-16d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -9.992007221626409E-16");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Language();
        java.lang.String str3 = locale1.getDisplayName();
        java.lang.String str4 = locale0.getDisplayVariant(locale1);
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.setLanguage("German");
        java.util.Locale locale8 = builder5.build();
        java.util.Locale.Builder builder9 = builder5.clearExtensions();
        java.util.Locale.Builder builder11 = builder5.setLanguage("France");
        java.util.Locale.Builder builder13 = builder11.setLanguage("German");
        java.util.Locale.Builder builder15 = builder13.setScript("");
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = locale17.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale17.getDisplayCountry(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale20);
        java.lang.String str23 = locale20.getDisplayVariant();
        java.util.Locale.Builder builder24 = builder15.setLocale(locale20);
        java.lang.String str25 = locale20.getCountry();
        java.lang.String str26 = locale1.getDisplayScript(locale20);
        java.util.Set<java.lang.String> strSet27 = locale20.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "French (France)" + "'", str3, "French (France)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "german");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "FRA" + "'", str18, "FRA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "French (France)" + "'", str19, "French (France)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud504\ub791\uc2a4" + "'", str21, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str22, "\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strSet27);
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 1, mathException11, (byte) 0, localeList19, 1225.0d };
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("de", objArray21);
        java.io.PrintStream printStream24 = printStream2.printf(locale5, "hi!", objArray21);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale5.getDisplayLanguage(locale25);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.setLanguage("German");
        java.util.Locale locale31 = builder28.build();
        java.util.Locale.Builder builder32 = builder28.clearExtensions();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getISO3Language();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale35.getDisplayScript(locale37);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale39.getDisplayName();
        java.lang.String str41 = locale35.getDisplayScript(locale39);
        java.lang.String str42 = locale35.toLanguageTag();
        java.lang.String str43 = locale33.getDisplayLanguage(locale35);
        java.util.Locale.Builder builder44 = builder28.setLocale(locale35);
        java.util.Locale.setDefault(category0, locale35);
        java.lang.String str46 = locale35.getDisplayVariant();
        java.lang.String str47 = locale35.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str26, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "german");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FRA" + "'", str34, "FRA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "French" + "'", str43, "French");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.distribution.TDistribution tDistribution27 = null;
        tTestImpl26.setDistribution(tDistribution27);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double36 = org.apache.commons.math.stat.StatUtils.product(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.sum(doubleArray31);
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray31);
        double double40 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray31, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = tTestImpl26.tTest((double) 10.0f, doubleArray31, 97.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 97.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3089");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintStream printStream38 = printStream16.printf(locale19, "hi!", objArray35);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40, (double) '#');
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        printStream38.print((java.lang.Object) doubleArray40);
        double double47 = org.apache.commons.math.stat.StatUtils.mean(doubleArray40);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray49);
        double double55 = org.apache.commons.math.stat.StatUtils.sum(doubleArray49);
        double double57 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray49, (double) (short) 100);
        double double58 = org.apache.commons.math.stat.StatUtils.sum(doubleArray49);
        double double59 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray40, doubleArray49);
        double[] doubleArray61 = new double[] { '#' };
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray61);
        double double63 = org.apache.commons.math.stat.StatUtils.sum(doubleArray61);
        double double65 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray61, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl14.pairedT(doubleArray49, doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 34.99999999999999d + "'", double52 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.5553480614894135d + "'", double53 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1225.0d + "'", double62 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 35.0d + "'", double65 == 35.0d);
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3090");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray11 = new double[] { 'u', (short) 100 };
        double double12 = tTestImpl7.tTest(10.0d, doubleArray11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.max(doubleArray14, 0, 0);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21, (double) '#');
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double29 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray14, doubleArray21);
        double double30 = org.apache.commons.math.stat.StatUtils.mean(doubleArray21);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double37 = org.apache.commons.math.stat.StatUtils.sum(doubleArray32);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32, 1225.0d);
        double double41 = org.apache.commons.math.stat.StatUtils.max(doubleArray32);
        double double42 = org.apache.commons.math.stat.StatUtils.product(doubleArray32);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.max(doubleArray44);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, (double) '#');
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double56 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray44, doubleArray50);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double double58 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray32, doubleArray50);
        double[] doubleArray60 = new double[] { '#' };
        double double61 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        double double62 = org.apache.commons.math.stat.StatUtils.variance(doubleArray60);
        double double63 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray60);
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60);
        double double65 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double double66 = org.apache.commons.math.stat.StatUtils.sum(doubleArray60);
        double double67 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray60);
        double double68 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray70 = new double[] { '#' };
        double double71 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double72 = org.apache.commons.math.stat.StatUtils.variance(doubleArray70);
        double double74 = org.apache.commons.math.stat.StatUtils.variance(doubleArray70, (double) '#');
        double double75 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double76 = org.apache.commons.math.stat.StatUtils.sum(doubleArray70);
        double double78 = org.apache.commons.math.stat.StatUtils.variance(doubleArray70, (double) (short) 100);
        double double79 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70);
        double double80 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray70);
        double double81 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray50, doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = tTestImpl7.tTest(doubleArray21, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[117.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.054800971425164935d + "'", double12 == 0.054800971425164935d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.5553480614894135d + "'", double28 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.5553480614894135d + "'", double38 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 34.99999999999999d + "'", double47 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1225.0d + "'", double61 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 34.99999999999999d + "'", double63 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 3.5553480614894135d + "'", double64 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 35.0d + "'", double65 == 35.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 35.0d + "'", double66 == 35.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 34.99999999999999d + "'", double67 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 35.0d + "'", double68 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1225.0d + "'", double71 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1225.0d + "'", double75 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 35.0d + "'", double76 == 35.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 3.5553480614894135d + "'", double79 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        java.util.Locale locale1 = new java.util.Locale("org.apache.commons.math.MathException: allemand");
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale4 = java.util.Locale.PRC;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale1.getDisplayCountry(locale3);
        java.util.Locale.setDefault(locale3);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory8.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution14 = distributionFactory8.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution16 = distributionFactory8.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.TDistribution tDistribution18 = distributionFactory8.createTDistribution((double) (byte) 1);
        tDistribution18.setDegreesOfFreedom(2.147483647E9d);
        boolean boolean21 = locale3.equals((java.lang.Object) tDistribution18);
        org.junit.Assert.assertEquals(locale1.toString(), "org.apache.commons.math.mathexception: allemand");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(tDistribution14);
        org.junit.Assert.assertNotNull(chiSquaredDistribution16);
        org.junit.Assert.assertNotNull(tDistribution18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap15);
        java.lang.String[] strArray24 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags(languageRangeList16, (java.util.Collection<java.lang.String>) strList25);
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList27);
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList27);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = locale30.getISO3Country();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, strMap37);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strMap42);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList43, strMap44);
        java.lang.String[] strArray53 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList45, (java.util.Collection<java.lang.String>) strList54);
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap60 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList61 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, strMap60);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList61, strMap62);
        java.lang.String[] strArray71 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags(languageRangeList63, (java.util.Collection<java.lang.String>) strList72);
        java.util.Locale.FilteringMode filteringMode75 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags(languageRangeList45, (java.util.Collection<java.lang.String>) strList72, filteringMode75);
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags(languageRangeList38, (java.util.Collection<java.lang.String>) strList76);
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList77);
        java.util.Locale locale79 = java.util.Locale.GERMAN;
        boolean boolean80 = locale79.hasExtensions();
        java.util.Set<java.lang.String> strSet81 = locale79.getUnicodeLocaleKeys();
        java.lang.String str82 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet81);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "FRA" + "'", str31, "FRA");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(languageRangeList61);
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertTrue("'" + filteringMode75 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode75.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3093");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) '4', 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        byte[] byteArray2 = new byte[] {};
        printStream1.write(byteArray2);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.print((long) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        byte[] byteArray10 = new byte[] {};
        printStream9.write(byteArray10);
        printStream5.write(byteArray10);
        printStream1.write(byteArray10);
        java.io.PrintStream printStream15 = printStream1.append('u');
        java.io.PrintStream printStream17 = printStream1.append((java.lang.CharSequence) "");
        printStream1.println(10.0d);
        printStream1.println(' ');
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream17);
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream1.println('#');
        printStream1.println(true);
        printStream1.println(0L);
        printStream1.print("Chine");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (byte) -1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double18 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray10, (double) (short) 100);
        double double19 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double22 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray10, (double) 100.0f);
        double double23 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, (int) (byte) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.5553480614894135d + "'", double14 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3097");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        printWriter8.flush();
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter8, false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream17);
        printStream17.print((long) (short) 0);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printStream17.print(charArray30);
        printWriter15.print(charArray30);
        printWriter13.println(charArray30);
        printWriter13.print((float) 52);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        printWriter18.print("org.apache.commons.math.MathException: de");
        printWriter18.println((float) 100);
        printWriter18.print("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        java.util.Locale locale27 = java.util.Locale.US;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 1, mathException35, (byte) 0, localeList43, 1225.0d };
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("de", objArray45);
        java.io.PrintWriter printWriter48 = printWriter18.format(locale28, "Franz\366sisch (Frankreich)", objArray45);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("Chinesisch (China)", (java.lang.Throwable) mathException53);
        java.lang.Object[] objArray55 = mathException54.getArguments();
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale[] localeArray65 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList66);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 1, mathException60, (byte) 0, localeList68, 1225.0d };
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("");
        mathException71.addSuppressed((java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("", objArray55, (java.lang.Throwable) mathException76);
        java.io.PrintWriter printWriter78 = printWriter48.format("francese (Francia)", objArray55);
        java.io.PrintWriter printWriter80 = printWriter48.append('x');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4" + "'", str29, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printWriter80);
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory30 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution33 = distributionFactory30.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution36 = distributionFactory30.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory30.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory30.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tTestImpl12.setDistribution(tDistribution41);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) '#');
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double52 = org.apache.commons.math.stat.StatUtils.sum(doubleArray46);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) (short) 100);
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double56 = org.apache.commons.math.stat.StatUtils.mean(doubleArray46);
        double[] doubleArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double58 = tTestImpl12.homoscedasticTTest(doubleArray46, doubleArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory30);
        org.junit.Assert.assertNotNull(weibullDistribution33);
        org.junit.Assert.assertNotNull(fDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 3.5553480614894135d + "'", double55 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3100");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory18 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution21 = distributionFactory18.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory18.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory18.createTDistribution((double) 1L);
        double double25 = tDistribution24.getDegreesOfFreedom();
        tTestImpl17.setDistribution(tDistribution24);
        tDistribution24.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl29 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(117.0d);
        tTestImpl15.setDistribution(tDistribution24);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory33 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution36 = distributionFactory33.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution37 = distributionFactory33.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution39 = distributionFactory33.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution41 = distributionFactory33.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.TDistribution tDistribution43 = distributionFactory33.createTDistribution((double) (byte) 1);
        tTestImpl15.setDistribution(tDistribution43);
        double[] doubleArray47 = new double[] { '#' };
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47, (double) '#');
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47);
        double double56 = org.apache.commons.math.stat.StatUtils.mean(doubleArray47, (int) (short) 0, (int) (byte) 0);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray58);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double63 = org.apache.commons.math.stat.StatUtils.sum(doubleArray58);
        double double64 = org.apache.commons.math.stat.StatUtils.max(doubleArray58);
        double double65 = org.apache.commons.math.stat.StatUtils.min(doubleArray58);
        double double66 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double[] doubleArray68 = new double[] { '#' };
        double double69 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68);
        double double71 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray68);
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double double73 = org.apache.commons.math.stat.StatUtils.product(doubleArray68);
        double double74 = org.apache.commons.math.stat.StatUtils.sum(doubleArray68);
        double[] doubleArray76 = new double[] { '#' };
        double double77 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray76);
        double double80 = org.apache.commons.math.stat.StatUtils.variance(doubleArray76, 1, 0);
        double double81 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray76);
        double double82 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray68, doubleArray76);
        double double83 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray58, doubleArray76);
        double double84 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray47, doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = tTestImpl15.tTest((-175.50000024991118d), doubleArray47, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory18);
        org.junit.Assert.assertNotNull(weibullDistribution21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory33);
        org.junit.Assert.assertNotNull(weibullDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution37);
        org.junit.Assert.assertNotNull(tDistribution39);
        org.junit.Assert.assertNotNull(chiSquaredDistribution41);
        org.junit.Assert.assertNotNull(tDistribution43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1225.0d + "'", double48 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 34.99999999999999d + "'", double61 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.5553480614894135d + "'", double62 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 35.0d + "'", double65 == 35.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1225.0d + "'", double69 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 34.99999999999999d + "'", double71 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 3.5553480614894135d + "'", double72 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 35.0d + "'", double73 == 35.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 35.0d + "'", double74 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[35.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1225.0d + "'", double77 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 34.99999999999999d + "'", double81 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 0, 0);
        double double7 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        double[] doubleArray13 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, (double) (byte) 100);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 515.7000000000007d + "'", double16 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 515.6999999999999d + "'", double17 == 515.6999999999999d);
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(12.2d, 10.0d);
        gammaDistribution15.setBeta(0.6321205588285574d);
        double double18 = gammaDistribution15.getAlpha();
        double double19 = gammaDistribution15.getBeta();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 12.2d + "'", double18 == 12.2d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.6321205588285574d + "'", double19 == 0.6321205588285574d);
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3103");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        byte[] byteArray2 = new byte[] {};
        printStream1.write(byteArray2);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.print((long) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        byte[] byteArray10 = new byte[] {};
        printStream9.write(byteArray10);
        printStream5.write(byteArray10);
        printStream1.write(byteArray10);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        printStream15.println(' ');
        printStream15.print(false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getDisplayVariant();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale23.getDisplayLanguage(locale26);
        boolean boolean29 = locale23.hasExtensions();
        java.lang.Object[] objArray31 = null;
        java.io.PrintWriter printWriter32 = printWriter22.printf(locale23, "German", objArray31);
        java.util.Locale locale33 = null;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Locale[] localeArray44 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList45 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList45, localeArray44);
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.util.Locale>) localeList45);
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 1, mathException39, (byte) 0, localeList47, 1225.0d };
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("de", objArray49);
        java.io.PrintWriter printWriter52 = printWriter22.printf(locale33, "zh-CN", objArray49);
        printWriter22.write((int) '#');
        printWriter22.print('x');
        printStream1.print((java.lang.Object) 'x');
        java.io.PrintStream printStream61 = new java.io.PrintStream("French (France)");
        printStream61.println((float) (short) -1);
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Locale[] localeArray75 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList76);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 1, mathException70, (byte) 0, localeList78, 1225.0d };
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", objArray80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("de", objArray80);
        java.io.PrintStream printStream83 = printStream61.printf(locale64, "hi!", objArray80);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("und", objArray80);
        java.io.PrintStream printStream85 = printStream1.format("zh", objArray80);
        printStream1.print((int) (short) 1);
        printStream1.print((int) (short) 10);
        printStream1.println((int) 'a');
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Deutsch" + "'", str28, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream83);
        org.junit.Assert.assertNotNull(printStream85);
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8, (double) '#');
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double15 = org.apache.commons.math.stat.StatUtils.min(doubleArray8);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray8);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, (double) '#');
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double25 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray18);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray18, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en");
        printStream1.print((float) 10L);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray7);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("");
        mathException24.addSuppressed((java.lang.Throwable) mathException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) strArray7, (java.lang.Throwable) mathException28);
        java.io.PrintStream printStream31 = printStream1.format("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: DE", (java.lang.Object[]) strArray7);
        printStream31.flush();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream31);
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3106");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale locale7 = builder6.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3107");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = locale2.getISO3Language();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getISO3Language();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.lang.String str8 = locale0.getDisplayScript();
        java.lang.String str9 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de" + "'", str1, "de");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "German" + "'", str7, "German");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "de" + "'", str9, "de");
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3108");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 0, 0);
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        weibullDistribution3.setScale(0.5199388058383725d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        printWriter18.println(1);
        printWriter18.println('x');
        printWriter18.print((double) 1L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        char[] charArray14 = new char[] { ' ' };
        printWriter12.write(charArray14);
        printStream1.print(charArray14);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter24 = printWriter20.append((java.lang.CharSequence) "\uc911\uad6d", (int) (short) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ]");
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        printStream1.println(8.999999999999998d);
        printStream1.println("\ub3c5\uc77c\uc5b4");
        boolean boolean33 = printStream1.checkError();
        printStream1.println((double) 'u');
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getISO3Language();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayScript(locale38);
        java.lang.String str40 = locale38.getCountry();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getISO3Language();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale41.getDisplayScript(locale43);
        java.lang.String str45 = locale38.getDisplayName(locale43);
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = locale47.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale47.getDisplayCountry(locale50);
        java.lang.String str52 = locale46.getDisplayCountry(locale50);
        java.lang.String str53 = locale43.getDisplayScript(locale46);
        java.util.Set<java.lang.String> strSet54 = locale46.getUnicodeLocaleAttributes();
        java.io.PrintStream printStream58 = new java.io.PrintStream("French (France)");
        printStream58.println((float) (short) -1);
        printStream58.println(' ');
        printStream58.print(false);
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter((java.io.OutputStream) printStream58);
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        boolean boolean67 = locale66.hasExtensions();
        java.lang.String str68 = locale66.getDisplayVariant();
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        boolean boolean70 = locale69.hasExtensions();
        java.lang.String str71 = locale66.getDisplayLanguage(locale69);
        boolean boolean72 = locale66.hasExtensions();
        java.lang.Object[] objArray74 = null;
        java.io.PrintWriter printWriter75 = printWriter65.printf(locale66, "German", objArray74);
        java.util.Locale locale76 = null;
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray84 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList85 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList85, languageRangeArray84);
        java.util.Locale[] localeArray87 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList88 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList88, localeArray87);
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList85, (java.util.Collection<java.util.Locale>) localeList88);
        java.lang.Object[] objArray92 = new java.lang.Object[] { (byte) 1, mathException82, (byte) 0, localeList90, 1225.0d };
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("hi!", objArray92);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("de", objArray92);
        java.io.PrintWriter printWriter95 = printWriter65.printf(locale76, "zh-CN", objArray92);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("de", objArray92);
        java.io.PrintStream printStream97 = printStream1.format(locale46, "Chinesisch (China)", objArray92);
        java.util.Set<java.lang.Character> charSet98 = locale46.getExtensionKeys();
        java.lang.String str99 = locale46.getVariant();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Deutsch" + "'", str45, "Deutsch");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "FRA" + "'", str48, "FRA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "French (France)" + "'", str49, "French (France)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\ud504\ub791\uc2a4" + "'", str51, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str52, "\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Deutsch" + "'", str71, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(languageRangeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(localeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter95);
        org.junit.Assert.assertNotNull(printStream97);
        org.junit.Assert.assertNotNull(charSet98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3113");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        printWriter18.println(1);
        printWriter18.println("\uc774\ud0c8\ub9ac\uc544\uc5b4");
        boolean boolean25 = printWriter18.checkError();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3114");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution((double) (short) 1, (double) (short) 1);
        normalDistribution14.setStandardDeviation((double) (short) 10);
        double double17 = normalDistribution14.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, 1225.0d);
        double double25 = org.apache.commons.math.stat.StatUtils.max(doubleArray16);
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34, (double) '#');
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray28, doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double42 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray16, doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = tTestImpl13.tTest(0.06680720126885681d, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3116");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4);
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double13 = org.apache.commons.math.stat.StatUtils.mean(doubleArray4, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray4);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4);
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4, 0.0d, 2147483646, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 3.5553480614894135d + "'", double10 == 3.5553480614894135d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3117");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.io.PrintStream printStream6 = new java.io.PrintStream("French (France)");
        printStream6.println((float) (short) -1);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream6);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream6);
        java.lang.Object obj11 = null;
        printWriter10.println(obj11);
        printWriter10.write((int) (short) 1);
        printWriter10.println((-1.0d));
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.setLanguage("German");
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder22 = builder19.setRegion("de");
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getDisplayVariant();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = locale28.getISO3Country();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleKeys();
        java.lang.String str31 = locale26.getDisplayCountry(locale28);
        java.lang.String str32 = locale23.getDisplayName(locale28);
        java.util.Locale.Builder builder33 = builder22.setLocale(locale28);
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter10.printf(locale28, "german", objArray35);
        java.util.Locale.Builder builder37 = builder3.setLocale(locale28);
        java.util.Locale.Builder builder39 = builder3.setLanguageTag("Italian");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "german");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "German" + "'", str27, "German");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "FRA" + "'", str29, "FRA");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "allemand" + "'", str32, "allemand");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3118");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory26 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution29 = distributionFactory26.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution32 = distributionFactory26.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution35 = distributionFactory26.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory26.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        tTestImpl15.setDistribution(tDistribution37);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double double46 = org.apache.commons.math.stat.StatUtils.product(doubleArray41);
        double double47 = org.apache.commons.math.stat.StatUtils.sum(doubleArray41);
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray41);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, (double) '#');
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double56 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray41, doubleArray50);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = tTestImpl15.pairedTTest(doubleArray41, doubleArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(distributionFactory26);
        org.junit.Assert.assertNotNull(weibullDistribution29);
        org.junit.Assert.assertNotNull(cauchyDistribution32);
        org.junit.Assert.assertNotNull(gammaDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 34.99999999999999d + "'", double44 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.5553480614894135d + "'", double45 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray11 = new double[] { 'u', (short) 100 };
        double double12 = tTestImpl7.tTest(10.0d, doubleArray11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        org.apache.commons.math.distribution.TDistribution tDistribution26 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution26);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory28 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution31 = distributionFactory28.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory28.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory28.createTDistribution((double) 1L);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl27.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        tTestImpl25.setDistribution(tDistribution34);
        tTestImpl7.setDistribution(tDistribution34);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double49 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double51 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double double52 = org.apache.commons.math.stat.StatUtils.sum(doubleArray46);
        double double53 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray46);
        double double55 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray46, 0.03172551743055352d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = tTestImpl7.tTest((double) (short) 100, doubleArray46, 61.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 61.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[117.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.054800971425164935d + "'", double12 == 0.054800971425164935d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(distributionFactory28);
        org.junit.Assert.assertNotNull(weibullDistribution31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 34.99999999999999d + "'", double49 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 3.5553480614894135d + "'", double50 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 34.99999999999999d + "'", double53 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3120");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 1, mathException11, (byte) 0, localeList19, 1225.0d };
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("de", objArray21);
        java.io.PrintStream printStream24 = printStream2.printf(locale5, "hi!", objArray21);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale5.getDisplayLanguage(locale25);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale.setDefault(category0, locale28);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = locale31.getISO3Language();
        java.lang.String str33 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale36 = new java.util.Locale("zh", "zh-CN");
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        boolean boolean39 = locale38.hasExtensions();
        java.lang.String str40 = locale37.getDisplayLanguage(locale38);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = locale41.getISO3Language();
        java.lang.String str43 = locale41.getDisplayName();
        boolean boolean44 = locale41.hasExtensions();
        java.lang.String str45 = locale38.getDisplayLanguage(locale41);
        java.util.Set<java.lang.Character> charSet46 = locale38.getExtensionKeys();
        java.lang.String str47 = locale38.toLanguageTag();
        java.lang.String str48 = locale36.getDisplayName(locale38);
        java.lang.String str49 = locale30.getDisplayVariant(locale36);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str26, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fra" + "'", str32, "fra");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals(locale36.toString(), "zh_ZH-CN");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Italienisch" + "'", str40, "Italienisch");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fra" + "'", str42, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str43, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "allemand" + "'", str45, "allemand");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "de" + "'", str47, "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinesisch (ZH-CN)" + "'", str48, "Chinesisch (ZH-CN)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        tDistribution22.setDegreesOfFreedom(100.0d);
        tDistribution22.setDegreesOfFreedom(0.003594758625082406d);
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double30 = tTestImpl15.t(statisticalSummary28, statisticalSummary29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3122");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (short) 100);
        double double10 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (int) (byte) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 34.99999999999999d + "'", double11 == 34.99999999999999d);
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        printWriter5.println(false);
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        printStream35.println(' ');
        printStream35.print(false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        java.io.PrintWriter printWriter44 = printWriter42.append(' ');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale45.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = locale50.getISO3Country();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.lang.String str53 = locale48.getDisplayCountry(locale50);
        java.lang.String str54 = locale45.getDisplayName(locale50);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale[] localeArray65 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList66);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 1, mathException60, (byte) 0, localeList68, 1225.0d };
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("de", objArray70);
        java.io.PrintWriter printWriter73 = printWriter44.printf(locale45, "zho", objArray70);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Locale[] localeArray83 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.util.Locale>) localeList84);
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 1, mathException78, (byte) 0, localeList86, 1225.0d };
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("hi!", objArray88);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("");
        mathException89.addSuppressed((java.lang.Throwable) mathException91);
        java.lang.Object[] objArray93 = mathException89.getArguments();
        java.io.PrintWriter printWriter94 = printWriter5.printf(locale45, "it", objArray93);
        printWriter5.print("cinese (Cina)");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str49, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FRA" + "'", str51, "FRA");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "allemand" + "'", str54, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter94);
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, 0, 1);
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.5553480614894135d + "'", double12 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3125");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en");
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("de", objArray23);
        java.io.PrintStream printStream26 = printStream4.printf(locale7, "hi!", objArray23);
        java.io.PrintStream printStream27 = printStream1.printf("FR", objArray23);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory28 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution31 = distributionFactory28.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution34 = distributionFactory28.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution37 = distributionFactory28.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution40 = distributionFactory28.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution43 = distributionFactory28.createNormalDistribution((double) 10.0f, 0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution45 = distributionFactory28.createExponentialDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution48 = distributionFactory28.createBinomialDistribution(120, 0.0d);
        double double49 = binomialDistribution48.getProbabilityOfSuccess();
        printStream27.print((java.lang.Object) binomialDistribution48);
        binomialDistribution48.setNumberOfTrials((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int54 = binomialDistribution48.inverseCumulativeProbability((double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(distributionFactory28);
        org.junit.Assert.assertNotNull(weibullDistribution31);
        org.junit.Assert.assertNotNull(fDistribution34);
        org.junit.Assert.assertNotNull(normalDistribution37);
        org.junit.Assert.assertNotNull(normalDistribution40);
        org.junit.Assert.assertNotNull(normalDistribution43);
        org.junit.Assert.assertNotNull(exponentialDistribution45);
        org.junit.Assert.assertNotNull(binomialDistribution48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution13 = distributionFactory0.createChiSquareDistribution((double) 1.0f);
        chiSquaredDistribution13.setDegreesOfFreedom((double) 100L);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertNotNull(chiSquaredDistribution13);
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3127");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream3 = new java.io.PrintStream("French (France)");
        printStream3.println((float) (short) -1);
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream3);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream3);
        java.lang.Object obj8 = null;
        printWriter7.println(obj8);
        printWriter7.write((int) (short) 1);
        java.io.PrintStream printStream13 = new java.io.PrintStream("French (France)");
        printStream13.println((float) (short) -1);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream13);
        char[] charArray19 = new char[] { ' ' };
        printWriter17.write(charArray19);
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream22);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream22);
        char[] charArray28 = new char[] { ' ' };
        printWriter26.write(charArray28);
        printWriter17.println(charArray28);
        printWriter7.write(charArray28, (int) (byte) 0, 1);
        printWriter1.println(charArray28);
        printWriter1.print(true);
        boolean boolean37 = printWriter1.checkError();
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ ]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setProbabilityOfSuccess(0.0d);
        double double14 = pascalDistribution6.probability(10.0d);
        int int15 = pascalDistribution6.getNumberOfSuccesses();
        double double16 = pascalDistribution6.getProbabilityOfSuccess();
        pascalDistribution6.setProbabilityOfSuccess((double) 0L);
        double double21 = pascalDistribution6.cumulativeProbability((int) ' ', (int) ' ');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str1 = locale0.getVariant();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.Class<?> wildcardClass3 = locale0.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fran\347ais");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=franc?ais");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl15.t(statisticalSummary16, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3132");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        printWriter5.println(charArray16);
        java.io.PrintWriter printWriter20 = printWriter5.append((java.lang.CharSequence) "FRA");
        printWriter5.println((double) 10.0f);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.print((long) ' ');
        printStream24.print((int) ' ');
        java.io.PrintStream printStream30 = new java.io.PrintStream("French (France)");
        printStream30.println((float) (short) -1);
        printStream30.println(' ');
        printStream30.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream38 = new java.io.PrintStream("French (France)");
        printStream38.println((float) (short) -1);
        java.io.PrintStream printStream41 = new java.io.PrintStream((java.io.OutputStream) printStream38);
        printStream38.print((long) (short) 0);
        java.io.PrintStream printStream45 = new java.io.PrintStream("French (France)");
        printStream45.println((float) (short) -1);
        java.io.PrintStream printStream48 = new java.io.PrintStream((java.io.OutputStream) printStream45);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.OutputStream) printStream45);
        char[] charArray51 = new char[] { ' ' };
        printWriter49.write(charArray51);
        printStream38.print(charArray51);
        printStream30.println(charArray51);
        printStream24.println(charArray51);
        printWriter5.println(charArray51);
        java.lang.String[] strArray57 = java.util.Locale.getISOLanguages();
        printWriter5.print((java.lang.Object) strArray57);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[ ]");
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3133");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double double23 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray15, (double) (short) 100);
        double double24 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double27 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray15, (double) 100.0f);
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30);
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.max(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = tTestImpl13.homoscedasticTTest(doubleArray15, doubleArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3134");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        gammaDistribution9.setAlpha(100.0d);
        gammaDistribution9.setAlpha(0.6321205588285574d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3135");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setRegion("de");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3136");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.print((int) (byte) 10);
        printWriter5.print(false);
        printWriter5.print(100.0d);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getISO3Country();
        printWriter5.print((java.lang.Object) locale14);
        java.io.PrintWriter printWriter18 = printWriter5.append(' ');
        printWriter5.println('4');
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream22);
        printStream25.print((long) ' ');
        printStream25.print((-1L));
        printStream25.close();
        printStream25.write((int) (byte) -1);
        printStream25.print('x');
        printStream25.flush();
        printWriter5.println((java.lang.Object) printStream25);
        printStream25.println(true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FRA" + "'", str15, "FRA");
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double9 = poissonDistribution8.getMean();
        double double11 = poissonDistribution8.normalApproximateProbability((int) (byte) 100);
        double double13 = poissonDistribution8.normalApproximateProbability((int) '4');
        double double15 = poissonDistribution8.cumulativeProbability(0);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.3678794411714425d + "'", double15 == 0.3678794411714425d);
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        printWriter5.println(false);
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        printStream35.println(' ');
        printStream35.print(false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        java.io.PrintWriter printWriter44 = printWriter42.append(' ');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale45.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = locale50.getISO3Country();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.lang.String str53 = locale48.getDisplayCountry(locale50);
        java.lang.String str54 = locale45.getDisplayName(locale50);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale[] localeArray65 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList66);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 1, mathException60, (byte) 0, localeList68, 1225.0d };
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("de", objArray70);
        java.io.PrintWriter printWriter73 = printWriter44.printf(locale45, "zho", objArray70);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Locale[] localeArray83 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.util.Locale>) localeList84);
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 1, mathException78, (byte) 0, localeList86, 1225.0d };
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("hi!", objArray88);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("");
        mathException89.addSuppressed((java.lang.Throwable) mathException91);
        java.lang.Object[] objArray93 = mathException89.getArguments();
        java.io.PrintWriter printWriter94 = printWriter5.printf(locale45, "it", objArray93);
        java.io.PrintWriter printWriter96 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        printWriter96.print(true);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str49, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FRA" + "'", str51, "FRA");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "allemand" + "'", str54, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter94);
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setLanguage("French");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setScript("zh");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: zh [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3140");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setUnicodeLocaleKeyword("Italienisch", "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: DE");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Italienisch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        char[] charArray14 = new char[] { ' ' };
        printWriter12.write(charArray14);
        printStream1.print(charArray14);
        printStream1.println("Chinese (Taiwan)");
        printStream1.write((int) '4');
        printStream1.print((float) 52);
        printStream1.flush();
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ]");
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3142");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl16 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale[] localeArray32 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList33);
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 1, mathException27, (byte) 0, localeList35, 1225.0d };
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("de", objArray37);
        java.io.PrintStream printStream40 = printStream18.printf(locale21, "hi!", objArray37);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42, (double) '#');
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        printStream40.print((java.lang.Object) doubleArray42);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray42, doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray42);
        double double56 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray42, 1, (int) (byte) 0);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double63 = org.apache.commons.math.stat.StatUtils.max(doubleArray58, 0, 0);
        double double64 = org.apache.commons.math.stat.StatUtils.min(doubleArray58);
        double[] doubleArray66 = new double[] { '#' };
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        double double68 = org.apache.commons.math.stat.StatUtils.variance(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray66);
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double71 = org.apache.commons.math.stat.StatUtils.product(doubleArray66);
        double double72 = org.apache.commons.math.stat.StatUtils.sum(doubleArray66);
        double[] doubleArray74 = new double[] { '#' };
        double double75 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray74);
        double double78 = org.apache.commons.math.stat.StatUtils.variance(doubleArray74, 1, 0);
        double double79 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray74);
        double double80 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray66, doubleArray74);
        double double81 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double82 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray66);
        double double83 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray58, doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = tTestImpl16.pairedT(doubleArray42, doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1225.0d + "'", double67 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 34.99999999999999d + "'", double69 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 3.5553480614894135d + "'", double70 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 35.0d + "'", double71 == 35.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 35.0d + "'", double72 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1225.0d + "'", double75 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 34.99999999999999d + "'", double79 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 3.5553480614894135d + "'", double81 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 34.99999999999999d + "'", double82 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11, (double) '#');
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray11);
        double double19 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray11, (double) 1.0f);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double21 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11, 35, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3144");
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("de", objArray23);
        java.io.PrintStream printStream26 = printStream4.printf(locale7, "hi!", objArray23);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("und", objArray23);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        java.lang.Object[] objArray29 = mathException28.getArguments();
        java.io.PrintStream printStream32 = new java.io.PrintStream("French (France)");
        printStream32.println((float) (short) -1);
        printStream32.println(' ');
        printStream32.print(false);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.OutputStream) printStream32);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        boolean boolean41 = locale40.hasExtensions();
        java.lang.String str42 = locale40.getDisplayVariant();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        boolean boolean44 = locale43.hasExtensions();
        java.lang.String str45 = locale40.getDisplayLanguage(locale43);
        boolean boolean46 = locale40.hasExtensions();
        java.lang.Object[] objArray48 = null;
        java.io.PrintWriter printWriter49 = printWriter39.printf(locale40, "German", objArray48);
        java.lang.Object obj50 = null;
        printWriter49.print(obj50);
        printWriter49.print("org.apache.commons.math.MathException: de");
        printWriter49.println((float) 100);
        printWriter49.print("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        java.util.Locale locale58 = java.util.Locale.US;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Locale[] localeArray71 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.util.Locale>) localeList72);
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 1, mathException66, (byte) 0, localeList74, 1225.0d };
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("de", objArray76);
        java.io.PrintWriter printWriter79 = printWriter49.format(locale59, "Franz\366sisch (Frankreich)", objArray76);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("FR", objArray76);
        java.lang.Throwable[] throwableArray81 = mathException80.getSuppressed();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("zh_TW", objArray29, (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("france");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("", objArray29, (java.lang.Throwable) mathException84);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Deutsch" + "'", str45, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\uc601\uc5b4" + "'", str60, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(throwableArray81);
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        java.io.PrintStream printStream38 = new java.io.PrintStream("French (France)");
        printStream38.println((float) (short) -1);
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale[] localeArray52 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList53);
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 1, mathException47, (byte) 0, localeList55, 1225.0d };
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("de", objArray57);
        java.io.PrintStream printStream60 = printStream38.printf(locale41, "hi!", objArray57);
        double[] doubleArray62 = new double[] { '#' };
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62);
        double double64 = org.apache.commons.math.stat.StatUtils.variance(doubleArray62);
        double double66 = org.apache.commons.math.stat.StatUtils.variance(doubleArray62, (double) '#');
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62);
        printStream60.print((java.lang.Object) doubleArray62);
        double[] doubleArray70 = new double[] { '#' };
        double double71 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double72 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray62, doubleArray70);
        double double73 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray70);
        double double74 = org.apache.commons.math.stat.StatUtils.mean(doubleArray25);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1225.0d + "'", double63 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1225.0d + "'", double67 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1225.0d + "'", double71 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 35.0d + "'", double74 == 35.0d);
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3146");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.removeUnicodeLocaleAttribute("\uc601\uc5b4\uc601\uad6d)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????? (??????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("allemand", (double) 0L);
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream4);
        printStream4.print((long) (short) 0);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        printStream4.print(charArray17);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream4, true);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream4, true);
        printStream4.println(false);
        java.io.PrintStream printStream27 = printStream4.append('#');
        printStream4.write((int) (short) 10);
        printStream4.flush();
        boolean boolean31 = languageRange2.equals((java.lang.Object) printStream4);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3148");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        boolean boolean6 = locale5.hasExtensions();
        java.lang.String str7 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder8 = builder2.setLocale(locale4);
        java.lang.String str9 = locale4.getVariant();
        java.lang.String str10 = locale4.toLanguageTag();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italienisch" + "'", str7, "Italienisch");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "it" + "'", str10, "it");
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3149");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(12.2d, 10.0d);
        gammaDistribution15.setBeta(0.6321205588285574d);
        double double18 = gammaDistribution15.getAlpha();
        double double19 = gammaDistribution15.getAlpha();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 12.2d + "'", double18 == 12.2d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 12.2d + "'", double19 == 12.2d);
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh_CN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=zh_cn");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3151");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution14 = distributionFactory0.createWeibullDistribution(35.0d, 0.24999999999999964d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution17 = distributionFactory0.createCauchyDistribution(35.0d, 12.2d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory0.createNormalDistribution((double) (short) -1, 100.0d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution23 = distributionFactory0.createGammaDistribution(0.632120548780791d, 1.6653345369377348E-15d);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution25 = distributionFactory0.createPoissonDistribution(2.147483646E9d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(weibullDistribution14);
        org.junit.Assert.assertNotNull(cauchyDistribution17);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(gammaDistribution23);
        org.junit.Assert.assertNotNull(poissonDistribution25);
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3152");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray0, (int) (byte) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        tDistribution22.setDegreesOfFreedom((double) (short) 10);
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory26 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution29 = distributionFactory26.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution32 = distributionFactory26.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution35 = distributionFactory26.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory26.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        tTestImpl15.setDistribution(tDistribution37);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl15.tTest(0.9425673807323827d, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertNotNull(distributionFactory26);
        org.junit.Assert.assertNotNull(weibullDistribution29);
        org.junit.Assert.assertNotNull(fDistribution32);
        org.junit.Assert.assertNotNull(normalDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 1, mathException31, (byte) 0, localeList39, 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("de", objArray41);
        java.io.PrintStream printStream44 = printStream22.printf(locale25, "hi!", objArray41);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) '#');
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        printStream44.print((java.lang.Object) doubleArray46);
        double[] doubleArray54 = new double[] { '#' };
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray46, doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sum(doubleArray46);
        java.io.PrintStream printStream59 = new java.io.PrintStream("French (France)");
        printStream59.println((float) (short) -1);
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale[] localeArray73 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList74);
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 1, mathException68, (byte) 0, localeList76, 1225.0d };
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("de", objArray78);
        java.io.PrintStream printStream81 = printStream59.printf(locale62, "hi!", objArray78);
        double[] doubleArray83 = new double[] { '#' };
        double double84 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray83);
        double double85 = org.apache.commons.math.stat.StatUtils.variance(doubleArray83);
        double double87 = org.apache.commons.math.stat.StatUtils.variance(doubleArray83, (double) '#');
        double double88 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray83);
        printStream81.print((java.lang.Object) doubleArray83);
        double[] doubleArray91 = new double[] { '#' };
        double double92 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray91);
        double double93 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray83, doubleArray91);
        double double94 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray46, doubleArray91);
        double double95 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray91);
        double double96 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = org.apache.commons.math.stat.StatUtils.mean(doubleArray91, (int) 'a', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[35.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1225.0d + "'", double84 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1225.0d + "'", double88 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[35.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1225.0d + "'", double92 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1225.0d + "'", double95 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3155");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        byte[] byteArray2 = new byte[] {};
        printStream1.write(byteArray2);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.print((long) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        byte[] byteArray10 = new byte[] {};
        printStream9.write(byteArray10);
        printStream5.write(byteArray10);
        printStream1.write(byteArray10);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        printStream15.println(' ');
        printStream15.print(false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getDisplayVariant();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale23.getDisplayLanguage(locale26);
        boolean boolean29 = locale23.hasExtensions();
        java.lang.Object[] objArray31 = null;
        java.io.PrintWriter printWriter32 = printWriter22.printf(locale23, "German", objArray31);
        java.util.Locale locale33 = null;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Locale[] localeArray44 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList45 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList45, localeArray44);
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.util.Locale>) localeList45);
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 1, mathException39, (byte) 0, localeList47, 1225.0d };
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("de", objArray49);
        java.io.PrintWriter printWriter52 = printWriter22.printf(locale33, "zh-CN", objArray49);
        printWriter22.write((int) '#');
        printWriter22.print('x');
        printStream1.print((java.lang.Object) 'x');
        java.io.PrintStream printStream61 = new java.io.PrintStream("French (France)");
        printStream61.println((float) (short) -1);
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Locale[] localeArray75 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList76);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 1, mathException70, (byte) 0, localeList78, 1225.0d };
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", objArray80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("de", objArray80);
        java.io.PrintStream printStream83 = printStream61.printf(locale64, "hi!", objArray80);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("und", objArray80);
        java.io.PrintStream printStream85 = printStream1.format("zh", objArray80);
        printStream1.print((float) 100);
        printStream1.print((float) 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Deutsch" + "'", str28, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream83);
        org.junit.Assert.assertNotNull(printStream85);
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setRegion("de");
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale9.getDisplayCountry(locale11);
        java.lang.String str15 = locale6.getDisplayName(locale11);
        java.util.Locale.Builder builder16 = builder5.setLocale(locale11);
        java.util.Locale.Builder builder17 = builder16.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.setLanguageTag("FR_FR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: FR_FR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "German" + "'", str10, "German");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FRA" + "'", str12, "FRA");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "allemand" + "'", str15, "allemand");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 0, 0);
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, 1, 0);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double26 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9, 0, 2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3158");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        printStream12.println((float) (short) -1);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale[] localeArray26 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList27);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 1, mathException21, (byte) 0, localeList29, 1225.0d };
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("de", objArray31);
        java.io.PrintStream printStream34 = printStream12.printf(locale15, "hi!", objArray31);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 1, (byte) 0, (byte) 10, (byte) -1 };
        printStream34.write(byteArray40);
        java.io.PrintStream printStream43 = new java.io.PrintStream("French (France)");
        printStream43.println((float) (short) -1);
        java.io.PrintStream printStream46 = new java.io.PrintStream((java.io.OutputStream) printStream43);
        java.io.PrintStream printStream48 = new java.io.PrintStream("French (France)");
        printStream48.println((float) (short) -1);
        printStream48.println(' ');
        printStream48.print(false);
        printStream48.println((float) '#');
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.OutputStream) printStream48, true);
        java.io.PrintStream printStream60 = new java.io.PrintStream("French (France)");
        printStream60.println((float) (short) -1);
        java.io.PrintStream printStream63 = new java.io.PrintStream((java.io.OutputStream) printStream60);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter((java.io.OutputStream) printStream60);
        java.lang.Object obj65 = null;
        printWriter64.println(obj65);
        printWriter64.write((int) (short) 1);
        java.io.PrintStream printStream70 = new java.io.PrintStream("French (France)");
        printStream70.println((float) (short) -1);
        java.io.PrintStream printStream73 = new java.io.PrintStream((java.io.OutputStream) printStream70);
        java.io.PrintWriter printWriter74 = new java.io.PrintWriter((java.io.OutputStream) printStream70);
        char[] charArray76 = new char[] { ' ' };
        printWriter74.write(charArray76);
        java.io.PrintStream printStream79 = new java.io.PrintStream("French (France)");
        printStream79.println((float) (short) -1);
        java.io.PrintStream printStream82 = new java.io.PrintStream((java.io.OutputStream) printStream79);
        java.io.PrintWriter printWriter83 = new java.io.PrintWriter((java.io.OutputStream) printStream79);
        char[] charArray85 = new char[] { ' ' };
        printWriter83.write(charArray85);
        printWriter74.println(charArray85);
        printWriter64.write(charArray85, (int) (byte) 0, 1);
        printWriter58.print(charArray85);
        printStream43.println(charArray85);
        printStream34.println(charArray85);
        printWriter10.print(charArray85);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 1, 0, 10, -1]");
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[ ]");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[ ]");
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder11 = builder6.setExtension('x', "FRA");
        java.util.Locale.Builder builder14 = builder6.setExtension('x', "german");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setLanguage("French (France)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: French (France) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution29 = distributionFactory23.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution31 = distributionFactory23.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution33 = distributionFactory23.createChiSquareDistribution(0.6321205588285574d);
        org.apache.commons.math.distribution.TDistribution tDistribution35 = distributionFactory23.createTDistribution(0.5199388058383725d);
        tTestImpl1.setDistribution(tDistribution35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl1.tTest((double) (byte) -1, statisticalSummary38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(exponentialDistribution29);
        org.junit.Assert.assertNotNull(poissonDistribution31);
        org.junit.Assert.assertNotNull(chiSquaredDistribution33);
        org.junit.Assert.assertNotNull(tDistribution35);
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3161");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en");
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("de", objArray23);
        java.io.PrintStream printStream26 = printStream4.printf(locale7, "hi!", objArray23);
        java.io.PrintStream printStream27 = printStream1.printf("FR", objArray23);
        printStream1.println('4');
        java.io.PrintStream printStream31 = printStream1.append('#');
        java.io.PrintStream printStream33 = new java.io.PrintStream("French (France)");
        printStream33.println((float) (short) -1);
        java.io.PrintStream printStream37 = new java.io.PrintStream("French (France)");
        printStream37.println((float) (short) -1);
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream37);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream37);
        java.lang.Object obj42 = null;
        printWriter41.println(obj42);
        printWriter41.write((int) (short) 1);
        java.io.PrintStream printStream47 = new java.io.PrintStream("French (France)");
        printStream47.println((float) (short) -1);
        java.io.PrintStream printStream50 = new java.io.PrintStream((java.io.OutputStream) printStream47);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream47);
        char[] charArray53 = new char[] { ' ' };
        printWriter51.write(charArray53);
        java.io.PrintStream printStream56 = new java.io.PrintStream("French (France)");
        printStream56.println((float) (short) -1);
        java.io.PrintStream printStream59 = new java.io.PrintStream((java.io.OutputStream) printStream56);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream56);
        char[] charArray62 = new char[] { ' ' };
        printWriter60.write(charArray62);
        printWriter51.println(charArray62);
        printWriter41.write(charArray62, (int) (byte) 0, 1);
        printStream33.print(charArray62);
        java.io.PrintWriter printWriter70 = new java.io.PrintWriter((java.io.OutputStream) printStream33, false);
        java.io.PrintStream printStream72 = printStream33.append('#');
        java.io.PrintStream printStream74 = new java.io.PrintStream("French (France)");
        byte[] byteArray75 = new byte[] {};
        printStream74.write(byteArray75);
        java.io.PrintStream printStream78 = new java.io.PrintStream("French (France)");
        printStream78.print((long) ' ');
        java.io.PrintStream printStream82 = new java.io.PrintStream("French (France)");
        byte[] byteArray83 = new byte[] {};
        printStream82.write(byteArray83);
        printStream78.write(byteArray83);
        printStream74.write(byteArray83);
        printStream33.write(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            printStream31.write(byteArray83, (int) (byte) 0, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[ ]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ ]");
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3162");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale[] localeArray51 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList52);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 1, mathException46, (byte) 0, localeList54, 1225.0d };
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("de", objArray56);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", objArray56, (java.lang.Throwable) mathException60);
        java.lang.Object[] objArray62 = mathException61.getArguments();
        java.io.PrintWriter printWriter63 = printWriter39.printf("ITA", objArray62);
        printWriter39.println((long) (byte) 0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory66 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution69 = distributionFactory66.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution70 = distributionFactory66.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution72 = distributionFactory66.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution75 = distributionFactory66.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution77 = distributionFactory66.createExponentialDistribution((double) 100);
        exponentialDistribution77.setMean(34.99999999999999d);
        printWriter39.println((java.lang.Object) 34.99999999999999d);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(distributionFactory66);
        org.junit.Assert.assertNotNull(weibullDistribution69);
        org.junit.Assert.assertNotNull(normalDistribution70);
        org.junit.Assert.assertNotNull(tDistribution72);
        org.junit.Assert.assertNotNull(weibullDistribution75);
        org.junit.Assert.assertNotNull(exponentialDistribution77);
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3163");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.print((long) 'u');
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale[] localeArray35 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList36);
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 1, mathException30, (byte) 0, localeList38, 1225.0d };
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("de", objArray40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("Chinesisch (China)", objArray40);
        java.io.PrintWriter printWriter44 = printWriter8.format("French", objArray40);
        printWriter44.print((java.lang.Object) "kor");
        printWriter44.println("fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter44);
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        double double7 = fDistribution6.getDenominatorDegreesOfFreedom();
        double double8 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom(0.24999999999999964d);
        double double11 = fDistribution6.getDenominatorDegreesOfFreedom();
        fDistribution6.setNumeratorDegreesOfFreedom((double) '#');
        double double14 = fDistribution6.getNumeratorDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.24999999999999964d + "'", double11 == 0.24999999999999964d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        printWriter5.println(charArray16);
        printWriter5.println((int) (short) 0);
        printWriter5.println(61.0d);
        java.util.Locale locale26 = new java.util.Locale("allemand", "allemand", "");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.util.Locale locale28 = locale26.stripExtensions();
        printWriter5.print((java.lang.Object) locale28);
        java.io.PrintStream printStream31 = new java.io.PrintStream("French (France)");
        printStream31.println((float) (short) -1);
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream31);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream31);
        java.lang.Object obj36 = null;
        printWriter35.println(obj36);
        printWriter35.close();
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.println((float) (short) -1);
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream40);
        printStream40.print(0L);
        printStream40.println();
        java.util.Locale locale47 = java.util.Locale.getDefault();
        printStream40.println((java.lang.Object) locale47);
        java.lang.String str49 = locale47.getVariant();
        java.io.PrintStream printStream53 = new java.io.PrintStream("en");
        java.io.PrintStream printStream56 = new java.io.PrintStream("French (France)");
        printStream56.println((float) (short) -1);
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.util.Locale[] localeArray70 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.util.Locale>) localeList71);
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 1, mathException65, (byte) 0, localeList73, 1225.0d };
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("hi!", objArray75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("de", objArray75);
        java.io.PrintStream printStream78 = printStream56.printf(locale59, "hi!", objArray75);
        java.io.PrintStream printStream79 = printStream53.printf("FR", objArray75);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("zho", objArray75);
        java.io.PrintWriter printWriter81 = printWriter35.printf(locale47, "FR", objArray75);
        printWriter5.println((java.lang.Object) "FR");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertEquals(locale26.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printWriter81);
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3166");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter18.print((long) (byte) 10);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution29 = distributionFactory23.createTDistribution((double) 1L);
        double double30 = tDistribution29.getDegreesOfFreedom();
        tTestImpl22.setDistribution(tDistribution29);
        org.apache.commons.math.distribution.TDistribution tDistribution32 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl33 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution32);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory34 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution37 = distributionFactory34.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution38 = distributionFactory34.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution40 = distributionFactory34.createTDistribution((double) 1L);
        double double41 = tDistribution40.getDegreesOfFreedom();
        tTestImpl33.setDistribution(tDistribution40);
        tTestImpl22.setDistribution(tDistribution40);
        printWriter18.print((java.lang.Object) tTestImpl22);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) '#');
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double53 = org.apache.commons.math.stat.StatUtils.mean(doubleArray46);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double[] doubleArray56 = new double[] { '#' };
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray56);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray56);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray56, (double) '#');
        double double61 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray56);
        double double62 = org.apache.commons.math.stat.StatUtils.sum(doubleArray56);
        double double64 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray56, (double) 1.0f);
        double double65 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56);
        double double66 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray46, doubleArray56);
        double[] doubleArray68 = new double[] { '#' };
        double double69 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray68, 0, 0);
        double[] doubleArray75 = new double[] { '#' };
        double double76 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray75);
        double double77 = org.apache.commons.math.stat.StatUtils.variance(doubleArray75);
        double double79 = org.apache.commons.math.stat.StatUtils.variance(doubleArray75, (double) '#');
        double double80 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray75);
        double double81 = org.apache.commons.math.stat.StatUtils.variance(doubleArray75);
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double double83 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray68, doubleArray75);
        double double85 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68, 1.6653345369377348E-15d);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = tTestImpl22.pairedTTest(doubleArray56, doubleArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(tDistribution29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory34);
        org.junit.Assert.assertNotNull(weibullDistribution37);
        org.junit.Assert.assertNotNull(normalDistribution38);
        org.junit.Assert.assertNotNull(tDistribution40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1225.0d + "'", double57 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1225.0d + "'", double61 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 35.0d + "'", double62 == 35.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 3.5553480614894135d + "'", double65 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1225.0d + "'", double69 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1225.0d + "'", double76 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1225.0d + "'", double80 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3.5553480614894135d + "'", double82 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl20 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        tTestImpl12.setDistribution(tDistribution19);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, (double) '#');
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double30 = org.apache.commons.math.stat.StatUtils.mean(doubleArray23);
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, (double) '#');
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33);
        double double41 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray33, (double) 1.0f);
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double43 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray23, doubleArray33);
        double[] doubleArray45 = new double[] { '#' };
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45, (double) '#');
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double51 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray45);
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray45);
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = tTestImpl12.tTest(doubleArray23, doubleArray45, (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 35.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 3.5553480614894135d + "'", double42 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 34.99999999999999d + "'", double51 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3168");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        gammaDistribution9.setAlpha((double) 1L);
        gammaDistribution9.setAlpha(35.0d);
        gammaDistribution9.setAlpha((double) 1);
        gammaDistribution9.setAlpha(515.6999999999999d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3169");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.println("zh");
        printStream4.print("hi!");
        printStream4.println((double) (byte) 10);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale[] localeArray8 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.List<java.util.Locale> localeList11 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale locale12 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Collection<java.lang.String> strCollection13 = null;
        java.lang.String str14 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection13);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleKeys();
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Collection<java.util.Locale> localeCollection18 = null;
        java.util.Locale locale19 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection18);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeList11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(locale19);
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double double24 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray16, (double) (short) 100);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double31 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray16, doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.sum(doubleArray26);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray34, 0, 0);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double double46 = org.apache.commons.math.stat.StatUtils.product(doubleArray41);
        double double47 = org.apache.commons.math.stat.StatUtils.sum(doubleArray41);
        double double49 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray41, (double) (short) 100);
        double double50 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray34, doubleArray41);
        double double52 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray34, 0.24999999999999964d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = tTestImpl14.homoscedasticTTest(doubleArray26, doubleArray34, (-175.50000024991118d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -175.50000024991118");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.5553480614894135d + "'", double30 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 34.99999999999999d + "'", double44 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.5553480614894135d + "'", double45 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3172");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.print((long) ' ');
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        byte[] byteArray13 = new byte[] {};
        printStream12.write(byteArray13);
        printStream8.write(byteArray13);
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        printStream18.println(' ');
        printStream18.print(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = locale26.getDisplayLanguage(locale29);
        boolean boolean32 = locale26.hasExtensions();
        java.lang.Object[] objArray34 = null;
        java.io.PrintWriter printWriter35 = printWriter25.printf(locale26, "German", objArray34);
        java.util.Locale locale36 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter25.printf(locale36, "zh-CN", objArray52);
        java.io.PrintStream printStream56 = printStream8.format("Chinese (Taiwan)", objArray52);
        java.io.PrintWriter printWriter57 = printWriter5.printf("Franz\366sisch (Frankreich)", objArray52);
        printWriter5.println((int) (byte) 100);
        java.io.PrintStream printStream61 = new java.io.PrintStream("French (France)");
        printStream61.println((float) (short) -1);
        printStream61.println(' ');
        printStream61.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream69 = new java.io.PrintStream("French (France)");
        printStream69.println((float) (short) -1);
        java.io.PrintStream printStream72 = new java.io.PrintStream((java.io.OutputStream) printStream69);
        printStream69.print((long) (short) 0);
        java.io.PrintStream printStream76 = new java.io.PrintStream("French (France)");
        printStream76.println((float) (short) -1);
        java.io.PrintStream printStream79 = new java.io.PrintStream((java.io.OutputStream) printStream76);
        java.io.PrintWriter printWriter80 = new java.io.PrintWriter((java.io.OutputStream) printStream76);
        char[] charArray82 = new char[] { ' ' };
        printWriter80.write(charArray82);
        printStream69.print(charArray82);
        printStream61.println(charArray82);
        printWriter5.println(charArray82);
        java.io.PrintWriter printWriter88 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        printWriter5.println(true);
        printWriter5.println("");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Deutsch" + "'", str31, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[ ]");
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3173");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale4.getDisplayScript(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale4.getDisplayScript(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale.Builder builder13 = builder11.setRegion("fr");
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder16 = builder14.addUnicodeLocaleAttribute("JPN");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3174");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double29 = tTestImpl26.t(statisticalSummary27, statisticalSummary28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3175");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1225.0d);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.max(doubleArray13);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19, (double) '#');
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray13, doubleArray19);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double27 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray19);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29);
        double double32 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double34 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double double35 = org.apache.commons.math.stat.StatUtils.sum(doubleArray29);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray29);
        double double37 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39, (double) '#');
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double45 = org.apache.commons.math.stat.StatUtils.sum(doubleArray39);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39, (double) (short) 100);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double49 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray29, doubleArray39);
        double double50 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray19, doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = org.apache.commons.math.stat.StatUtils.min(doubleArray19, 35, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 34.99999999999999d + "'", double32 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 3.5553480614894135d + "'", double33 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.5553480614894135d + "'", double48 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 1, mathException31, (byte) 0, localeList39, 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("de", objArray41);
        java.io.PrintStream printStream44 = printStream22.printf(locale25, "hi!", objArray41);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) '#');
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        printStream44.print((java.lang.Object) doubleArray46);
        double[] doubleArray54 = new double[] { '#' };
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray46, doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sum(doubleArray46);
        java.io.PrintStream printStream59 = new java.io.PrintStream("French (France)");
        printStream59.println((float) (short) -1);
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale[] localeArray73 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList74);
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 1, mathException68, (byte) 0, localeList76, 1225.0d };
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("de", objArray78);
        java.io.PrintStream printStream81 = printStream59.printf(locale62, "hi!", objArray78);
        double[] doubleArray83 = new double[] { '#' };
        double double84 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray83);
        double double85 = org.apache.commons.math.stat.StatUtils.variance(doubleArray83);
        double double87 = org.apache.commons.math.stat.StatUtils.variance(doubleArray83, (double) '#');
        double double88 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray83);
        printStream81.print((java.lang.Object) doubleArray83);
        double[] doubleArray91 = new double[] { '#' };
        double double92 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray91);
        double double93 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray83, doubleArray91);
        double double94 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray46, doubleArray91);
        double double95 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray91);
        double double96 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 120, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[35.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1225.0d + "'", double84 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1225.0d + "'", double88 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[35.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1225.0d + "'", double92 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1225.0d + "'", double95 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3177");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: de");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("\ud504\ub791\uc2a4");
        mathException2.addSuppressed((java.lang.Throwable) mathException4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("CA", (java.lang.Throwable) mathException2);
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3178");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (byte) -1);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) (short) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3179");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        java.io.PrintStream printStream50 = new java.io.PrintStream("zho");
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream57 = printStream50.printf("Italienisch", (java.lang.Object[]) strArray54);
        java.io.PrintWriter printWriter58 = printWriter47.printf("ITA", (java.lang.Object[]) strArray54);
        boolean boolean59 = printWriter58.checkError();
        printWriter58.println();
        printWriter58.write("FR");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray11 = new double[] { 'u', (short) 100 };
        double double12 = tTestImpl7.tTest(10.0d, doubleArray11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        org.apache.commons.math.distribution.TDistribution tDistribution26 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution26);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory28 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution31 = distributionFactory28.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory28.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory28.createTDistribution((double) 1L);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl27.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        tTestImpl25.setDistribution(tDistribution34);
        tTestImpl7.setDistribution(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double46 = tTestImpl7.tTest(statisticalSummary44, statisticalSummary45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[117.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.054800971425164935d + "'", double12 == 0.054800971425164935d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(distributionFactory28);
        org.junit.Assert.assertNotNull(weibullDistribution31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3181");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 100L);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.US;
        java.util.Locale.setDefault(category14, locale15);
        java.io.PrintStream printStream19 = new java.io.PrintStream("French (France)");
        printStream19.println((float) (short) -1);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream19);
        printStream22.println("zh");
        printStream22.print("hi!");
        printStream22.close();
        java.util.Locale locale28 = null;
        java.lang.String[] strArray30 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream31 = printStream22.format(locale28, "France", (java.lang.Object[]) strArray30);
        java.io.PrintStream printStream32 = printStream1.printf(locale15, "Italian", (java.lang.Object[]) strArray30);
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream32, false);
        java.io.PrintStream printStream36 = new java.io.PrintStream("zh-CN");
        printStream36.print('a');
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.print((long) ' ');
        java.io.PrintStream printStream44 = new java.io.PrintStream("French (France)");
        byte[] byteArray45 = new byte[] {};
        printStream44.write(byteArray45);
        printStream40.write(byteArray45);
        printStream36.write(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            printStream32.write(byteArray45, 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3182");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (short) 100);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 2147483647);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) (short) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        java.lang.String[] strArray3 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray3);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale[] localeArray19 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList20);
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 1, mathException14, (byte) 0, localeList22, 1225.0d };
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("de", objArray24);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", objArray24, (java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("und", objArray24, (java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("\uc601\uc5b4", (java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray3, (java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale[] localeArray46 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList47);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 1, mathException41, (byte) 0, localeList49, 1225.0d };
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("");
        mathException52.addSuppressed((java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException54);
        java.lang.String[] strArray59 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("allemand", (java.lang.Object[]) strArray59);
        mathException56.addSuppressed((java.lang.Throwable) mathException61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException61);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.util.Locale[] localeArray74 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList75 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList75, localeArray74);
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, (java.util.Collection<java.util.Locale>) localeList75);
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 1, mathException69, (byte) 0, localeList77, 1225.0d };
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", objArray79);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("");
        mathException80.addSuppressed((java.lang.Throwable) mathException82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException82);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("FRA", (java.lang.Throwable) mathException82);
        mathException61.addSuppressed((java.lang.Throwable) mathException85);
        mathException33.addSuppressed((java.lang.Throwable) mathException61);
        java.lang.Object[] objArray88 = mathException61.getArguments();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = tTestImpl27.tTest(statisticalSummary28, statisticalSummary29, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3185");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en");
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("de", objArray23);
        java.io.PrintStream printStream26 = printStream4.printf(locale7, "hi!", objArray23);
        java.io.PrintStream printStream27 = printStream1.printf("FR", objArray23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("", objArray43, (java.lang.Throwable) mathException47);
        java.lang.Object[] objArray49 = mathException48.getArguments();
        printStream1.println((java.lang.Object) objArray49);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.lang.Object obj10 = null;
        printWriter9.println(obj10);
        printWriter9.write((int) (short) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        char[] charArray21 = new char[] { ' ' };
        printWriter19.write(charArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printWriter19.println(charArray30);
        printWriter9.write(charArray30, (int) (byte) 0, 1);
        printStream1.print(charArray30);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter38.println(false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("fran\347ais", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=franc?ais");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3188");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31, (double) '#');
        double double36 = org.apache.commons.math.stat.StatUtils.min(doubleArray31);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31, (double) 1);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40);
        double double43 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double double45 = org.apache.commons.math.stat.StatUtils.sum(doubleArray40);
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double[] doubleArray48 = new double[] { '#' };
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double53 = org.apache.commons.math.stat.StatUtils.sum(doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        java.io.PrintStream printStream56 = new java.io.PrintStream("French (France)");
        printStream56.println((float) (short) -1);
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.util.Locale[] localeArray70 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.util.Locale>) localeList71);
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 1, mathException65, (byte) 0, localeList73, 1225.0d };
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("hi!", objArray75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("de", objArray75);
        java.io.PrintStream printStream78 = printStream56.printf(locale59, "hi!", objArray75);
        double[] doubleArray80 = new double[] { '#' };
        double double81 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray80);
        double double82 = org.apache.commons.math.stat.StatUtils.variance(doubleArray80);
        double double84 = org.apache.commons.math.stat.StatUtils.variance(doubleArray80, (double) '#');
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray80);
        printStream78.print((java.lang.Object) doubleArray80);
        double[] doubleArray88 = new double[] { '#' };
        double double89 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray88);
        double double90 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray80, doubleArray88);
        double double91 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray48, doubleArray88);
        double double92 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray40, doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = tTestImpl12.t(doubleArray31, doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 34.99999999999999d + "'", double43 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 3.5553480614894135d + "'", double44 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.5553480614894135d + "'", double46 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 34.99999999999999d + "'", double51 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.5553480614894135d + "'", double52 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[35.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1225.0d + "'", double81 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1225.0d + "'", double85 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[35.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1225.0d + "'", double89 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution7 = distributionFactory0.createTDistribution((double) (byte) 1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl8 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = tTestImpl8.tTest(statisticalSummary9, statisticalSummary10, 3.941866060050112E-159d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(tDistribution7);
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.println("zh");
        printStream4.print("hi!");
        printStream4.print(true);
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("France");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.io.PrintStream printStream6 = new java.io.PrintStream("French (France)");
        printStream6.println((float) (short) -1);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream6);
        printStream6.print((long) (short) 0);
        java.io.PrintStream printStream13 = new java.io.PrintStream("French (France)");
        printStream13.println((float) (short) -1);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream13);
        char[] charArray19 = new char[] { ' ' };
        printWriter17.write(charArray19);
        printStream6.print(charArray19);
        printStream6.println("Chinese (Taiwan)");
        printStream6.write((int) '4');
        java.io.PrintStream printStream26 = new java.io.PrintStream((java.io.OutputStream) printStream6);
        java.io.PrintStream printStream28 = new java.io.PrintStream("French (France)");
        printStream28.print((long) '#');
        printStream28.print("JPN");
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream28);
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        printStream35.println(' ');
        printStream35.print(false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        boolean boolean44 = locale43.hasExtensions();
        java.lang.String str45 = locale43.getDisplayVariant();
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale43.getDisplayLanguage(locale46);
        boolean boolean49 = locale43.hasExtensions();
        java.lang.Object[] objArray51 = null;
        java.io.PrintWriter printWriter52 = printWriter42.printf(locale43, "German", objArray51);
        java.io.PrintStream printStream54 = new java.io.PrintStream("French (France)");
        printStream54.println((float) (short) -1);
        java.io.PrintStream printStream57 = new java.io.PrintStream((java.io.OutputStream) printStream54);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.OutputStream) printStream54);
        char[] charArray60 = new char[] { ' ' };
        printWriter58.write(charArray60);
        java.io.PrintStream printStream63 = new java.io.PrintStream("French (France)");
        printStream63.println((float) (short) -1);
        java.io.PrintStream printStream66 = new java.io.PrintStream((java.io.OutputStream) printStream63);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream63);
        char[] charArray69 = new char[] { ' ' };
        printWriter67.write(charArray69);
        printWriter58.println(charArray69);
        printWriter58.println((int) (short) 0);
        char[] charArray75 = new char[] { '4' };
        printWriter58.println(charArray75);
        printWriter52.print(charArray75);
        printWriter33.println(charArray75);
        printStream6.print(charArray75);
        boolean boolean80 = languageRange1.equals((java.lang.Object) charArray75);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ ]");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Deutsch" + "'", str48, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ ]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ ]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[4]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3192");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        org.apache.commons.math.distribution.TDistribution tDistribution12 = distributionFactory0.createTDistribution(100.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution14 = distributionFactory0.createChiSquareDistribution((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertNotNull(tDistribution12);
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory30 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution33 = distributionFactory30.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution36 = distributionFactory30.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory30.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory30.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tDistribution41.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl45 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl46 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tTestImpl12.setDistribution(tDistribution41);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray49);
        double double55 = org.apache.commons.math.stat.StatUtils.sum(doubleArray49);
        double double56 = org.apache.commons.math.stat.StatUtils.product(doubleArray49);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double62 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58, (double) '#');
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double64 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray49, doubleArray58);
        double double65 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double67 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58, (double) '#');
        double[] doubleArray69 = new double[] { '#' };
        double double70 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray69);
        double double71 = org.apache.commons.math.stat.StatUtils.variance(doubleArray69);
        double double72 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray69);
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray69);
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray69);
        double double75 = org.apache.commons.math.stat.StatUtils.sum(doubleArray69);
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = tTestImpl12.t(doubleArray58, doubleArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory30);
        org.junit.Assert.assertNotNull(weibullDistribution33);
        org.junit.Assert.assertNotNull(fDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 34.99999999999999d + "'", double52 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.5553480614894135d + "'", double53 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1225.0d + "'", double63 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1225.0d + "'", double70 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 34.99999999999999d + "'", double72 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 3.5553480614894135d + "'", double73 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 3.5553480614894135d + "'", double74 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 35.0d + "'", double75 == 35.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 3.5553480614894135d + "'", double76 == 3.5553480614894135d);
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3194");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        printStream1.println((java.lang.Object) locale8);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray11, 0, 0);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.sum(doubleArray18);
        double double26 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray18, (double) (short) 100);
        double double27 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray11, doubleArray18);
        double double29 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray11, 0.24999999999999964d);
        double double30 = org.apache.commons.math.stat.StatUtils.mean(doubleArray11);
        printStream1.print((java.lang.Object) double30);
        printStream1.println("ZHO");
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 34.99999999999999d + "'", double21 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3195");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("KOR");
        java.util.Locale.Builder builder13 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder13.setUnicodeLocaleKeyword("ZH", "\u7fa9\u5927\u5229\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: ???? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3196");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getLanguage();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale0.getISO3Language();
        java.lang.String str5 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "German" + "'", str1, "German");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3197");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize(0);
        hypergeometricDistribution10.setPopulationSize(2147483646);
        double double17 = hypergeometricDistribution10.cumulativeProbability(0);
        hypergeometricDistribution10.setPopulationSize(1);
        hypergeometricDistribution10.setNumberOfSuccesses(97);
        hypergeometricDistribution10.setSampleSize((int) (short) 1);
        hypergeometricDistribution10.setSampleSize(0);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3198");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setNumeratorDegreesOfFreedom((double) (short) 10);
        double double9 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom((double) 17);
        fDistribution6.setDenominatorDegreesOfFreedom((double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = fDistribution6.inverseCumulativeProbability(120.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3199");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.DistributionFactory distributionFactory1 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution4 = distributionFactory1.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution7 = distributionFactory1.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution10 = distributionFactory1.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution12 = distributionFactory1.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution12);
        org.apache.commons.math.distribution.TDistribution tDistribution14 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution14);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double23 = tDistribution22.getDegreesOfFreedom();
        tTestImpl15.setDistribution(tDistribution22);
        tDistribution22.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl29 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        tTestImpl13.setDistribution(tDistribution22);
        tTestImpl0.setDistribution(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = tTestImpl0.tTest(statisticalSummary32, statisticalSummary33, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory1);
        org.junit.Assert.assertNotNull(weibullDistribution4);
        org.junit.Assert.assertNotNull(fDistribution7);
        org.junit.Assert.assertNotNull(normalDistribution10);
        org.junit.Assert.assertNotNull(tDistribution12);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3200");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution12 = distributionFactory0.createGammaDistribution(10.0d, 8.999999999999998d);
        double double13 = gammaDistribution12.getBeta();
        double double14 = gammaDistribution12.getBeta();
        double double15 = gammaDistribution12.getAlpha();
        double double16 = gammaDistribution12.getAlpha();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(gammaDistribution12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 8.999999999999998d + "'", double13 == 8.999999999999998d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 8.999999999999998d + "'", double14 == 8.999999999999998d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3201");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) ' ');
        double double10 = poissonDistribution8.probability(0.36787944117144233d);
        poissonDistribution8.setMean((double) (byte) 10);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3202");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        java.io.PrintStream printStream38 = new java.io.PrintStream("French (France)");
        printStream38.println((float) (short) -1);
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale[] localeArray52 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList53);
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 1, mathException47, (byte) 0, localeList55, 1225.0d };
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("de", objArray57);
        java.io.PrintStream printStream60 = printStream38.printf(locale41, "hi!", objArray57);
        double[] doubleArray62 = new double[] { '#' };
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62);
        double double64 = org.apache.commons.math.stat.StatUtils.variance(doubleArray62);
        double double66 = org.apache.commons.math.stat.StatUtils.variance(doubleArray62, (double) '#');
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62);
        printStream60.print((java.lang.Object) doubleArray62);
        double[] doubleArray70 = new double[] { '#' };
        double double71 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double72 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray62, doubleArray70);
        double double73 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray70);
        double double75 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray25, 12.2d);
        double double79 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray25, (int) (byte) 1, (int) (short) 0, (double) ' ');
        double double83 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 272373.4204903813d, (int) (byte) 1, 0);
        double[] doubleArray85 = new double[] { '#' };
        double double86 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray85);
        double double87 = org.apache.commons.math.stat.StatUtils.variance(doubleArray85);
        double double88 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray85);
        double double89 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray85);
        double double90 = org.apache.commons.math.stat.StatUtils.sum(doubleArray85);
        double double91 = org.apache.commons.math.stat.StatUtils.max(doubleArray85);
        double double92 = org.apache.commons.math.stat.StatUtils.min(doubleArray85);
        double double93 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray85);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1225.0d + "'", double63 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1225.0d + "'", double67 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1225.0d + "'", double71 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 35.0d + "'", double75 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[35.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1225.0d + "'", double86 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 34.99999999999999d + "'", double88 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 3.5553480614894135d + "'", double89 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 35.0d + "'", double90 == 35.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 35.0d + "'", double91 == 35.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 35.0d + "'", double92 == 35.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale5.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4" + "'", str3, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3204");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setLanguage("German");
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale15.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder19 = builder13.setLocale(locale15);
        java.util.Locale.Builder builder20 = builder10.setLocale(locale15);
        java.util.Locale locale21 = builder20.build();
        java.util.Locale.Builder builder23 = builder20.setLanguage("zho");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder20.setUnicodeLocaleKeyword("\uc601\uc5b4", "org.apache.commons.math.MathException: German");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italienisch" + "'", str18, "Italienisch");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3205");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double double29 = tDistribution24.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution24);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33);
        double double40 = org.apache.commons.math.stat.StatUtils.product(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = tTestImpl12.t((double) (short) -1, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.5553480614894135d + "'", double37 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3206");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double10 = poissonDistribution8.normalApproximateProbability((int) (short) 0);
        poissonDistribution8.setMean(117.0d);
        poissonDistribution8.setMean(1225.0d);
        double double16 = poissonDistribution8.cumulativeProbability(10);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.308537538725987d + "'", double10 == 0.308537538725987d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3207");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 1.0f);
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 3.5553480614894135d + "'", double10 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.5553480614894135d + "'", double11 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.5553480614894135d + "'", double12 == 3.5553480614894135d);
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3208");
        java.util.Locale locale1 = new java.util.Locale("org.apache.commons.math.MathException: de");
        java.lang.String str2 = locale1.getISO3Country();
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        printStream4.println(' ');
        printStream4.print(false);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        java.io.PrintWriter printWriter13 = printWriter11.append(' ');
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String str16 = locale14.getDisplayVariant();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getDisplayName();
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = locale19.getISO3Country();
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleKeys();
        java.lang.String str22 = locale17.getDisplayCountry(locale19);
        java.lang.String str23 = locale14.getDisplayName(locale19);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale[] localeArray34 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList35);
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 1, mathException29, (byte) 0, localeList37, 1225.0d };
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("de", objArray39);
        java.io.PrintWriter printWriter42 = printWriter13.printf(locale14, "zho", objArray39);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale45 = java.util.Locale.PRC;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.lang.String[] strArray48 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter49 = printWriter42.format(locale44, "de", (java.lang.Object[]) strArray48);
        java.lang.String str50 = locale1.getDisplayName(locale44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = locale1.getUnicodeLocaleType("allemand-x-lvariant-ko-KR");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: allemand-x-lvariant-ko-KR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "org.apache.commons.math.mathexception: de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str18, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "FRA" + "'", str20, "FRA");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "allemand" + "'", str23, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org.apache.commons.math.mathexception: de" + "'", str50, "org.apache.commons.math.mathexception: de");
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3209");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray8);
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double13 = org.apache.commons.math.stat.StatUtils.sum(doubleArray8);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double15 = org.apache.commons.math.stat.StatUtils.min(doubleArray8);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.sum(doubleArray18);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, 1, 0);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray18, doubleArray26);
        double double33 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray8, doubleArray26);
        double double35 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray8, (double) 10);
        double double36 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray8);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 34.99999999999999d + "'", double11 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.5553480614894135d + "'", double12 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 34.99999999999999d + "'", double21 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3210");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        byte[] byteArray2 = new byte[] {};
        printStream1.write(byteArray2);
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getISO3Language();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale11.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayLanguage();
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        printStream18.println(' ');
        printStream18.print(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        java.io.PrintWriter printWriter27 = printWriter25.append(' ');
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getDisplayVariant();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.lang.String str36 = locale31.getDisplayCountry(locale33);
        java.lang.String str37 = locale28.getDisplayName(locale33);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale[] localeArray48 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList49);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 1, mathException43, (byte) 0, localeList51, 1225.0d };
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("de", objArray53);
        java.io.PrintWriter printWriter56 = printWriter27.printf(locale28, "zho", objArray53);
        java.io.PrintStream printStream57 = printStream10.format(locale13, "fra", objArray53);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale[] localeArray67 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList68);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 1, mathException62, (byte) 0, localeList70, 1225.0d };
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("hi!", objArray72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("de", objArray72);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("French", objArray53, (java.lang.Throwable) mathException74);
        java.io.PrintStream printStream76 = printStream1.printf("CHN", objArray53);
        printStream76.flush();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str15, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str32, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FRA" + "'", str34, "FRA");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "allemand" + "'", str37, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream76);
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3211");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl15.t(statisticalSummary16, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3212");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory27 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution30 = distributionFactory27.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution31 = distributionFactory27.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution33 = distributionFactory27.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution35 = distributionFactory27.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory27.createTDistribution((double) (byte) 1);
        tTestImpl12.setDistribution(tDistribution37);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40);
        double double43 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double double45 = org.apache.commons.math.stat.StatUtils.sum(doubleArray40);
        double[] doubleArray47 = new double[] { '#' };
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47);
        double double50 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray47);
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double double53 = org.apache.commons.math.stat.StatUtils.sum(doubleArray47);
        double double54 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray47);
        double double55 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray40, doubleArray47);
        double double56 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray47);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray58);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double63 = org.apache.commons.math.stat.StatUtils.product(doubleArray58);
        double double64 = org.apache.commons.math.stat.StatUtils.sum(doubleArray58);
        double double65 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray58);
        double[] doubleArray67 = new double[] { '#' };
        double double68 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double71 = org.apache.commons.math.stat.StatUtils.variance(doubleArray67, 1, 0);
        double double72 = org.apache.commons.math.stat.StatUtils.sum(doubleArray67);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray67);
        double double74 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray58, doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = tTestImpl12.homoscedasticT(doubleArray47, doubleArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory27);
        org.junit.Assert.assertNotNull(weibullDistribution30);
        org.junit.Assert.assertNotNull(normalDistribution31);
        org.junit.Assert.assertNotNull(tDistribution33);
        org.junit.Assert.assertNotNull(chiSquaredDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 34.99999999999999d + "'", double43 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 3.5553480614894135d + "'", double44 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1225.0d + "'", double48 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 34.99999999999999d + "'", double50 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.5553480614894135d + "'", double51 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 34.99999999999999d + "'", double54 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 34.99999999999999d + "'", double56 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 34.99999999999999d + "'", double61 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.5553480614894135d + "'", double62 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 34.99999999999999d + "'", double65 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1225.0d + "'", double68 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 35.0d + "'", double72 == 35.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 35.0d + "'", double73 == 35.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3213");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 1, mathException31, (byte) 0, localeList39, 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("de", objArray41);
        java.io.PrintStream printStream44 = printStream22.printf(locale25, "hi!", objArray41);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) '#');
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        printStream44.print((java.lang.Object) doubleArray46);
        double[] doubleArray54 = new double[] { '#' };
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray46, doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sum(doubleArray46);
        java.io.PrintStream printStream59 = new java.io.PrintStream("French (France)");
        printStream59.println((float) (short) -1);
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale[] localeArray73 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList74);
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 1, mathException68, (byte) 0, localeList76, 1225.0d };
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("de", objArray78);
        java.io.PrintStream printStream81 = printStream59.printf(locale62, "hi!", objArray78);
        double[] doubleArray83 = new double[] { '#' };
        double double84 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray83);
        double double85 = org.apache.commons.math.stat.StatUtils.variance(doubleArray83);
        double double87 = org.apache.commons.math.stat.StatUtils.variance(doubleArray83, (double) '#');
        double double88 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray83);
        printStream81.print((java.lang.Object) doubleArray83);
        double[] doubleArray91 = new double[] { '#' };
        double double92 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray91);
        double double93 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray83, doubleArray91);
        double double94 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray46, doubleArray91);
        double double95 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray91);
        double double96 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, 2147483647, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[35.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1225.0d + "'", double84 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1225.0d + "'", double88 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[35.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1225.0d + "'", double92 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1225.0d + "'", double95 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3214");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.print(true);
        printStream4.print(10);
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        cauchyDistribution6.setScale((double) 1.0f);
        double double10 = cauchyDistribution6.getScale();
        double double11 = cauchyDistribution6.getMedian();
        cauchyDistribution6.setMedian(8.999999999999998d);
        cauchyDistribution6.setMedian(0.3678794411714425d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.close();
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        printStream10.print(0L);
        printStream10.println();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        printStream10.println((java.lang.Object) locale17);
        java.lang.String str19 = locale17.getVariant();
        java.io.PrintStream printStream23 = new java.io.PrintStream("en");
        java.io.PrintStream printStream26 = new java.io.PrintStream("French (France)");
        printStream26.println((float) (short) -1);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 1, mathException35, (byte) 0, localeList43, 1225.0d };
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("de", objArray45);
        java.io.PrintStream printStream48 = printStream26.printf(locale29, "hi!", objArray45);
        java.io.PrintStream printStream49 = printStream23.printf("FR", objArray45);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("zho", objArray45);
        java.io.PrintWriter printWriter51 = printWriter5.printf(locale17, "FR", objArray45);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter51);
        printWriter51.print('x');
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 1, mathException5, (byte) 0, localeList13, 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("de", objArray15);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray15, (java.lang.Throwable) mathException19);
        java.lang.Object[] objArray21 = mathException20.getArguments();
        java.lang.String str22 = mathException20.getPattern();
        java.lang.String str23 = mathException20.toString();
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.MathException: " + "'", str23, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3218");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory0.createTDistribution((double) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution10 = distributionFactory0.createPoissonDistribution(97.0d);
        double double12 = poissonDistribution10.probability(2.147483647E9d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertNotNull(poissonDistribution10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3219");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        java.lang.String[] strArray42 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter44 = printWriter39.format("French", (java.lang.Object[]) strArray42);
        printWriter44.print(100.0d);
        printWriter44.print(true);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printWriter44);
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter18.print((long) (byte) 10);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution29 = distributionFactory23.createTDistribution((double) 1L);
        double double30 = tDistribution29.getDegreesOfFreedom();
        tTestImpl22.setDistribution(tDistribution29);
        org.apache.commons.math.distribution.TDistribution tDistribution32 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl33 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution32);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory34 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution37 = distributionFactory34.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution38 = distributionFactory34.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution40 = distributionFactory34.createTDistribution((double) 1L);
        double double41 = tDistribution40.getDegreesOfFreedom();
        tTestImpl33.setDistribution(tDistribution40);
        tTestImpl22.setDistribution(tDistribution40);
        printWriter18.print((java.lang.Object) tTestImpl22);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) '#');
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double52 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray46);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double56 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray46, (double) ' ');
        double double57 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double double58 = org.apache.commons.math.stat.StatUtils.min(doubleArray46);
        double[] doubleArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double60 = tTestImpl22.pairedT(doubleArray46, doubleArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(tDistribution29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory34);
        org.junit.Assert.assertNotNull(weibullDistribution37);
        org.junit.Assert.assertNotNull(normalDistribution38);
        org.junit.Assert.assertNotNull(tDistribution40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 34.99999999999999d + "'", double52 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.5553480614894135d + "'", double53 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3221");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory27 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution30 = distributionFactory27.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution31 = distributionFactory27.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution33 = distributionFactory27.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution35 = distributionFactory27.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory27.createTDistribution((double) (byte) 1);
        tTestImpl12.setDistribution(tDistribution37);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double41 = tTestImpl12.homoscedasticTTest(statisticalSummary39, statisticalSummary40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory27);
        org.junit.Assert.assertNotNull(weibullDistribution30);
        org.junit.Assert.assertNotNull(normalDistribution31);
        org.junit.Assert.assertNotNull(tDistribution33);
        org.junit.Assert.assertNotNull(chiSquaredDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3222");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setScript("English (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: English (United Kingdom) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl16 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray18);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double29 = org.apache.commons.math.stat.StatUtils.max(doubleArray24, 0, 0);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double36 = org.apache.commons.math.stat.StatUtils.product(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.sum(doubleArray31);
        double double39 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray31, (double) (short) 100);
        double double40 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray24, doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = tTestImpl16.pairedT(doubleArray18, doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3224");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = tTestImpl1.tTest((double) '4', statisticalSummary12, 8.999999999999998d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 8.999999999999998");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3225");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl15.homoscedasticT(statisticalSummary16, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        java.io.PrintStream printStream50 = new java.io.PrintStream("zho");
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream57 = printStream50.printf("Italienisch", (java.lang.Object[]) strArray54);
        java.io.PrintWriter printWriter58 = printWriter47.printf("ITA", (java.lang.Object[]) strArray54);
        boolean boolean59 = printWriter58.checkError();
        printWriter58.println();
        printWriter58.println("german");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str22, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3227");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 100L);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.US;
        java.util.Locale.setDefault(category14, locale15);
        java.io.PrintStream printStream19 = new java.io.PrintStream("French (France)");
        printStream19.println((float) (short) -1);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream19);
        printStream22.println("zh");
        printStream22.print("hi!");
        printStream22.close();
        java.util.Locale locale28 = null;
        java.lang.String[] strArray30 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream31 = printStream22.format(locale28, "France", (java.lang.Object[]) strArray30);
        java.io.PrintStream printStream32 = printStream1.printf(locale15, "Italian", (java.lang.Object[]) strArray30);
        printStream32.print('a');
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(printStream32);
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3228");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.print((long) ' ');
        printStream4.print((-1L));
        printStream4.println((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream14 = printStream4.append((java.lang.CharSequence) "French", (int) (short) 100, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3229");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        cauchyDistribution6.setScale((double) 1.0f);
        double double10 = cauchyDistribution6.getMedian();
        cauchyDistribution6.setScale((double) 1);
        double double14 = cauchyDistribution6.cumulativeProbability((double) 0);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.03172551743055352d + "'", double14 == 0.03172551743055352d);
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3230");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en");
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("de", objArray23);
        java.io.PrintStream printStream26 = printStream4.printf(locale7, "hi!", objArray23);
        java.io.PrintStream printStream27 = printStream1.printf("FR", objArray23);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory28 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution31 = distributionFactory28.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution34 = distributionFactory28.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution37 = distributionFactory28.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution40 = distributionFactory28.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution43 = distributionFactory28.createNormalDistribution((double) 10.0f, 0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution45 = distributionFactory28.createExponentialDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution48 = distributionFactory28.createBinomialDistribution(120, 0.0d);
        double double49 = binomialDistribution48.getProbabilityOfSuccess();
        printStream27.print((java.lang.Object) binomialDistribution48);
        binomialDistribution48.setNumberOfTrials((int) '#');
        double double53 = binomialDistribution48.getProbabilityOfSuccess();
        double double55 = binomialDistribution48.cumulativeProbability((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            binomialDistribution48.setProbabilityOfSuccess(100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(distributionFactory28);
        org.junit.Assert.assertNotNull(weibullDistribution31);
        org.junit.Assert.assertNotNull(fDistribution34);
        org.junit.Assert.assertNotNull(normalDistribution37);
        org.junit.Assert.assertNotNull(normalDistribution40);
        org.junit.Assert.assertNotNull(normalDistribution43);
        org.junit.Assert.assertNotNull(exponentialDistribution45);
        org.junit.Assert.assertNotNull(binomialDistribution48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getLanguage();
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale9 = new java.util.Locale("org.apache.commons.math.MathException: de", "KOR");
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.util.Locale.setDefault(category0, locale9);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution19 = distributionFactory13.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution23 = distributionFactory13.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int24 = hypergeometricDistribution23.getNumberOfSuccesses();
        hypergeometricDistribution23.setSampleSize((int) (byte) 10);
        double double28 = hypergeometricDistribution23.cumulativeProbability((int) 'u');
        hypergeometricDistribution23.setNumberOfSuccesses((int) 'u');
        hypergeometricDistribution23.setPopulationSize((int) (byte) 100);
        boolean boolean33 = locale9.equals((java.lang.Object) hypergeometricDistribution23);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale9.toString(), "org.apache.commons.math.mathexception: de_KOR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.mathexception: de" + "'", str11, "org.apache.commons.math.mathexception: de");
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(cauchyDistribution19);
        org.junit.Assert.assertNotNull(hypergeometricDistribution23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl15.tTest(statisticalSummary16, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getDisplayVariant();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Country();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale14.getDisplayCountry(locale16);
        java.lang.String str20 = locale11.getDisplayName(locale16);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 1, mathException26, (byte) 0, localeList34, 1225.0d };
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("de", objArray36);
        java.io.PrintWriter printWriter39 = printWriter10.printf(locale11, "zho", objArray36);
        printWriter10.flush();
        printWriter10.println(100.0f);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "German" + "'", str15, "German");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FRA" + "'", str17, "FRA");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "allemand" + "'", str20, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution29 = distributionFactory23.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory23.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory23.createTDistribution((double) 100L);
        tDistribution34.setDegreesOfFreedom(52.0d);
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double40 = tTestImpl1.homoscedasticT(statisticalSummary38, statisticalSummary39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(fDistribution29);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        double double9 = fDistribution6.getNumeratorDegreesOfFreedom();
        double double10 = fDistribution6.getDenominatorDegreesOfFreedom();
        fDistribution6.setNumeratorDegreesOfFreedom(0.054800971425164935d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3236");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double double13 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, 1225.0d);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double31 = org.apache.commons.math.stat.StatUtils.sum(doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.product(doubleArray26);
        java.io.PrintStream printStream34 = new java.io.PrintStream("French (France)");
        printStream34.println((float) (short) -1);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale[] localeArray48 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList49);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 1, mathException43, (byte) 0, localeList51, 1225.0d };
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("de", objArray53);
        java.io.PrintStream printStream56 = printStream34.printf(locale37, "hi!", objArray53);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double62 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58, (double) '#');
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        printStream56.print((java.lang.Object) doubleArray58);
        double[] doubleArray66 = new double[] { '#' };
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        double double68 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray58, doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray26, doubleArray66);
        double[] doubleArray71 = new double[] { '#' };
        double double72 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.variance(doubleArray71);
        double double75 = org.apache.commons.math.stat.StatUtils.variance(doubleArray71, (double) '#');
        double double76 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray71);
        double double77 = org.apache.commons.math.stat.StatUtils.sum(doubleArray71);
        double double79 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray71, (double) 1.0f);
        double double80 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray66, doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = tTestImpl14.tTest(doubleArray16, doubleArray71, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.5553480614894135d + "'", double30 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1225.0d + "'", double63 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1225.0d + "'", double67 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[35.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1225.0d + "'", double72 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1225.0d + "'", double76 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 35.0d + "'", double77 == 35.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 35.0d + "'", double79 == 35.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3237");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution7 = distributionFactory0.createTDistribution((double) (byte) 1);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution9 = distributionFactory0.createExponentialDistribution(1.1102230246251565E-16d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution12 = distributionFactory0.createBinomialDistribution(1, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(tDistribution7);
        org.junit.Assert.assertNotNull(exponentialDistribution9);
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution(0.36787944117144233d, (double) 2147483647);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution((double) (byte) 1, 0.03172551743055352d);
        // The following exception was thrown during execution in test generation
        try {
            normalDistribution15.setStandardDeviation((double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Standard deviation must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution15);
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double double14 = tDistribution11.getDegreesOfFreedom();
        tDistribution11.setDegreesOfFreedom(515.7000000000007d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        double double10 = pascalDistribution6.probability((int) 'x');
        double double12 = pascalDistribution6.cumulativeProbability((int) (byte) 10);
        pascalDistribution6.setNumberOfSuccesses((int) 'a');
        double double16 = pascalDistribution6.cumulativeProbability((int) (byte) 10);
        double double17 = pascalDistribution6.getProbabilityOfSuccess();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 1, mathException31, (byte) 0, localeList39, 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("de", objArray41);
        java.io.PrintStream printStream44 = printStream22.printf(locale25, "hi!", objArray41);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) '#');
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        printStream44.print((java.lang.Object) doubleArray46);
        double[] doubleArray54 = new double[] { '#' };
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray46, doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sum(doubleArray46);
        java.io.PrintStream printStream59 = new java.io.PrintStream("French (France)");
        printStream59.println((float) (short) -1);
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale[] localeArray73 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList74);
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 1, mathException68, (byte) 0, localeList76, 1225.0d };
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("de", objArray78);
        java.io.PrintStream printStream81 = printStream59.printf(locale62, "hi!", objArray78);
        double[] doubleArray83 = new double[] { '#' };
        double double84 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray83);
        double double85 = org.apache.commons.math.stat.StatUtils.variance(doubleArray83);
        double double87 = org.apache.commons.math.stat.StatUtils.variance(doubleArray83, (double) '#');
        double double88 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray83);
        printStream81.print((java.lang.Object) doubleArray83);
        double[] doubleArray91 = new double[] { '#' };
        double double92 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray91);
        double double93 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray83, doubleArray91);
        double double94 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray46, doubleArray91);
        double double95 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray91);
        double double96 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray91, (-1), 2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[35.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1225.0d + "'", double84 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1225.0d + "'", double88 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[35.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1225.0d + "'", double92 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1225.0d + "'", double95 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.print((long) ' ');
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        byte[] byteArray12 = new byte[] {};
        printStream11.write(byteArray12);
        printStream7.write(byteArray12);
        printStream1.write(byteArray12);
        java.io.PrintStream printStream17 = printStream1.append((java.lang.CharSequence) "English");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(printStream17);
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38, 1, 0);
        double double44 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray38, (double) (byte) 100);
        double double45 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray38);
        double double46 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray25, doubleArray38);
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray38, 52, (int) (short) -1, 0.4701611405803572d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 34.99999999999999d + "'", double45 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 3.5553480614894135d + "'", double47 == 3.5553480614894135d);
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3244");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution10 = distributionFactory0.createExponentialDistribution((double) 1.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution12 = distributionFactory0.createPoissonDistribution(52.0d);
        double double14 = poissonDistribution12.normalApproximateProbability((int) (short) -1);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(exponentialDistribution10);
        org.junit.Assert.assertNotNull(poissonDistribution12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.6581180872776713E-13d + "'", double14 == 1.6581180872776713E-13d);
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3245");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        printWriter5.print((java.lang.Object) (-1.0d));
        printWriter5.println((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter16 = printWriter5.append((java.lang.CharSequence) "Deutsch", (int) (short) 100, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 117");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory6 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory6.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double10 = weibullDistribution9.getScale();
        double double11 = weibullDistribution9.getScale();
        double double12 = weibullDistribution9.getScale();
        printWriter5.println((java.lang.Object) double12);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter16 = printWriter5.printf("FR", objArray15);
        char[] charArray22 = new char[] { 'x', ' ', '#', ' ', '4' };
        printWriter16.print(charArray22);
        org.junit.Assert.assertNotNull(distributionFactory6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "x # 4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "x # 4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[x,  , #,  , 4]");
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.io.PrintStream printStream6 = new java.io.PrintStream("French (France)");
        printStream6.println((float) (short) -1);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream6);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream6);
        java.lang.Object obj11 = null;
        printWriter10.println(obj11);
        printWriter10.write((int) (short) 1);
        printWriter10.println((-1.0d));
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.setLanguage("German");
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder22 = builder19.setRegion("de");
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getDisplayVariant();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = locale28.getISO3Country();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleKeys();
        java.lang.String str31 = locale26.getDisplayCountry(locale28);
        java.lang.String str32 = locale23.getDisplayName(locale28);
        java.util.Locale.Builder builder33 = builder22.setLocale(locale28);
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter10.printf(locale28, "german", objArray35);
        java.util.Locale.Builder builder37 = builder3.setLocale(locale28);
        java.util.Locale.Builder builder38 = builder3.clearExtensions();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream41 = new java.io.PrintStream("French (France)");
        printStream41.println((float) (short) -1);
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.Locale[] localeArray55 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.util.Locale>) localeList56);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 1, mathException50, (byte) 0, localeList58, 1225.0d };
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("hi!", objArray60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("de", objArray60);
        java.io.PrintStream printStream63 = printStream41.printf(locale44, "hi!", objArray60);
        java.util.Locale locale64 = java.util.Locale.TAIWAN;
        java.lang.String str65 = locale44.getDisplayLanguage(locale64);
        java.util.Locale.setDefault(category39, locale44);
        java.util.Locale.Builder builder67 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder69 = builder67.setLanguage("German");
        java.util.Locale locale70 = builder67.build();
        java.util.Locale.Builder builder71 = builder67.clearExtensions();
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.lang.String str73 = locale72.getISO3Country();
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.lang.String str75 = locale74.getISO3Language();
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.lang.String str77 = locale74.getDisplayScript(locale76);
        java.util.Locale locale78 = java.util.Locale.ROOT;
        java.lang.String str79 = locale78.getDisplayName();
        java.lang.String str80 = locale74.getDisplayScript(locale78);
        java.lang.String str81 = locale74.toLanguageTag();
        java.lang.String str82 = locale72.getDisplayLanguage(locale74);
        java.util.Locale.Builder builder83 = builder67.setLocale(locale74);
        java.util.Locale.setDefault(category39, locale74);
        java.util.Locale locale85 = java.util.Locale.getDefault(category39);
        java.util.Locale.Builder builder86 = builder3.setLocale(locale85);
        java.lang.String str87 = locale85.getISO3Country();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "german");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "German" + "'", str27, "German");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "FRA" + "'", str29, "FRA");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "allemand" + "'", str32, "allemand");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str65, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "german");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "FRA" + "'", str73, "FRA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "und" + "'", str81, "und");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "French" + "'", str82, "French");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory27 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution30 = distributionFactory27.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution31 = distributionFactory27.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution33 = distributionFactory27.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution35 = distributionFactory27.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory27.createTDistribution((double) (byte) 1);
        tTestImpl12.setDistribution(tDistribution37);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = tTestImpl12.tTest(Double.NEGATIVE_INFINITY, statisticalSummary40, 0.9984345977419966d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.9984345977419966");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory27);
        org.junit.Assert.assertNotNull(weibullDistribution30);
        org.junit.Assert.assertNotNull(normalDistribution31);
        org.junit.Assert.assertNotNull(tDistribution33);
        org.junit.Assert.assertNotNull(chiSquaredDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3249");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(true);
        printStream1.print((double) (-1L));
        printStream1.close();
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3250");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        hypergeometricDistribution10.setSampleSize((int) (short) 1);
        int int13 = hypergeometricDistribution10.getSampleSize();
        int int14 = hypergeometricDistribution10.getSampleSize();
        double double16 = hypergeometricDistribution10.probability(2147483646);
        hypergeometricDistribution10.setSampleSize((int) 'x');
        hypergeometricDistribution10.setPopulationSize((int) 'x');
        hypergeometricDistribution10.setPopulationSize((int) ' ');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.lang.String str25 = locale4.getDisplayLanguage(locale24);
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.getDefault(category26);
        java.lang.String str28 = locale4.getDisplayVariant(locale27);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.toLanguageTag();
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getISO3Language();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale31.getDisplayScript(locale33);
        java.lang.String str35 = locale31.getISO3Language();
        java.lang.String str36 = locale29.getDisplayName(locale31);
        java.util.Locale locale37 = locale29.stripExtensions();
        java.lang.String str38 = locale27.getDisplayName(locale29);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str25, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "de" + "'", str30, "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "German" + "'", str36, "German");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str38, "Englisch (Vereinigte Staaten von Amerika)");
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        tDistribution22.setDegreesOfFreedom(100.0d);
        tDistribution22.setDegreesOfFreedom(0.003594758625082406d);
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double30 = tTestImpl15.tTest(0.965280535386903d, statisticalSummary29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3253");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale0.getDisplayScript(locale4);
        java.util.Locale locale9 = new java.util.Locale("und", "");
        java.lang.String str10 = locale0.getDisplayName(locale9);
        java.lang.String str11 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals(locale9.toString(), "und");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3254");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        java.io.PrintStream printStream50 = new java.io.PrintStream("zho");
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream57 = printStream50.printf("Italienisch", (java.lang.Object[]) strArray54);
        java.io.PrintWriter printWriter58 = printWriter47.printf("ITA", (java.lang.Object[]) strArray54);
        boolean boolean59 = printWriter58.checkError();
        printWriter58.close();
        printWriter58.println(false);
        printWriter58.print((double) (byte) -1);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3255");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.homoscedasticTTest(statisticalSummary13, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.36787944117144233d);
        poissonDistribution8.setMean((double) (byte) 100);
        double double11 = poissonDistribution8.getMean();
        double double13 = poissonDistribution8.normalApproximateProbability((int) (short) 100);
        double double15 = poissonDistribution8.normalApproximateProbability((int) ' ');
        double double18 = poissonDistribution8.cumulativeProbability(0.0d, (double) (short) 100);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5199388058383725d + "'", double13 == 0.5199388058383725d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 7.392864098676455E-12d + "'", double15 == 7.392864098676455E-12d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5265621985342424d + "'", double18 == 0.5265621985342424d);
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setNumberOfSuccesses(10);
        double double13 = pascalDistribution6.getProbabilityOfSuccess();
        double double14 = pascalDistribution6.getProbabilityOfSuccess();
        pascalDistribution6.setNumberOfSuccesses(0);
        pascalDistribution6.setProbabilityOfSuccess(1.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        java.io.PrintStream printStream1 = new java.io.PrintStream("FRA");
        printStream1.print(true);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("Chinesisch (China)", objArray20);
        java.io.PrintStream printStream24 = printStream1.printf("United Kingdom", objArray20);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream28 = new java.io.PrintStream("French (France)");
        printStream28.println((float) (short) -1);
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream28);
        printStream28.print((long) (short) 0);
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream35);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        char[] charArray41 = new char[] { ' ' };
        printWriter39.write(charArray41);
        printStream28.print(charArray41);
        printWriter26.print(charArray41);
        printStream1.print(charArray41);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ ]");
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3259");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution29 = distributionFactory23.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory23.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory23.createTDistribution((double) 100L);
        tDistribution34.setDegreesOfFreedom(52.0d);
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = tTestImpl1.tTest(0.0d, statisticalSummary39, (double) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 35.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(fDistribution29);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3260");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution15 = distributionFactory0.createWeibullDistribution((double) 100.0f, 1225.0d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution18 = distributionFactory0.createBinomialDistribution(0, (double) 0.0f);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution21 = distributionFactory0.createWeibullDistribution((double) 1L, 2.2288027128982685E-37d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(weibullDistribution15);
        org.junit.Assert.assertNotNull(binomialDistribution18);
        org.junit.Assert.assertNotNull(weibullDistribution21);
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3261");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder11 = builder6.setExtension('x', "FRA");
        java.util.Locale.Builder builder12 = builder6.clear();
        java.util.Locale.Builder builder15 = builder6.setExtension('x', "it");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder6.setVariant("org.apache.commons.math.MathException: fra");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: org.apache.commons.math.MathException: fra [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3262");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = tTestImpl26.tTest(120.0d, statisticalSummary28, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        double double8 = cauchyDistribution6.getScale();
        cauchyDistribution6.setScale(12.2d);
        cauchyDistribution6.setMedian((double) (byte) 0);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        double double9 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom((double) 'a');
        fDistribution6.setDenominatorDegreesOfFreedom(117.0d);
        fDistribution6.setNumeratorDegreesOfFreedom(515.7000000000007d);
        double double16 = fDistribution6.getNumeratorDegreesOfFreedom();
        double double17 = fDistribution6.getNumeratorDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 515.7000000000007d + "'", double16 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 515.7000000000007d + "'", double17 == 515.7000000000007d);
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (short) 100);
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, 97, 17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 3.5553480614894135d + "'", double10 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3267");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.print((long) ' ');
        printStream4.print((-1L));
        printStream4.println((int) (byte) 10);
        printStream4.println('a');
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3268");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (short) 100);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 2147483647);
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, (int) (short) 10, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        java.io.PrintStream printStream1 = new java.io.PrintStream("de");
        boolean boolean2 = printStream1.checkError();
        printStream1.write((int) '#');
        printStream1.flush();
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u6cd5\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printStream7);
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3270");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double27 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray22);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double double34 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray22, (int) (short) 1, 0, (double) (short) 100);
        double double35 = org.apache.commons.math.stat.StatUtils.mean(doubleArray22);
        java.io.PrintStream printStream37 = new java.io.PrintStream("French (France)");
        printStream37.println((float) (short) -1);
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale[] localeArray51 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList52);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 1, mathException46, (byte) 0, localeList54, 1225.0d };
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("de", objArray56);
        java.io.PrintStream printStream59 = printStream37.printf(locale40, "hi!", objArray56);
        double[] doubleArray61 = new double[] { '#' };
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray61);
        double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray61);
        double double65 = org.apache.commons.math.stat.StatUtils.variance(doubleArray61, (double) '#');
        double double66 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray61);
        printStream59.print((java.lang.Object) doubleArray61);
        double double69 = org.apache.commons.math.stat.StatUtils.variance(doubleArray61, 515.7000000000007d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = tTestImpl7.pairedTTest(doubleArray22, doubleArray61, 0.002555130330427813d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1225.0d + "'", double62 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1225.0d + "'", double66 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3271");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        printWriter5.println((-1.0d));
        printWriter5.print((int) (short) -1);
        printWriter5.println('u');
        printWriter5.print((double) '#');
        printWriter5.println(35);
        java.io.PrintStream printStream21 = new java.io.PrintStream("French (France)");
        printStream21.println((float) (short) -1);
        printStream21.println(' ');
        printStream21.print(false);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream21);
        java.io.PrintWriter printWriter30 = printWriter28.append(' ');
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale31.getDisplayVariant();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = locale36.getISO3Country();
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleKeys();
        java.lang.String str39 = locale34.getDisplayCountry(locale36);
        java.lang.String str40 = locale31.getDisplayName(locale36);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale[] localeArray51 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList52);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 1, mathException46, (byte) 0, localeList54, 1225.0d };
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("de", objArray56);
        java.io.PrintWriter printWriter59 = printWriter30.printf(locale31, "zho", objArray56);
        java.lang.String str60 = locale31.getVariant();
        java.util.Locale locale61 = locale31.stripExtensions();
        java.lang.Object[] objArray63 = null;
        java.io.PrintWriter printWriter64 = printWriter5.printf(locale61, "allemand", objArray63);
        java.util.Locale.Builder builder65 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder65.setExtension('x', "en");
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.lang.String str70 = locale69.getISO3Country();
        java.lang.String str71 = locale69.getDisplayName();
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.lang.String str73 = locale69.getDisplayCountry(locale72);
        java.util.Locale.Builder builder74 = builder65.setLocale(locale69);
        java.lang.String str75 = locale61.getDisplayScript(locale69);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "German" + "'", str35, "German");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "FRA" + "'", str37, "FRA");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "allemand" + "'", str40, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "FRA" + "'", str70, "FRA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "French (France)" + "'", str71, "French (France)");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\ud504\ub791\uc2a4" + "'", str73, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3272");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "\uc774\ud0c8\ub9ac\uc544");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ?????????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3273");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 1, mathException26, (byte) 0, localeList34, 1225.0d };
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("de", objArray36);
        java.io.PrintStream printStream39 = printStream17.printf(locale20, "hi!", objArray36);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, (double) '#');
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        printStream39.print((java.lang.Object) doubleArray41);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray41, doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.sum(doubleArray41);
        double double53 = org.apache.commons.math.stat.StatUtils.mean(doubleArray41);
        double[] doubleArray55 = new double[] { '#' };
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray55);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray55);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray55, (double) '#');
        double double60 = org.apache.commons.math.stat.StatUtils.min(doubleArray55);
        double double62 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray55, 12.2d);
        double double65 = org.apache.commons.math.stat.StatUtils.mean(doubleArray55, 10, 2147483646);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = tTestImpl15.homoscedasticTTest(doubleArray41, doubleArray55, (double) 2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 2.147483646E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 35.0d + "'", double60 == 35.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 35.0d + "'", double62 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3274");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getMedian();
        double double8 = cauchyDistribution6.getMedian();
        double double11 = cauchyDistribution6.cumulativeProbability(7.392864098676455E-12d, (double) 97);
        double double12 = cauchyDistribution6.getScale();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2596325675689883d + "'", double11 == 0.2596325675689883d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3275");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution13 = distributionFactory0.createChiSquareDistribution((double) 1.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution16 = distributionFactory0.createGammaDistribution(0.9646159093607598d, 0.24999999999999964d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory0.createNormalDistribution(2.147483647E9d, 61.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution22 = distributionFactory0.createFDistribution((double) '4', (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertNotNull(chiSquaredDistribution13);
        org.junit.Assert.assertNotNull(gammaDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution19);
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ko", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20, (double) '#');
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double29 = org.apache.commons.math.stat.StatUtils.mean(doubleArray20, (int) (short) 0, (int) (byte) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray17, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = tTestImpl14.tTest(32.0d, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3278");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.println('#');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3279");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution29 = distributionFactory23.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution31 = distributionFactory23.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution33 = distributionFactory23.createChiSquareDistribution(0.6321205588285574d);
        org.apache.commons.math.distribution.TDistribution tDistribution35 = distributionFactory23.createTDistribution(0.5199388058383725d);
        tTestImpl1.setDistribution(tDistribution35);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory39 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution42 = distributionFactory39.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution43 = distributionFactory39.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution45 = distributionFactory39.createTDistribution((double) 1L);
        double double46 = tDistribution45.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution45);
        tTestImpl1.setDistribution(tDistribution45);
        double[] doubleArray51 = new double[] { '#' };
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray51, 0, 0);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray58);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double63 = org.apache.commons.math.stat.StatUtils.product(doubleArray58);
        double double64 = org.apache.commons.math.stat.StatUtils.sum(doubleArray58);
        double double66 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray58, (double) (short) 100);
        double double67 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray51, doubleArray58);
        double double69 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray51, 0.24999999999999964d);
        double double70 = org.apache.commons.math.stat.StatUtils.mean(doubleArray51);
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51, (int) (byte) 0, 1);
        double double74 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = tTestImpl1.tTest(272373.4204903813d, doubleArray51, (-9.992007221626409E-16d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -9.992007221626409E-16");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(exponentialDistribution29);
        org.junit.Assert.assertNotNull(poissonDistribution31);
        org.junit.Assert.assertNotNull(chiSquaredDistribution33);
        org.junit.Assert.assertNotNull(tDistribution35);
        org.junit.Assert.assertNotNull(distributionFactory39);
        org.junit.Assert.assertNotNull(weibullDistribution42);
        org.junit.Assert.assertNotNull(normalDistribution43);
        org.junit.Assert.assertNotNull(tDistribution45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 34.99999999999999d + "'", double61 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.5553480614894135d + "'", double62 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 35.0d + "'", double66 == 35.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 35.0d + "'", double69 == 35.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 35.0d + "'", double70 == 35.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 3.5553480614894135d + "'", double73 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 34.99999999999999d + "'", double74 == 34.99999999999999d);
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory29 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution32 = distributionFactory29.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution35 = distributionFactory29.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution39 = distributionFactory29.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int40 = hypergeometricDistribution39.getNumberOfSuccesses();
        hypergeometricDistribution39.setSampleSize((int) (byte) 10);
        double double44 = hypergeometricDistribution39.cumulativeProbability((int) 'u');
        hypergeometricDistribution39.setNumberOfSuccesses((int) (byte) 0);
        int int47 = hypergeometricDistribution39.getSampleSize();
        hypergeometricDistribution39.setSampleSize((int) '4');
        printStream1.print((java.lang.Object) hypergeometricDistribution39);
        printStream1.println((double) 'a');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(distributionFactory29);
        org.junit.Assert.assertNotNull(weibullDistribution32);
        org.junit.Assert.assertNotNull(cauchyDistribution35);
        org.junit.Assert.assertNotNull(hypergeometricDistribution39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3281");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.println((int) (short) 100);
        printWriter8.flush();
        java.util.Locale locale25 = null;
        java.lang.String[] strArray27 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter28 = printWriter8.printf(locale25, "Franz\366sisch (Frankreich)", (java.lang.Object[]) strArray27);
        java.lang.String[] strArray30 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter31 = printWriter28.printf("hi!", (java.lang.Object[]) strArray30);
        printWriter28.print((long) (byte) 1);
        printWriter28.println('4');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printWriter31);
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream1.println('#');
        java.io.PrintStream printStream61 = new java.io.PrintStream("French (France)");
        printStream61.println((float) (short) -1);
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Locale[] localeArray75 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList76);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 1, mathException70, (byte) 0, localeList78, 1225.0d };
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", objArray80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("de", objArray80);
        java.io.PrintStream printStream83 = printStream61.printf(locale64, "hi!", objArray80);
        byte[] byteArray89 = new byte[] { (byte) -1, (byte) 1, (byte) 0, (byte) 10, (byte) -1 };
        printStream83.write(byteArray89);
        printStream1.write(byteArray89);
        boolean boolean92 = printStream1.checkError();
        printStream1.println((float) 35);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream83);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-1, 1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        byte[] byteArray2 = new byte[] {};
        printStream1.write(byteArray2);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.print((long) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        byte[] byteArray10 = new byte[] {};
        printStream9.write(byteArray10);
        printStream5.write(byteArray10);
        printStream1.write(byteArray10);
        java.io.PrintStream printStream15 = printStream1.append('u');
        java.io.PrintStream printStream17 = printStream1.append((java.lang.CharSequence) "");
        printStream1.println();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream17);
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.print("org.apache.commons.math.MathException: de");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory9 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory9.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution15 = distributionFactory9.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double16 = cauchyDistribution15.getScale();
        cauchyDistribution15.setScale((double) 1.0f);
        double double19 = cauchyDistribution15.getMedian();
        cauchyDistribution15.setScale((double) 1);
        printStream1.println((java.lang.Object) cauchyDistribution15);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale23.getDisplayLanguage(locale24);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = locale27.getISO3Language();
        java.lang.String str29 = locale27.getDisplayName();
        boolean boolean30 = locale27.hasExtensions();
        java.lang.String str31 = locale24.getDisplayLanguage(locale27);
        java.io.PrintStream printStream34 = new java.io.PrintStream("French (France)");
        printStream34.println((float) (short) -1);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale[] localeArray48 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList49);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 1, mathException43, (byte) 0, localeList51, 1225.0d };
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("de", objArray53);
        java.io.PrintStream printStream56 = printStream34.printf(locale37, "hi!", objArray53);
        java.io.PrintStream printStream57 = printStream1.format(locale24, "USA", objArray53);
        java.lang.String str58 = locale24.getISO3Language();
        org.junit.Assert.assertNotNull(distributionFactory9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(cauchyDistribution15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Italienisch" + "'", str26, "Italienisch");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fra" + "'", str28, "fra");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "French (France)" + "'", str29, "French (France)");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "allemand" + "'", str31, "allemand");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "deu" + "'", str58, "deu");
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3285");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        printWriter5.println((-1.0d));
        printWriter5.println();
        printWriter5.println((-1L));
        java.io.PrintWriter printWriter16 = printWriter5.append((java.lang.CharSequence) "it");
        org.junit.Assert.assertNotNull(printWriter16);
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, 1, 0);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (int) ' ', (int) 'a', (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3287");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strMap16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList17, strMap18);
        java.lang.String[] strArray27 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strList28);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList30);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strList30, filteringMode32);
        java.lang.String str34 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList36, strMap37);
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder39.setLanguage("German");
        java.util.Locale.Builder builder42 = builder41.clearExtensions();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        boolean boolean44 = locale43.hasExtensions();
        java.lang.String str45 = locale43.getDisplayVariant();
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale43.getDisplayLanguage(locale46);
        java.util.Locale.Builder builder49 = builder41.setLocale(locale43);
        java.lang.String str50 = locale43.getISO3Language();
        java.util.Set<java.lang.String> strSet51 = locale43.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags(languageRangeList36, (java.util.Collection<java.lang.String>) strSet51);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Deutsch" + "'", str48, "Deutsch");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "deu" + "'", str50, "deu");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strList52);
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.distribution.TDistribution tDistribution27 = null;
        tTestImpl26.setDistribution(tDistribution27);
        java.io.PrintStream printStream30 = new java.io.PrintStream("French (France)");
        printStream30.println((float) (short) -1);
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Locale[] localeArray44 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList45 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList45, localeArray44);
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.util.Locale>) localeList45);
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 1, mathException39, (byte) 0, localeList47, 1225.0d };
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("de", objArray49);
        java.io.PrintStream printStream52 = printStream30.printf(locale33, "hi!", objArray49);
        double[] doubleArray54 = new double[] { '#' };
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54, (double) '#');
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        printStream52.print((java.lang.Object) doubleArray54);
        double double62 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54, 515.7000000000007d);
        double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double64 = org.apache.commons.math.stat.StatUtils.product(doubleArray54);
        double[] doubleArray66 = new double[] { '#' };
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        double double68 = org.apache.commons.math.stat.StatUtils.variance(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray66);
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double71 = org.apache.commons.math.stat.StatUtils.product(doubleArray66);
        double double72 = org.apache.commons.math.stat.StatUtils.sum(doubleArray66);
        double[] doubleArray74 = new double[] { '#' };
        double double75 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray74);
        double double78 = org.apache.commons.math.stat.StatUtils.variance(doubleArray74, 1, 0);
        double double79 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray74);
        double double80 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray66, doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = tTestImpl26.pairedTTest(doubleArray54, doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1225.0d + "'", double67 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 34.99999999999999d + "'", double69 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 3.5553480614894135d + "'", double70 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 35.0d + "'", double71 == 35.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 35.0d + "'", double72 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1225.0d + "'", double75 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 34.99999999999999d + "'", double79 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3289");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Deutsch");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "deutsch");
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream4 = new java.io.PrintStream("en");
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale[] localeArray21 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList22);
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 1, mathException16, (byte) 0, localeList24, 1225.0d };
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("de", objArray26);
        java.io.PrintStream printStream29 = printStream7.printf(locale10, "hi!", objArray26);
        java.io.PrintStream printStream30 = printStream4.printf("FR", objArray26);
        java.io.PrintWriter printWriter31 = printWriter1.format("zh-CN", objArray26);
        printWriter31.print((int) (byte) 10);
        boolean boolean34 = printWriter31.checkError();
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter31);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3291");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, 35, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3292");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\ud504\ub791\uc2a4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception:???????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale[] localeArray9 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 1, mathException4, (byte) 0, localeList12, 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("");
        mathException15.addSuppressed((java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException17);
        java.lang.String str20 = mathException17.toString();
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.MathException: " + "'", str20, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3294");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray9, 0, 0);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) '#');
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double24 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray16);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1.6653345369377348E-15d);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double39 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.product(doubleArray36);
        double double42 = org.apache.commons.math.stat.StatUtils.sum(doubleArray36);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44, 1, 0);
        double double49 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray44);
        double double50 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray36, doubleArray44);
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double53 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray28, doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = tTestImpl7.pairedTTest(doubleArray9, doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.5553480614894135d + "'", double34 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 34.99999999999999d + "'", double39 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 34.99999999999999d + "'", double49 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.5553480614894135d + "'", double51 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3295");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) (short) -1, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3296");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory30 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution33 = distributionFactory30.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution36 = distributionFactory30.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory30.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory30.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tTestImpl12.setDistribution(tDistribution41);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) '#');
        double double51 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) (byte) -1);
        double[] doubleArray55 = new double[] { '#' };
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray55);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray55);
        double double58 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray55);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray55);
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray55);
        double double61 = org.apache.commons.math.stat.StatUtils.sum(doubleArray55);
        double double63 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray55, (double) (short) 100);
        double double64 = org.apache.commons.math.stat.StatUtils.sum(doubleArray55);
        double double65 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray55);
        double double67 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray55, (double) 100.0f);
        double double68 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray46, doubleArray55);
        double[] doubleArray70 = new double[] { '#' };
        double double71 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double72 = org.apache.commons.math.stat.StatUtils.variance(doubleArray70);
        double double73 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray70);
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70);
        double double75 = org.apache.commons.math.stat.StatUtils.sum(doubleArray70);
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70);
        double double78 = org.apache.commons.math.stat.StatUtils.variance(doubleArray70, 1225.0d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = tTestImpl12.pairedTTest(doubleArray46, doubleArray70, 0.632120548780791d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.632120548780791");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory30);
        org.junit.Assert.assertNotNull(weibullDistribution33);
        org.junit.Assert.assertNotNull(fDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 34.99999999999999d + "'", double58 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.5553480614894135d + "'", double59 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 35.0d + "'", double60 == 35.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 34.99999999999999d + "'", double65 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 35.0d + "'", double67 == 35.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1225.0d + "'", double71 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 34.99999999999999d + "'", double73 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 3.5553480614894135d + "'", double74 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 35.0d + "'", double75 == 35.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 3.5553480614894135d + "'", double76 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3297");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.max(doubleArray14, 0, 0);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double double27 = org.apache.commons.math.stat.StatUtils.sum(doubleArray21);
        double double29 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray21, (double) (short) 100);
        double double30 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray14, doubleArray21);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray21, doubleArray33);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40);
        double double43 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double double46 = org.apache.commons.math.stat.StatUtils.sum(doubleArray40);
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49, (double) '#');
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double55 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray40, doubleArray49);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49, (double) '#');
        double double59 = org.apache.commons.math.stat.StatUtils.min(doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = tTestImpl12.pairedT(doubleArray21, doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 3.5553480614894135d + "'", double25 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 34.99999999999999d + "'", double43 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 3.5553480614894135d + "'", double44 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 35.0d + "'", double59 == 35.0d);
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3298");
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        printStream2.println(' ');
        printStream2.print(false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream2);
        java.io.PrintWriter printWriter11 = printWriter9.append(' ');
        java.io.PrintWriter printWriter13 = printWriter11.append('u');
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale[] localeArray26 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList27);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 1, mathException21, (byte) 0, localeList29, 1225.0d };
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("de", objArray31);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("", objArray31, (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("und", objArray31, (java.lang.Throwable) mathException38);
        java.io.PrintWriter printWriter40 = printWriter11.printf("Deutsch", objArray31);
        java.lang.String[] strArray43 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray43);
        java.io.PrintWriter printWriter45 = printWriter40.format("French", (java.lang.Object[]) strArray43);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter40, false);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter40);
        java.io.PrintWriter printWriter50 = printWriter40.append('4');
        java.io.PrintStream printStream53 = new java.io.PrintStream("en");
        java.io.PrintStream printStream56 = new java.io.PrintStream("French (France)");
        printStream56.println((float) (short) -1);
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.util.Locale[] localeArray70 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.util.Locale>) localeList71);
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 1, mathException65, (byte) 0, localeList73, 1225.0d };
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("hi!", objArray75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("de", objArray75);
        java.io.PrintStream printStream78 = printStream56.printf(locale59, "hi!", objArray75);
        java.io.PrintStream printStream79 = printStream53.printf("FR", objArray75);
        java.io.PrintWriter printWriter80 = printWriter40.format("\uc911\uad6d", objArray75);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("CA", objArray75);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printWriter80);
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.max(doubleArray17, 0, 0);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24, (double) '#');
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double32 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray17, doubleArray24);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42);
        double double45 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray42);
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray42);
        double double47 = org.apache.commons.math.stat.StatUtils.sum(doubleArray42);
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        java.io.PrintStream printStream50 = new java.io.PrintStream("French (France)");
        printStream50.println((float) (short) -1);
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale[] localeArray64 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList65);
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 1, mathException59, (byte) 0, localeList67, 1225.0d };
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("de", objArray69);
        java.io.PrintStream printStream72 = printStream50.printf(locale53, "hi!", objArray69);
        double[] doubleArray74 = new double[] { '#' };
        double double75 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray74);
        double double76 = org.apache.commons.math.stat.StatUtils.variance(doubleArray74);
        double double78 = org.apache.commons.math.stat.StatUtils.variance(doubleArray74, (double) '#');
        double double79 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray74);
        printStream72.print((java.lang.Object) doubleArray74);
        double[] doubleArray82 = new double[] { '#' };
        double double83 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray74, doubleArray82);
        double double85 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray42, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray34, doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = tTestImpl15.homoscedasticTTest(doubleArray17, doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.5553480614894135d + "'", double38 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 34.99999999999999d + "'", double45 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.5553480614894135d + "'", double46 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1225.0d + "'", double75 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1225.0d + "'", double79 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[35.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1225.0d + "'", double83 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 35.0d + "'", double87 == 35.0d);
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3300");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        printWriter5.println(charArray16);
        java.lang.Object[] objArray20 = null;
        java.io.PrintWriter printWriter21 = printWriter5.printf("allemand", objArray20);
        printWriter21.print("de");
        printWriter21.print((float) (byte) -1);
        printWriter21.println((int) '4');
        printWriter21.print(17);
        printWriter21.close();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(printWriter21);
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.print((double) (byte) 100);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        printStream15.println(' ');
        printStream15.print(false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter24 = printWriter22.append(' ');
        java.io.PrintWriter printWriter26 = printWriter24.append('u');
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Locale[] localeArray39 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList40);
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 1, mathException34, (byte) 0, localeList42, 1225.0d };
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("de", objArray44);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", objArray44, (java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("und", objArray44, (java.lang.Throwable) mathException51);
        java.io.PrintWriter printWriter53 = printWriter24.printf("Deutsch", objArray44);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray56);
        java.io.PrintWriter printWriter58 = printWriter53.format("French", (java.lang.Object[]) strArray56);
        java.io.PrintStream printStream59 = printStream12.format("ja", (java.lang.Object[]) strArray56);
        printStream59.print((int) (short) 100);
        java.io.PrintStream printStream63 = printStream59.append('x');
        printStream59.print("org.apache.commons.math.MathException");
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertNotNull(printStream63);
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3302");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.print("org.apache.commons.math.MathException: de");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory9 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory9.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution15 = distributionFactory9.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double16 = cauchyDistribution15.getScale();
        cauchyDistribution15.setScale((double) 1.0f);
        double double19 = cauchyDistribution15.getMedian();
        cauchyDistribution15.setScale((double) 1);
        printStream1.println((java.lang.Object) cauchyDistribution15);
        java.io.PrintStream printStream26 = new java.io.PrintStream("French (France)");
        printStream26.println((float) (short) -1);
        java.io.PrintStream printStream29 = new java.io.PrintStream((java.io.OutputStream) printStream26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getISO3Language();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayScript(locale32);
        java.lang.String str34 = locale32.getDisplayLanguage();
        java.io.PrintStream printStream37 = new java.io.PrintStream("French (France)");
        printStream37.println((float) (short) -1);
        printStream37.println(' ');
        printStream37.print(false);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.OutputStream) printStream37);
        java.io.PrintWriter printWriter46 = printWriter44.append(' ');
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        boolean boolean48 = locale47.hasExtensions();
        java.lang.String str49 = locale47.getDisplayVariant();
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = locale52.getISO3Country();
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleKeys();
        java.lang.String str55 = locale50.getDisplayCountry(locale52);
        java.lang.String str56 = locale47.getDisplayName(locale52);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale[] localeArray67 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList68);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 1, mathException62, (byte) 0, localeList70, 1225.0d };
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("hi!", objArray72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("de", objArray72);
        java.io.PrintWriter printWriter75 = printWriter46.printf(locale47, "zho", objArray72);
        java.io.PrintStream printStream76 = printStream29.format(locale32, "fra", objArray72);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray83 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList84 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList84, languageRangeArray83);
        java.util.Locale[] localeArray86 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList87 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList87, localeArray86);
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList84, (java.util.Collection<java.util.Locale>) localeList87);
        java.lang.Object[] objArray91 = new java.lang.Object[] { (byte) 1, mathException81, (byte) 0, localeList89, 1225.0d };
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("hi!", objArray91);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("de", objArray91);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("French", objArray72, (java.lang.Throwable) mathException93);
        java.io.PrintStream printStream95 = printStream1.format("fra", objArray72);
        boolean boolean96 = printStream1.checkError();
        printStream1.print((int) 'u');
        org.junit.Assert.assertNotNull(distributionFactory9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(cauchyDistribution15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "German" + "'", str51, "German");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "FRA" + "'", str53, "FRA");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "allemand" + "'", str56, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(languageRangeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localeArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(localeList89);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution((double) 10.0f, 0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution17 = distributionFactory0.createExponentialDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.FDistribution fDistribution20 = distributionFactory0.createFDistribution(12.2d, 1225.0d);
        double double21 = fDistribution20.getNumeratorDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution15);
        org.junit.Assert.assertNotNull(exponentialDistribution17);
        org.junit.Assert.assertNotNull(fDistribution20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 12.2d + "'", double21 == 12.2d);
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, (double) '#');
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray18);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36, (double) '#');
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double42 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray27, doubleArray36);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36, (double) '#');
        double double46 = org.apache.commons.math.stat.StatUtils.min(doubleArray36);
        double double48 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray36, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = tTestImpl7.tTest(doubleArray18, doubleArray36, 0.691462461274013d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.691462461274013");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3305");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        java.io.PrintStream printStream41 = new java.io.PrintStream("French (France)");
        printStream41.println((float) (short) -1);
        java.io.PrintStream printStream44 = new java.io.PrintStream((java.io.OutputStream) printStream41);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getISO3Language();
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale45.getDisplayScript(locale47);
        java.lang.String str49 = locale47.getDisplayLanguage();
        java.io.PrintStream printStream52 = new java.io.PrintStream("French (France)");
        printStream52.println((float) (short) -1);
        printStream52.println(' ');
        printStream52.print(false);
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter((java.io.OutputStream) printStream52);
        java.io.PrintWriter printWriter61 = printWriter59.append(' ');
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        boolean boolean63 = locale62.hasExtensions();
        java.lang.String str64 = locale62.getDisplayVariant();
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.lang.String str66 = locale65.getDisplayName();
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.lang.String str68 = locale67.getISO3Country();
        java.util.Set<java.lang.String> strSet69 = locale67.getUnicodeLocaleKeys();
        java.lang.String str70 = locale65.getDisplayCountry(locale67);
        java.lang.String str71 = locale62.getDisplayName(locale67);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        java.util.Locale[] localeArray82 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList83 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList83, localeArray82);
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.util.Locale>) localeList83);
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 1, mathException77, (byte) 0, localeList85, 1225.0d };
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("hi!", objArray87);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("de", objArray87);
        java.io.PrintWriter printWriter90 = printWriter61.printf(locale62, "zho", objArray87);
        java.io.PrintStream printStream91 = printStream44.format(locale47, "fra", objArray87);
        java.io.PrintWriter printWriter92 = printWriter8.format("org.apache.commons.math.MathException", objArray87);
        printWriter92.print((float) 120);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "German" + "'", str49, "German");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "German" + "'", str66, "German");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "FRA" + "'", str68, "FRA");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "allemand" + "'", str71, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter90);
        org.junit.Assert.assertNotNull(printStream91);
        org.junit.Assert.assertNotNull(printWriter92);
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3306");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        tTestImpl12.setDistribution(tDistribution21);
        double[] doubleArray27 = null;
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29, 1, 0);
        double double35 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray29, (double) (byte) 100);
        double double36 = org.apache.commons.math.stat.StatUtils.mean(doubleArray29);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = tTestImpl12.tTest(doubleArray27, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3307");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double) 10.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(1.0000000000000402d);
        double double10 = poissonDistribution8.probability(2147483646);
        poissonDistribution8.setMean(1225.0d);
        double double14 = poissonDistribution8.probability((double) 0.0f);
        double double16 = poissonDistribution8.probability(3.5080495063977146E-4d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        gammaDistribution9.setAlpha(100.0d);
        double double12 = gammaDistribution9.getAlpha();
        gammaDistribution9.setBeta((double) 100L);
        double double15 = gammaDistribution9.getAlpha();
        double double16 = gammaDistribution9.getBeta();
        gammaDistribution9.setBeta(0.06680720126885803d);
        gammaDistribution9.setBeta((double) 1L);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        java.io.PrintStream printStream30 = printStream1.append((java.lang.CharSequence) "german");
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getDisplayName();
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = locale34.getISO3Country();
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleKeys();
        java.lang.String str37 = locale32.getDisplayCountry(locale34);
        java.lang.String str38 = locale34.getVariant();
        java.lang.String str39 = locale34.getScript();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale[] localeArray51 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList52);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 1, mathException46, (byte) 0, localeList54, 1225.0d };
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray56);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("");
        mathException57.addSuppressed((java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException59);
        java.lang.String[] strArray64 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("allemand", (java.lang.Object[]) strArray64);
        mathException61.addSuppressed((java.lang.Throwable) mathException66);
        java.lang.Object[] objArray68 = mathException66.getArguments();
        java.lang.Throwable[] throwableArray69 = mathException66.getSuppressed();
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: de", (java.lang.Object[]) throwableArray69, throwable70);
        java.io.PrintStream printStream72 = printStream1.format(locale34, "Cina", (java.lang.Object[]) throwableArray69);
        printStream1.print(52.0d);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "German" + "'", str33, "German");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "FRA" + "'", str35, "FRA");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(printStream72);
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3310");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale[] localeArray24 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList25);
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 1, mathException19, (byte) 0, localeList27, 1225.0d };
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("de", objArray29);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", objArray29, (java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("und", objArray29, (java.lang.Throwable) mathException36);
        java.io.PrintStream printStream38 = printStream11.printf("org.apache.commons.math.MathException: ", objArray29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.parse("USA", strMap40);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale[] localeArray45 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.List<java.util.Locale> localeList48 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList46);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale[] localeArray52 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.Locale locale57 = java.util.Locale.lookup(languageRangeList41, (java.util.Collection<java.util.Locale>) localeList55);
        printStream38.print((java.lang.Object) languageRangeList41);
        printStream38.println((long) 10);
        java.io.PrintStream printStream61 = new java.io.PrintStream((java.io.OutputStream) printStream38);
        printStream61.println(2.2288027128982685E-37d);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(localeList56);
        org.junit.Assert.assertNull(locale57);
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3311");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double) 10.0f);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution(0.24999999999999964d);
        chiSquaredDistribution8.setDegreesOfFreedom((double) (byte) 1);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        java.io.PrintStream printStream14 = new java.io.PrintStream("French (France)");
        printStream14.println((float) (short) -1);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale[] localeArray28 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList29);
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 1, mathException23, (byte) 0, localeList31, 1225.0d };
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("de", objArray33);
        java.io.PrintStream printStream36 = printStream14.printf(locale17, "hi!", objArray33);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38, (double) '#');
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        printStream36.print((java.lang.Object) doubleArray38);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray38, doubleArray46);
        double double49 = org.apache.commons.math.stat.StatUtils.sum(doubleArray38);
        double double51 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray38, (double) ' ');
        double double52 = org.apache.commons.math.stat.StatUtils.max(doubleArray38);
        double[] doubleArray54 = new double[] { '#' };
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.product(doubleArray54);
        double double60 = org.apache.commons.math.stat.StatUtils.sum(doubleArray54);
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray54);
        double double62 = org.apache.commons.math.stat.StatUtils.min(doubleArray54);
        double double65 = org.apache.commons.math.stat.StatUtils.sum(doubleArray54, (int) 'u', 2147483647);
        double double66 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = tTestImpl12.homoscedasticT(doubleArray38, doubleArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 34.99999999999999d + "'", double57 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3.5553480614894135d + "'", double58 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 35.0d + "'", double59 == 35.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 35.0d + "'", double60 == 35.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 35.0d + "'", double62 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1225.0d + "'", double66 == 1225.0d);
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayName();
        java.lang.String str3 = locale0.getCountry();
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        printStream5.println();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale[] localeArray24 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList25);
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 1, mathException19, (byte) 0, localeList27, 1225.0d };
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("");
        mathException30.addSuppressed((java.lang.Throwable) mathException32);
        java.lang.Object[] objArray34 = mathException30.getArguments();
        java.io.PrintStream printStream35 = printStream5.printf(locale9, "fran\347ais (France)", objArray34);
        java.lang.String str36 = locale0.getDisplayVariant(locale9);
        java.util.Locale.setDefault(locale0);
        java.lang.String str39 = locale0.getExtension('x');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fra" + "'", str1, "fra");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "French (France)" + "'", str2, "French (France)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FR" + "'", str3, "FR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3314");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution10 = distributionFactory0.createBinomialDistribution((-1), 0.054800971425164935d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of trials must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 100L);
        printStream1.print(false);
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3316");
        java.io.PrintStream printStream1 = new java.io.PrintStream("FRA");
        printStream1.print(true);
        printStream1.print((int) 'x');
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3317");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream11.print((long) 'x');
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3318");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        gammaDistribution9.setAlpha(100.0d);
        gammaDistribution9.setBeta((double) 10);
        double double14 = gammaDistribution9.getAlpha();
        gammaDistribution9.setBeta((double) 10.0f);
        double double17 = gammaDistribution9.getBeta();
        gammaDistribution9.setAlpha(7.392864098676455E-12d);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = gammaDistribution9.inverseCumulativeProbability((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution14 = distributionFactory0.createExponentialDistribution((double) (short) 10);
        exponentialDistribution14.setMean(12.2d);
        double double17 = exponentialDistribution14.getMean();
        double double18 = exponentialDistribution14.getMean();
        double double19 = exponentialDistribution14.getMean();
        exponentialDistribution14.setMean(120.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(exponentialDistribution14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 12.2d + "'", double17 == 12.2d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 12.2d + "'", double18 == 12.2d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 12.2d + "'", double19 == 12.2d);
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        cauchyDistribution6.setScale((double) 1.0f);
        double double10 = cauchyDistribution6.getMedian();
        cauchyDistribution6.setScale((double) 1);
        double double13 = cauchyDistribution6.getMedian();
        cauchyDistribution6.setScale((double) 10L);
        cauchyDistribution6.setMedian((double) 2147483647);
        cauchyDistribution6.setScale(1.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3321");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory18 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution21 = distributionFactory18.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory18.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory18.createTDistribution((double) 1L);
        double double25 = tDistribution24.getDegreesOfFreedom();
        tTestImpl17.setDistribution(tDistribution24);
        tDistribution24.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl29 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(117.0d);
        tTestImpl15.setDistribution(tDistribution24);
        java.io.PrintStream printStream34 = new java.io.PrintStream("French (France)");
        printStream34.println((float) (short) -1);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale[] localeArray48 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList49);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 1, mathException43, (byte) 0, localeList51, 1225.0d };
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("de", objArray53);
        java.io.PrintStream printStream56 = printStream34.printf(locale37, "hi!", objArray53);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double62 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58, (double) '#');
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        printStream56.print((java.lang.Object) doubleArray58);
        double[] doubleArray66 = new double[] { '#' };
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        double double68 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray58, doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.sum(doubleArray58);
        double double70 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray58);
        double[] doubleArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double72 = tTestImpl15.tTest(doubleArray58, doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory18);
        org.junit.Assert.assertNotNull(weibullDistribution21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1225.0d + "'", double63 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1225.0d + "'", double67 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 35.0d + "'", double69 == 35.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 34.99999999999999d + "'", double70 == 34.99999999999999d);
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3322");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.homoscedasticTTest(statisticalSummary14, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr_FR", "FR");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: FR");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("French (France)", "USA");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: USA");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale2.getLanguage();
        java.util.Locale locale5 = locale2.stripExtensions();
        java.lang.String str6 = locale2.getDisplayLanguage();
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray11);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray11);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale[] localeArray24 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList25);
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 1, mathException19, (byte) 0, localeList27, 1225.0d };
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("");
        mathException30.addSuppressed((java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("German", (java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("Franz\366sisch", (java.lang.Object[]) strArray11, (java.lang.Throwable) mathException35);
        java.io.PrintStream printStream37 = printStream1.printf(locale2, "inglese (Stati Uniti)", (java.lang.Object[]) strArray11);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "allemand" + "'", str3, "allemand");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "de" + "'", str4, "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "allemand" + "'", str6, "allemand");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream37);
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3326");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setNumberOfSuccesses(10);
        double double13 = pascalDistribution6.getProbabilityOfSuccess();
        pascalDistribution6.setProbabilityOfSuccess((double) 1.0f);
        pascalDistribution6.setNumberOfSuccesses((int) (byte) 100);
        double double19 = pascalDistribution6.probability((double) 'u');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory0.createTDistribution((double) 2147483647);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution10 = distributionFactory0.createExponentialDistribution(4.560969057281146E-69d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution13 = distributionFactory0.createWeibullDistribution(0.003594758625082406d, 0.06680720126885681d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertNotNull(exponentialDistribution10);
        org.junit.Assert.assertNotNull(weibullDistribution13);
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        fDistribution6.setNumeratorDegreesOfFreedom((double) (short) 100);
        fDistribution6.setNumeratorDegreesOfFreedom(61.0d);
        double double13 = fDistribution6.getNumeratorDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 61.0d + "'", double13 == 61.0d);
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3329");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getDisplayVariant();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Country();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale14.getDisplayCountry(locale16);
        java.lang.String str20 = locale11.getDisplayName(locale16);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 1, mathException26, (byte) 0, localeList34, 1225.0d };
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("de", objArray36);
        java.io.PrintWriter printWriter39 = printWriter10.printf(locale11, "zho", objArray36);
        printWriter10.print(0.03172551743055352d);
        printWriter10.println((float) 100);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "allemand" + "'", str15, "allemand");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FRA" + "'", str17, "FRA");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "allemand" + "'", str20, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3330");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream13 = new java.io.PrintStream("French (France)");
        printStream13.println((float) (short) -1);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream13);
        java.lang.Object obj18 = null;
        printWriter17.println(obj18);
        printWriter17.write((int) (short) 1);
        java.io.PrintStream printStream23 = new java.io.PrintStream("French (France)");
        printStream23.println((float) (short) -1);
        java.io.PrintStream printStream26 = new java.io.PrintStream((java.io.OutputStream) printStream23);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream23);
        char[] charArray29 = new char[] { ' ' };
        printWriter27.write(charArray29);
        java.io.PrintStream printStream32 = new java.io.PrintStream("French (France)");
        printStream32.println((float) (short) -1);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream32);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream32);
        char[] charArray38 = new char[] { ' ' };
        printWriter36.write(charArray38);
        printWriter27.println(charArray38);
        printWriter17.write(charArray38, (int) (byte) 0, 1);
        printWriter11.print(charArray38);
        printWriter11.close();
        java.io.PrintStream printStream47 = new java.io.PrintStream("French (France)");
        printStream47.println((float) (short) -1);
        java.io.PrintStream printStream50 = new java.io.PrintStream((java.io.OutputStream) printStream47);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream47);
        java.lang.Object obj52 = null;
        printWriter51.println(obj52);
        printWriter51.print((int) (byte) 10);
        printWriter51.print(false);
        printWriter51.print(100.0d);
        java.io.PrintWriter printWriter61 = printWriter51.append((java.lang.CharSequence) "zho");
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream65 = new java.io.PrintStream("French (France)");
        printStream65.println((float) (short) -1);
        java.io.PrintStream printStream68 = new java.io.PrintStream((java.io.OutputStream) printStream65);
        printStream65.print((long) (short) 0);
        java.io.PrintStream printStream72 = new java.io.PrintStream("French (France)");
        printStream72.println((float) (short) -1);
        java.io.PrintStream printStream75 = new java.io.PrintStream((java.io.OutputStream) printStream72);
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter((java.io.OutputStream) printStream72);
        char[] charArray78 = new char[] { ' ' };
        printWriter76.write(charArray78);
        printStream65.print(charArray78);
        printWriter63.print(charArray78);
        printWriter51.println(charArray78);
        printWriter11.write(charArray78, (int) (byte) 10, (int) '4');
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ ]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ ]");
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("zh_CN", "fran\347ais (France)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: franc?ais (France)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4);
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double13 = org.apache.commons.math.stat.StatUtils.mean(doubleArray4, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray4);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = org.apache.commons.math.stat.StatUtils.min(doubleArray4, 120, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 3.5553480614894135d + "'", double10 == 3.5553480614894135d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3333");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory32 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution35 = distributionFactory32.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution36 = distributionFactory32.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution38 = distributionFactory32.createTDistribution((double) 1L);
        double double39 = tDistribution38.getDegreesOfFreedom();
        tTestImpl31.setDistribution(tDistribution38);
        double double41 = tDistribution38.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution38);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory43 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution46 = distributionFactory43.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution47 = distributionFactory43.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution48 = distributionFactory43.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution50 = distributionFactory43.createTDistribution((double) (byte) 1);
        tTestImpl12.setDistribution(tDistribution50);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary52 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double54 = tTestImpl12.homoscedasticTTest(statisticalSummary52, statisticalSummary53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory32);
        org.junit.Assert.assertNotNull(weibullDistribution35);
        org.junit.Assert.assertNotNull(normalDistribution36);
        org.junit.Assert.assertNotNull(tDistribution38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory43);
        org.junit.Assert.assertNotNull(weibullDistribution46);
        org.junit.Assert.assertNotNull(normalDistribution47);
        org.junit.Assert.assertNotNull(normalDistribution48);
        org.junit.Assert.assertNotNull(tDistribution50);
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3334");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 100L);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution18 = distributionFactory0.createGammaDistribution(10.0d, (double) 10);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution20 = distributionFactory0.createExponentialDistribution((double) 100.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution22 = distributionFactory0.createPoissonDistribution(515.7000000000007d);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution24 = distributionFactory0.createPoissonDistribution(117.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertNotNull(gammaDistribution18);
        org.junit.Assert.assertNotNull(exponentialDistribution20);
        org.junit.Assert.assertNotNull(poissonDistribution22);
        org.junit.Assert.assertNotNull(poissonDistribution24);
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setNumeratorDegreesOfFreedom((double) (short) 10);
        double double9 = fDistribution6.getDenominatorDegreesOfFreedom();
        double double10 = fDistribution6.getDenominatorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom((double) 10);
        double double13 = fDistribution6.getNumeratorDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        hypergeometricDistribution10.setSampleSize((int) (short) 1);
        hypergeometricDistribution10.setNumberOfSuccesses((int) '4');
        int int15 = hypergeometricDistribution10.getNumberOfSuccesses();
        int int16 = hypergeometricDistribution10.getSampleSize();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        java.lang.String[] strArray42 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter44 = printWriter39.format("French", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter39, false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter39);
        java.io.PrintWriter printWriter49 = printWriter47.append('u');
        printWriter49.print((int) (byte) -1);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printWriter49);
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3338");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        printWriter8.print("");
        printWriter8.print((long) (short) 100);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, (double) '#');
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.sum(doubleArray26);
        double double34 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray26, (double) 1.0f);
        printWriter8.print((java.lang.Object) doubleArray26);
        java.io.PrintWriter printWriter37 = printWriter8.append('4');
        java.io.PrintStream printStream39 = new java.io.PrintStream("French (France)");
        printStream39.println((float) (short) -1);
        printStream39.println(' ');
        printStream39.print(false);
        printStream39.println((float) '#');
        java.io.PrintStream printStream49 = new java.io.PrintStream((java.io.OutputStream) printStream39, true);
        printStream49.println(100.0d);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream49);
        java.io.PrintStream printStream54 = new java.io.PrintStream("en");
        java.io.PrintStream printStream57 = new java.io.PrintStream("French (France)");
        printStream57.println((float) (short) -1);
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Locale[] localeArray71 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.util.Locale>) localeList72);
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 1, mathException66, (byte) 0, localeList74, 1225.0d };
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("de", objArray76);
        java.io.PrintStream printStream79 = printStream57.printf(locale60, "hi!", objArray76);
        java.io.PrintStream printStream80 = printStream54.printf("FR", objArray76);
        java.io.PrintStream printStream82 = new java.io.PrintStream("French (France)");
        printStream82.println((float) (short) -1);
        java.io.PrintStream printStream85 = new java.io.PrintStream((java.io.OutputStream) printStream82);
        java.io.PrintWriter printWriter86 = new java.io.PrintWriter((java.io.OutputStream) printStream82);
        char[] charArray88 = new char[] { ' ' };
        printWriter86.write(charArray88);
        printStream80.println(charArray88);
        printWriter52.println(charArray88);
        printWriter37.println(charArray88);
        java.util.Locale locale93 = java.util.Locale.GERMANY;
        java.lang.String str94 = locale93.getDisplayScript();
        java.lang.Object[] objArray96 = null;
        java.io.PrintWriter printWriter97 = printWriter37.format(locale93, "\ud504\ub791\uc2a4)", objArray96);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[ ]");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(printWriter97);
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3339");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double37 = org.apache.commons.math.stat.StatUtils.product(doubleArray32);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray32);
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray32);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, (double) '#');
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double47 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray32, doubleArray41);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, (double) '#');
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, 0.002555130330427813d, 2147483647, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double55 = tTestImpl15.pairedTTest(doubleArray27, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3340");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.print((int) (byte) 10);
        printWriter5.print(false);
        printWriter5.print(100.0d);
        java.io.PrintWriter printWriter15 = printWriter5.append((java.lang.CharSequence) "zho");
        printWriter5.println();
        printWriter5.println('u');
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        java.lang.String[] strArray42 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter44 = printWriter39.format("French", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter39, false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter39);
        java.io.PrintWriter printWriter49 = printWriter39.append('4');
        java.io.PrintWriter printWriter51 = printWriter39.append((java.lang.CharSequence) "it");
        printWriter51.print('u');
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3343");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        printStream1.print((int) ' ');
        printStream1.print(100.0f);
        printStream1.println(true);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale[] localeArray21 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList22);
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 1, mathException16, (byte) 0, localeList24, 1225.0d };
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("");
        mathException27.addSuppressed((java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException29);
        java.lang.String[] strArray34 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("allemand", (java.lang.Object[]) strArray34);
        mathException31.addSuppressed((java.lang.Throwable) mathException36);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("");
        mathException53.addSuppressed((java.lang.Throwable) mathException55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException55);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException57);
        mathException31.addSuppressed((java.lang.Throwable) mathException57);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("\uc601\uc5b4", (java.lang.Throwable) mathException31);
        java.lang.Object[] objArray61 = mathException31.getArguments();
        java.io.PrintStream printStream62 = printStream1.printf("English (United Kingdom)", objArray61);
        printStream62.println((int) 'u');
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(printStream62);
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.println((int) (short) 100);
        printWriter8.flush();
        java.util.Locale locale25 = null;
        java.lang.String[] strArray27 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter28 = printWriter8.printf(locale25, "Franz\366sisch (Frankreich)", (java.lang.Object[]) strArray27);
        java.io.PrintWriter printWriter30 = printWriter8.append('x');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printWriter30);
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3345");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        gammaDistribution9.setAlpha(100.0d);
        gammaDistribution9.setBeta((double) 10);
        double double14 = gammaDistribution9.getAlpha();
        // The following exception was thrown during execution in test generation
        try {
            gammaDistribution9.setAlpha((double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream23.println(10);
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale30.getDisplayVariant();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = locale33.getISO3Country();
        java.lang.String str35 = locale33.getDisplayName();
        java.lang.String str36 = locale30.getDisplayVariant(locale33);
        java.lang.String str37 = locale28.getDisplayVariant(locale30);
        java.util.Locale.Category category38 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale39 = java.util.Locale.getDefault(category38);
        java.util.Locale.setDefault(locale39);
        java.lang.String str41 = locale30.getDisplayLanguage(locale39);
        java.io.PrintStream printStream44 = new java.io.PrintStream("French (France)");
        printStream44.println((float) (short) -1);
        printStream44.println(' ');
        printStream44.print(false);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream44);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale52.getDisplayVariant();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        boolean boolean56 = locale55.hasExtensions();
        java.lang.String str57 = locale52.getDisplayLanguage(locale55);
        boolean boolean58 = locale52.hasExtensions();
        java.lang.Object[] objArray60 = null;
        java.io.PrintWriter printWriter61 = printWriter51.printf(locale52, "German", objArray60);
        printWriter51.print((double) 100.0f);
        printWriter51.flush();
        printWriter51.print((long) 'u');
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Locale[] localeArray78 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.util.Locale>) localeList79);
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 1, mathException73, (byte) 0, localeList81, 1225.0d };
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("hi!", objArray83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("de", objArray83);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("Chinesisch (China)", objArray83);
        java.io.PrintWriter printWriter87 = printWriter51.format("French", objArray83);
        java.io.PrintStream printStream88 = printStream23.printf(locale39, "French", objArray83);
        java.io.PrintWriter printWriter89 = new java.io.PrintWriter((java.io.OutputStream) printStream88);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FRA" + "'", str34, "FRA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fran\347ais (France)" + "'", str35, "fran\347ais (France)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.FORMAT + "'", category38.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "allemand" + "'", str41, "allemand");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Deutsch" + "'", str57, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(printStream88);
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3347");
        java.util.Locale locale1 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.lang.String str3 = locale1.getDisplayCountry();
        java.lang.String str4 = locale1.getDisplayScript();
        java.lang.String str5 = locale1.getScript();
        org.junit.Assert.assertEquals(locale1.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3348");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize((int) (byte) 10);
        double double15 = hypergeometricDistribution10.cumulativeProbability((int) 'u');
        hypergeometricDistribution10.setNumberOfSuccesses((int) (byte) 0);
        int int18 = hypergeometricDistribution10.getSampleSize();
        int int19 = hypergeometricDistribution10.getSampleSize();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3349");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("France");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        java.io.PrintStream printStream6 = new java.io.PrintStream("French (France)");
        printStream6.print((long) ' ');
        printStream6.print((int) ' ');
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        printStream12.println((float) (short) -1);
        printStream12.println(' ');
        printStream12.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        printStream20.print((long) (short) 0);
        java.io.PrintStream printStream27 = new java.io.PrintStream("French (France)");
        printStream27.println((float) (short) -1);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream27);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream27);
        char[] charArray33 = new char[] { ' ' };
        printWriter31.write(charArray33);
        printStream20.print(charArray33);
        printStream12.println(charArray33);
        printStream6.println(charArray33);
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.println((float) (short) -1);
        printStream40.println(' ');
        printStream40.print(false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream40);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        boolean boolean49 = locale48.hasExtensions();
        java.lang.String str50 = locale48.getDisplayVariant();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = locale48.getDisplayLanguage(locale51);
        boolean boolean54 = locale48.hasExtensions();
        java.lang.Object[] objArray56 = null;
        java.io.PrintWriter printWriter57 = printWriter47.printf(locale48, "German", objArray56);
        java.util.Locale locale58 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale[] localeArray69 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 1, mathException64, (byte) 0, localeList72, 1225.0d };
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("de", objArray74);
        java.io.PrintWriter printWriter77 = printWriter47.printf(locale58, "zh-CN", objArray74);
        printWriter47.write((int) '#');
        printWriter47.print('x');
        printWriter47.print((long) (short) 1);
        printWriter47.println((float) (short) 10);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("");
        java.lang.Throwable[] throwableArray89 = mathException88.getSuppressed();
        java.io.PrintWriter printWriter90 = printWriter47.format("fra", (java.lang.Object[]) throwableArray89);
        java.io.PrintStream printStream91 = printStream6.format("und", (java.lang.Object[]) throwableArray89);
        printStream6.println((float) 'a');
        printStream6.print("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FRA");
        boolean boolean96 = languageRange1.equals((java.lang.Object) printStream6);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "france" + "'", str3, "france");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "france" + "'", str4, "france");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ ]");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Deutsch" + "'", str53, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(printWriter90);
        org.junit.Assert.assertNotNull(printStream91);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3350");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("allemand", (double) 0L);
        double double3 = languageRange2.getWeight();
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        printStream12.println((float) (short) -1);
        printStream12.println(' ');
        printStream12.print(false);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream12);
        java.io.PrintWriter printWriter21 = printWriter19.append(' ');
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.getDisplayVariant();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale25.getDisplayName();
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = locale27.getISO3Country();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.lang.String str30 = locale25.getDisplayCountry(locale27);
        java.lang.String str31 = locale22.getDisplayName(locale27);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale[] localeArray42 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList43);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 1, mathException37, (byte) 0, localeList45, 1225.0d };
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", objArray47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("de", objArray47);
        java.io.PrintWriter printWriter50 = printWriter21.printf(locale22, "zho", objArray47);
        java.io.PrintWriter printWriter51 = printWriter9.printf("", objArray47);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.Writer) printWriter51, false);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.Writer) printWriter53, true);
        java.lang.String[] strArray57 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter58 = printWriter53.printf("org.apache.commons.math.MathException: de", (java.lang.Object[]) strArray57);
        boolean boolean59 = languageRange2.equals((java.lang.Object) "org.apache.commons.math.MathException: de");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "German" + "'", str26, "German");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "FRA" + "'", str28, "FRA");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "allemand" + "'", str31, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3351");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) '#');
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.mean(doubleArray17);
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, (double) '#');
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double35 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray27, (double) 1.0f);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double37 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray17, doubleArray27);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray17);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40, (double) '#');
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40, (double) (byte) -1);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray49);
        double double55 = org.apache.commons.math.stat.StatUtils.sum(doubleArray49);
        double double57 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray49, (double) (short) 100);
        double double58 = org.apache.commons.math.stat.StatUtils.sum(doubleArray49);
        double double59 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray49);
        double double61 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray49, (double) 100.0f);
        double double62 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray40, doubleArray49);
        double double63 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray17, doubleArray49);
        double[] doubleArray65 = new double[] { '#' };
        double double66 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray65);
        double double67 = org.apache.commons.math.stat.StatUtils.variance(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray65);
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double70 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = tTestImpl15.t(doubleArray17, doubleArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 34.99999999999999d + "'", double52 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.5553480614894135d + "'", double53 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 34.99999999999999d + "'", double59 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[35.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1225.0d + "'", double66 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 34.99999999999999d + "'", double68 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 3.5553480614894135d + "'", double69 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1225.0d + "'", double70 == 1225.0d);
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3352");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        pascalDistribution6.setProbabilityOfSuccess(0.2596325675689883d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3353");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double29 = tTestImpl26.t(0.9999999999999989d, statisticalSummary28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3354");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 100L);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.print(true);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        boolean boolean17 = locale16.hasExtensions();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale[] localeArray28 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList29);
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 1, mathException23, (byte) 0, localeList31, 1225.0d };
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("");
        mathException34.addSuppressed((java.lang.Throwable) mathException36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException36);
        java.lang.Throwable[] throwableArray39 = mathException36.getSuppressed();
        java.io.PrintStream printStream40 = printStream1.format(locale16, "JPN", (java.lang.Object[]) throwableArray39);
        java.io.PrintStream printStream42 = printStream40.append((java.lang.CharSequence) "\u65e5\u6587");
        java.io.PrintStream printStream44 = printStream42.append((java.lang.CharSequence) "");
        boolean boolean45 = printStream44.checkError();
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3355");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.lang.Object obj10 = null;
        printWriter9.println(obj10);
        printWriter9.write((int) (short) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        char[] charArray21 = new char[] { ' ' };
        printWriter19.write(charArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printWriter19.println(charArray30);
        printWriter9.write(charArray30, (int) (byte) 0, 1);
        printStream1.print(charArray30);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.println((float) (short) -1);
        printStream40.println(' ');
        printStream40.print(false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream40);
        java.io.PrintWriter printWriter49 = printWriter47.append(' ');
        java.io.PrintWriter printWriter51 = printWriter49.append('u');
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale[] localeArray64 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList65);
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 1, mathException59, (byte) 0, localeList67, 1225.0d };
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("de", objArray69);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("", objArray69, (java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("und", objArray69, (java.lang.Throwable) mathException76);
        java.io.PrintWriter printWriter78 = printWriter49.printf("Deutsch", objArray69);
        java.io.PrintStream printStream79 = printStream1.printf(locale37, "Deutsch", objArray69);
        java.io.PrintStream printStream81 = printStream79.append('a');
        printStream79.println((double) 100.0f);
        java.io.PrintStream printStream85 = new java.io.PrintStream((java.io.OutputStream) printStream79, true);
        printStream79.print(' ');
        printStream79.print(120);
        printStream79.println(0.0f);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream95 = printStream79.append((java.lang.CharSequence) "org.apache.commons.math.mathexception: de", (int) (short) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printStream81);
    }

    @Test
    public void test3356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3356");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl15.t(statisticalSummary16, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test3357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3357");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.36787944117144233d);
        poissonDistribution8.setMean((double) (byte) 100);
        double double11 = poissonDistribution8.getMean();
        double double13 = poissonDistribution8.normalApproximateProbability((int) (short) 100);
        double double15 = poissonDistribution8.normalApproximateProbability((int) (byte) 100);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5199388058383725d + "'", double13 == 0.5199388058383725d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5199388058383725d + "'", double15 == 0.5199388058383725d);
    }

    @Test
    public void test3358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3358");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList9, strMap10);
        java.lang.String[] strArray19 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags(languageRangeList11, (java.util.Collection<java.lang.String>) strList20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList27, strMap28);
        java.lang.String[] strArray37 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags(languageRangeList29, (java.util.Collection<java.lang.String>) strList38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags(languageRangeList11, (java.util.Collection<java.lang.String>) strList38, filteringMode41);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strMap47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList48, strMap49);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, strMap57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList58, strMap59);
        java.lang.String[] strArray68 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags(languageRangeList60, (java.util.Collection<java.lang.String>) strList69);
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strList71);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags(languageRangeList48, (java.util.Collection<java.lang.String>) strList71);
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList73);
        java.util.Locale locale75 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet76 = locale75.getUnicodeLocaleAttributes();
        java.lang.String str77 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet76);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode41.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(languageRangeList58);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test3359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3359");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setNumberOfSuccesses(10);
        double double13 = pascalDistribution6.getProbabilityOfSuccess();
        pascalDistribution6.setProbabilityOfSuccess((double) 1.0f);
        double double17 = pascalDistribution6.cumulativeProbability(0.841344746068543d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test3360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3360");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale.Builder builder13 = builder10.addUnicodeLocaleAttribute("german");
        java.util.Locale.Builder builder14 = builder10.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.setLanguageTag("France");
        java.util.Locale.Builder builder19 = builder16.setExtension('u', "China");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "german");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test3361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3361");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 515.7000000000007d);
        double[] doubleArray35 = new double[] { '#' };
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35, (double) '#');
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35);
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.sum(doubleArray44);
        double double49 = org.apache.commons.math.stat.StatUtils.max(doubleArray44);
        double double50 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray35, doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray25, doubleArray44, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 3.5553480614894135d + "'", double42 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 34.99999999999999d + "'", double47 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test3362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3362");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getScale();
        weibullDistribution3.setScale((double) 'x');
        double double7 = weibullDistribution3.getShape();
        double double9 = weibullDistribution3.cumulativeProbability((double) 100);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.14913821881548506d + "'", double9 == 0.14913821881548506d);
    }

    @Test
    public void test3363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3363");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        boolean boolean7 = printWriter6.checkError();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test3364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3364");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray9, (double) (short) 100);
        double double18 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray9);
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9, (int) (short) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
    }

    @Test
    public void test3365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3365");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution29 = distributionFactory23.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution31 = distributionFactory23.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution33 = distributionFactory23.createChiSquareDistribution(0.6321205588285574d);
        org.apache.commons.math.distribution.TDistribution tDistribution35 = distributionFactory23.createTDistribution(0.5199388058383725d);
        tTestImpl1.setDistribution(tDistribution35);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory39 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution42 = distributionFactory39.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution43 = distributionFactory39.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution45 = distributionFactory39.createTDistribution((double) 1L);
        double double46 = tDistribution45.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution45);
        tTestImpl1.setDistribution(tDistribution45);
        double[] doubleArray54 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double55 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54, (double) (byte) 100);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.sum(doubleArray54);
        double[] doubleArray61 = new double[] { '#' };
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray61);
        double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray61);
        double double66 = org.apache.commons.math.stat.StatUtils.max(doubleArray61, 0, 0);
        double[] doubleArray68 = new double[] { '#' };
        double double69 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68);
        double double71 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray68);
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double double73 = org.apache.commons.math.stat.StatUtils.product(doubleArray68);
        double double74 = org.apache.commons.math.stat.StatUtils.sum(doubleArray68);
        double double76 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray68, (double) (short) 100);
        double double77 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray61, doubleArray68);
        double double79 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray61, 0.24999999999999964d);
        double double80 = org.apache.commons.math.stat.StatUtils.mean(doubleArray61);
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray61, (int) (byte) 0, 1);
        double double84 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = tTestImpl1.tTest(doubleArray54, doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(exponentialDistribution29);
        org.junit.Assert.assertNotNull(poissonDistribution31);
        org.junit.Assert.assertNotNull(chiSquaredDistribution33);
        org.junit.Assert.assertNotNull(tDistribution35);
        org.junit.Assert.assertNotNull(distributionFactory39);
        org.junit.Assert.assertNotNull(weibullDistribution42);
        org.junit.Assert.assertNotNull(normalDistribution43);
        org.junit.Assert.assertNotNull(tDistribution45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 515.7000000000007d + "'", double57 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 515.6999999999999d + "'", double58 == 515.6999999999999d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 61.0d + "'", double59 == 61.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1225.0d + "'", double62 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1225.0d + "'", double69 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 34.99999999999999d + "'", double71 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 3.5553480614894135d + "'", double72 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 35.0d + "'", double73 == 35.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 35.0d + "'", double74 == 35.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 35.0d + "'", double76 == 35.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 35.0d + "'", double79 == 35.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 35.0d + "'", double80 == 35.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 3.5553480614894135d + "'", double83 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 34.99999999999999d + "'", double84 == 34.99999999999999d);
    }

    @Test
    public void test3366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3366");
        java.util.Locale locale3 = new java.util.Locale("allemand", "allemand", "");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = new java.util.Locale("Deutsch");
        java.lang.String str7 = locale3.getDisplayVariant(locale6);
        java.lang.String str8 = locale6.getISO3Country();
        org.junit.Assert.assertEquals(locale3.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals(locale6.toString(), "deutsch");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test3367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3367");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, 0, 1);
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.5553480614894135d + "'", double12 == 3.5553480614894135d);
    }

    @Test
    public void test3368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3368");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        printWriter5.print((java.lang.Object) (-1.0d));
        printWriter5.println((long) 10);
        printWriter5.flush();
        printWriter5.println((long) '4');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
    }

    @Test
    public void test3369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3369");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale.Builder builder13 = builder10.addUnicodeLocaleAttribute("german");
        java.util.Locale.Builder builder14 = builder10.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.setLanguageTag("France");
        java.util.Locale.Builder builder18 = builder14.setVariant("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("fr_CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: fr_CA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "german");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3370");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.lang.String[] strArray14 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, strMap21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale[] localeArray26 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList27);
        java.util.Locale locale30 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList27);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter(languageRangeList6, (java.util.Collection<java.util.Locale>) localeList27);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale[] localeArray35 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList36);
        java.util.Locale locale39 = java.util.Locale.lookup(languageRangeList6, (java.util.Collection<java.util.Locale>) localeList38);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNull(locale39);
    }

    @Test
    public void test3371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3371");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream3 = new java.io.PrintStream("French (France)");
        printStream3.println((float) (short) -1);
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream3);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream3);
        java.lang.Object obj8 = null;
        printWriter7.println(obj8);
        printWriter7.write((int) (short) 1);
        java.io.PrintStream printStream13 = new java.io.PrintStream("French (France)");
        printStream13.println((float) (short) -1);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream13);
        char[] charArray19 = new char[] { ' ' };
        printWriter17.write(charArray19);
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream22);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream22);
        char[] charArray28 = new char[] { ' ' };
        printWriter26.write(charArray28);
        printWriter17.println(charArray28);
        printWriter7.write(charArray28, (int) (byte) 0, 1);
        printWriter1.println(charArray28);
        java.io.PrintWriter printWriter36 = printWriter1.append((java.lang.CharSequence) "FRA");
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.println((float) (short) -1);
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream40);
        printStream40.print((long) (short) 0);
        java.io.PrintStream printStream47 = new java.io.PrintStream("French (France)");
        printStream47.println((float) (short) -1);
        java.io.PrintStream printStream50 = new java.io.PrintStream((java.io.OutputStream) printStream47);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream47);
        char[] charArray53 = new char[] { ' ' };
        printWriter51.write(charArray53);
        printStream40.print(charArray53);
        printWriter38.print(charArray53);
        printWriter1.print(charArray53);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ ]");
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[ ]");
    }

    @Test
    public void test3372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3372");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        java.util.Locale locale32 = java.util.Locale.UK;
        printWriter5.println((java.lang.Object) locale32);
        printWriter5.print((-1));
        java.io.PrintWriter printWriter37 = printWriter5.append('#');
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.toLanguageTag();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getISO3Language();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale40.getDisplayScript(locale42);
        java.lang.String str44 = locale40.getISO3Language();
        java.lang.String str45 = locale38.getDisplayName(locale40);
        java.io.PrintStream printStream49 = new java.io.PrintStream("French (France)");
        printStream49.println((float) (short) -1);
        printStream49.println(' ');
        printStream49.print(false);
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.OutputStream) printStream49);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        boolean boolean58 = locale57.hasExtensions();
        java.lang.String str59 = locale57.getDisplayVariant();
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        boolean boolean61 = locale60.hasExtensions();
        java.lang.String str62 = locale57.getDisplayLanguage(locale60);
        boolean boolean63 = locale57.hasExtensions();
        java.lang.Object[] objArray65 = null;
        java.io.PrintWriter printWriter66 = printWriter56.printf(locale57, "German", objArray65);
        java.util.Locale locale67 = null;
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Locale[] localeArray78 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.util.Locale>) localeList79);
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 1, mathException73, (byte) 0, localeList81, 1225.0d };
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("hi!", objArray83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("de", objArray83);
        java.io.PrintWriter printWriter86 = printWriter56.printf(locale67, "zh-CN", objArray83);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("FR", objArray83);
        java.io.PrintWriter printWriter88 = printWriter5.printf(locale40, "ko_KR", objArray83);
        java.io.PrintStream printStream90 = new java.io.PrintStream("French (France)");
        printStream90.println((float) (short) -1);
        java.io.PrintStream printStream93 = new java.io.PrintStream((java.io.OutputStream) printStream90);
        java.io.PrintWriter printWriter94 = new java.io.PrintWriter((java.io.OutputStream) printStream90);
        char[] charArray96 = new char[] { ' ' };
        printWriter94.write(charArray96);
        printWriter88.println(charArray96);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "de" + "'", str39, "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "German" + "'", str45, "German");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Deutsch" + "'", str62, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter86);
        org.junit.Assert.assertNotNull(printWriter88);
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray96), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray96), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray96), "[ ]");
    }

    @Test
    public void test3373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3373");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray11 = new double[] { 'u', (short) 100 };
        double double12 = tTestImpl7.tTest(10.0d, doubleArray11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        org.apache.commons.math.distribution.TDistribution tDistribution26 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution26);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory28 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution31 = distributionFactory28.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory28.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory28.createTDistribution((double) 1L);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl27.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        tTestImpl25.setDistribution(tDistribution34);
        tTestImpl7.setDistribution(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = tTestImpl7.tTest(statisticalSummary44, statisticalSummary45, 0.841344746068543d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.841344746068543");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[117.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.054800971425164935d + "'", double12 == 0.054800971425164935d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(distributionFactory28);
        org.junit.Assert.assertNotNull(weibullDistribution31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
    }

    @Test
    public void test3374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3374");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.println(true);
        java.io.PrintWriter printWriter44 = printWriter8.append((java.lang.CharSequence) "de");
        printWriter44.println((double) 10);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter44);
    }

    @Test
    public void test3375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3375");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double30 = tTestImpl27.homoscedasticTTest(statisticalSummary28, statisticalSummary29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test3376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3376");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory26 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution29 = distributionFactory26.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution32 = distributionFactory26.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution35 = distributionFactory26.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory26.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        tTestImpl15.setDistribution(tDistribution37);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = tTestImpl15.tTest(0.0d, statisticalSummary41, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(distributionFactory26);
        org.junit.Assert.assertNotNull(weibullDistribution29);
        org.junit.Assert.assertNotNull(cauchyDistribution32);
        org.junit.Assert.assertNotNull(gammaDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
    }

    @Test
    public void test3377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3377");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        java.lang.String str11 = locale4.getISO3Language();
        java.util.Set<java.lang.String> strSet12 = locale4.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet13 = locale4.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "deu" + "'", str11, "deu");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(charSet13);
    }

    @Test
    public void test3378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3378");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        printWriter47.println(true);
        printWriter47.println((float) 0L);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
    }

    @Test
    public void test3379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3379");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 1, mathException26, (byte) 0, localeList34, 1225.0d };
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("de", objArray36);
        java.io.PrintStream printStream39 = printStream17.printf(locale20, "hi!", objArray36);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, (double) '#');
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        printStream39.print((java.lang.Object) doubleArray41);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray41, doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) '#', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test3380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3380");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.lang.String str7 = locale2.getDisplayCountry(locale4);
        java.lang.String str8 = locale1.getDisplayName(locale4);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale12.getISO3Country();
        java.lang.String str14 = locale12.getDisplayName();
        java.lang.String str15 = locale9.getDisplayVariant(locale12);
        java.lang.String str16 = locale1.getDisplayVariant(locale9);
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale[] localeArray32 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList33);
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 1, mathException27, (byte) 0, localeList35, 1225.0d };
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("de", objArray37);
        java.io.PrintStream printStream40 = printStream18.printf(locale21, "hi!", objArray37);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42, (double) '#');
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        printStream40.print((java.lang.Object) doubleArray42);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42, 515.7000000000007d);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42);
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        boolean boolean53 = locale1.equals((java.lang.Object) doubleArray42);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "German" + "'", str3, "German");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FRA" + "'", str5, "FRA");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FRA" + "'", str13, "FRA");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French (France)" + "'", str14, "French (France)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test3381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3381");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        hypergeometricDistribution10.setSampleSize((int) (short) 1);
        hypergeometricDistribution10.setNumberOfSuccesses((int) '4');
        hypergeometricDistribution10.setPopulationSize(120);
        hypergeometricDistribution10.setPopulationSize((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double21 = hypergeometricDistribution10.cumulativeProbability((int) 'u', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
    }

    @Test
    public void test3382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3382");
        java.util.Locale locale2 = new java.util.Locale("zh", "zh-CN");
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale3.getDisplayLanguage(locale4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = locale7.getDisplayName();
        boolean boolean10 = locale7.hasExtensions();
        java.lang.String str11 = locale4.getDisplayLanguage(locale7);
        java.util.Set<java.lang.Character> charSet12 = locale4.getExtensionKeys();
        java.lang.String str13 = locale4.toLanguageTag();
        java.lang.String str14 = locale2.getDisplayName(locale4);
        java.lang.String str15 = locale2.getLanguage();
        org.junit.Assert.assertEquals(locale2.toString(), "zh_ZH-CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italienisch" + "'", str6, "Italienisch");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "French (France)" + "'", str9, "French (France)");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "allemand" + "'", str11, "allemand");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "de" + "'", str13, "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinesisch (ZH-CN)" + "'", str14, "Chinesisch (ZH-CN)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
    }

    @Test
    public void test3383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3383");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        org.apache.commons.math.distribution.FDistribution fDistribution11 = distributionFactory0.createFDistribution(1.1102230246251565E-16d, 1.6653345369377348E-15d);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution13 = distributionFactory0.createPoissonDistribution(52.0d);
        org.apache.commons.math.distribution.TDistribution tDistribution15 = distributionFactory0.createTDistribution((double) ' ');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(fDistribution11);
        org.junit.Assert.assertNotNull(poissonDistribution13);
        org.junit.Assert.assertNotNull(tDistribution15);
    }

    @Test
    public void test3384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3384");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.MathException: fra", "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: DE");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: DE");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3385");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayLanguage(locale3);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setRegion("ko_KR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ko_KR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Italienisch" + "'", str5, "Italienisch");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test3386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3386");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale7.getDisplayVariant();
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = locale10.getISO3Country();
        java.lang.String str12 = locale10.getDisplayName();
        java.lang.String str13 = locale7.getDisplayVariant(locale10);
        java.lang.String str14 = locale5.getDisplayVariant(locale7);
        java.lang.String str15 = locale1.getDisplayLanguage(locale7);
        java.lang.String str16 = locale7.getCountry();
        java.util.Locale.setDefault(locale7);
        java.lang.String str18 = locale7.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FRA" + "'", str11, "FRA");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "French (France)" + "'", str12, "French (France)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinesisch" + "'", str15, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test3387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3387");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double double16 = tDistribution8.cumulativeProbability((double) (-1));
        tDistribution8.setDegreesOfFreedom(2.147483647E9d);
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.17044656615103027d + "'", double16 == 0.17044656615103027d);
    }

    @Test
    public void test3388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3388");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory0.createTDistribution((double) 2147483647);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution10 = distributionFactory0.createChiSquareDistribution(Double.NaN);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertNotNull(chiSquaredDistribution10);
    }

    @Test
    public void test3389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3389");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double) 10.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.5199388058383725d);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution11 = distributionFactory0.createPascalDistribution(0, 0.0d);
        double double13 = pascalDistribution11.probability(97);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(pascalDistribution11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test3390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3390");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution4 = distributionFactory0.createChiSquareDistribution((double) (short) 1);
        chiSquaredDistribution4.setDegreesOfFreedom(1225.0d);
        chiSquaredDistribution4.setDegreesOfFreedom(1.1102230246251565E-16d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(chiSquaredDistribution4);
    }

    @Test
    public void test3391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3391");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory18 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution21 = distributionFactory18.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory18.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory18.createTDistribution((double) 1L);
        double double25 = tDistribution24.getDegreesOfFreedom();
        tTestImpl17.setDistribution(tDistribution24);
        tDistribution24.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl29 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(117.0d);
        tTestImpl15.setDistribution(tDistribution24);
        org.apache.commons.math.distribution.TDistribution tDistribution33 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution33);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory35 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution38 = distributionFactory35.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory35.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory35.createTDistribution((double) 1L);
        double double42 = tDistribution41.getDegreesOfFreedom();
        tTestImpl34.setDistribution(tDistribution41);
        org.apache.commons.math.distribution.TDistribution tDistribution44 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl45 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution44);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory46 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution49 = distributionFactory46.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution50 = distributionFactory46.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution52 = distributionFactory46.createTDistribution((double) 1L);
        double double53 = tDistribution52.getDegreesOfFreedom();
        tTestImpl45.setDistribution(tDistribution52);
        tTestImpl34.setDistribution(tDistribution52);
        tTestImpl15.setDistribution(tDistribution52);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory57 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution60 = distributionFactory57.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution61 = distributionFactory57.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution63 = distributionFactory57.createTDistribution((double) 1L);
        tDistribution63.setDegreesOfFreedom((double) (short) 10);
        tTestImpl15.setDistribution(tDistribution63);
        double[] doubleArray69 = new double[] { '#' };
        double double70 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray69);
        double double71 = org.apache.commons.math.stat.StatUtils.variance(doubleArray69);
        double double73 = org.apache.commons.math.stat.StatUtils.variance(doubleArray69, (double) '#');
        double double74 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray69);
        double double75 = org.apache.commons.math.stat.StatUtils.sum(doubleArray69);
        double double77 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray69, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = tTestImpl15.tTest(0.054800971425164935d, doubleArray69, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory18);
        org.junit.Assert.assertNotNull(weibullDistribution21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory35);
        org.junit.Assert.assertNotNull(weibullDistribution38);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory46);
        org.junit.Assert.assertNotNull(weibullDistribution49);
        org.junit.Assert.assertNotNull(normalDistribution50);
        org.junit.Assert.assertNotNull(tDistribution52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory57);
        org.junit.Assert.assertNotNull(weibullDistribution60);
        org.junit.Assert.assertNotNull(normalDistribution61);
        org.junit.Assert.assertNotNull(tDistribution63);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1225.0d + "'", double70 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1225.0d + "'", double74 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 35.0d + "'", double75 == 35.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 35.0d + "'", double77 == 35.0d);
    }

    @Test
    public void test3392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3392");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) (byte) 10, 0.054800971425164935d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Poisson mean must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
    }

    @Test
    public void test3393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3393");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream11.println(100.0d);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter16 = printWriter14.append(' ');
        printWriter14.println(10);
        org.junit.Assert.assertNotNull(printWriter16);
    }

    @Test
    public void test3394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3394");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution11 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution14 = distributionFactory0.createPascalDistribution((int) (byte) 0, 0.9646641462260455d);
        pascalDistribution14.setProbabilityOfSuccess(0.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(poissonDistribution11);
        org.junit.Assert.assertNotNull(pascalDistribution14);
    }

    @Test
    public void test3395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3395");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "zh_TW");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zh_TW");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3396");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        double double5 = weibullDistribution3.getShape();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = weibullDistribution3.cumulativeProbability((double) 120, 0.5199388058383725d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test3397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3397");
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        printStream2.println(' ');
        printStream2.print(false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream2);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale10.getDisplayVariant();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale10.getDisplayLanguage(locale13);
        boolean boolean16 = locale10.hasExtensions();
        java.lang.Object[] objArray18 = null;
        java.io.PrintWriter printWriter19 = printWriter9.printf(locale10, "German", objArray18);
        java.lang.Object obj20 = null;
        printWriter19.print(obj20);
        printWriter19.print("org.apache.commons.math.MathException: de");
        printWriter19.println((float) 100);
        printWriter19.print("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        java.util.Locale locale28 = java.util.Locale.US;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale[] localeArray41 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.List<java.util.Locale> localeList44 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList42);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 1, mathException36, (byte) 0, localeList44, 1225.0d };
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", objArray46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("de", objArray46);
        java.io.PrintWriter printWriter49 = printWriter19.format(locale29, "Franz\366sisch (Frankreich)", objArray46);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("FR", objArray46);
        java.lang.String str51 = mathException50.getPattern();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale[] localeArray61 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 1, mathException56, (byte) 0, localeList64, 1225.0d };
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray66);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("");
        mathException67.addSuppressed((java.lang.Throwable) mathException69);
        java.lang.Object[] objArray71 = mathException67.getArguments();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("ko_KR", objArray71);
        java.lang.Object[] objArray73 = mathException72.getArguments();
        mathException50.addSuppressed((java.lang.Throwable) mathException72);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException72);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Deutsch" + "'", str15, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc601\uc5b4" + "'", str30, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localeList44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FR" + "'", str51, "FR");
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
    }

    @Test
    public void test3398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3398");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayName();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = locale3.stripExtensions();
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.lang.String str7 = locale5.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str1, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test3399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3399");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        tDistribution22.setDegreesOfFreedom((double) (short) 10);
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, (double) '#');
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray33, 0, 1);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33, 10, 2147483647);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = tTestImpl15.tTest(doubleArray27, doubleArray33, 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.5553480614894135d + "'", double37 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 34.99999999999999d + "'", double40 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test3400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3400");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.print((long) ' ');
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        byte[] byteArray13 = new byte[] {};
        printStream12.write(byteArray13);
        printStream8.write(byteArray13);
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        printStream18.println(' ');
        printStream18.print(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = locale26.getDisplayLanguage(locale29);
        boolean boolean32 = locale26.hasExtensions();
        java.lang.Object[] objArray34 = null;
        java.io.PrintWriter printWriter35 = printWriter25.printf(locale26, "German", objArray34);
        java.util.Locale locale36 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter25.printf(locale36, "zh-CN", objArray52);
        java.io.PrintStream printStream56 = printStream8.format("Chinese (Taiwan)", objArray52);
        java.io.PrintWriter printWriter57 = printWriter5.printf("Franz\366sisch (Frankreich)", objArray52);
        printWriter5.println((int) (byte) 100);
        printWriter5.print((float) 'a');
        printWriter5.println((float) 97);
        printWriter5.flush();
        printWriter5.write((int) (byte) 100);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Deutsch" + "'", str31, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
    }

    @Test
    public void test3401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3401");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        printStream12.println((float) (short) -1);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale[] localeArray26 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList27);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 1, mathException21, (byte) 0, localeList29, 1225.0d };
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("de", objArray31);
        java.io.PrintStream printStream34 = printStream12.printf(locale15, "hi!", objArray31);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36, (double) '#');
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        printStream34.print((java.lang.Object) doubleArray36);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36, (double) ' ');
        double[] doubleArray50 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double51 = org.apache.commons.math.stat.StatUtils.max(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, (double) (byte) 100);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = tTestImpl1.homoscedasticTTest(doubleArray36, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 52.0d + "'", double51 == 52.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 515.7000000000007d + "'", double53 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 515.6999999999999d + "'", double54 == 515.6999999999999d);
    }

    @Test
    public void test3402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3402");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        boolean boolean9 = printStream1.checkError();
        printStream1.print(0);
        boolean boolean12 = printStream1.checkError();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getISO3Language();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale13.getDisplayScript(locale15);
        java.lang.String str17 = locale13.getISO3Language();
        java.lang.String str18 = locale13.getISO3Language();
        java.lang.String str19 = locale13.getLanguage();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("");
        mathException36.addSuppressed((java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale[] localeArray51 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList52);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 1, mathException46, (byte) 0, localeList54, 1225.0d };
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray56);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("");
        mathException57.addSuppressed((java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("German", (java.lang.Throwable) mathException59);
        mathException40.addSuppressed((java.lang.Throwable) mathException59);
        java.lang.Object[] objArray64 = mathException59.getArguments();
        java.lang.Throwable[] throwableArray65 = mathException59.getSuppressed();
        java.io.PrintStream printStream66 = printStream1.format(locale13, "Italienisch", (java.lang.Object[]) throwableArray65);
        printStream1.print((double) 1.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(printStream66);
    }

    @Test
    public void test3403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3403");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayScript(locale9);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale7.getDisplayScript(locale11);
        java.lang.String str14 = locale7.toLanguageTag();
        java.lang.String str15 = locale5.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder16 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale.Builder builder20 = builder18.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder18.setScript("JPN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: JPN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "French" + "'", str15, "French");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test3404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3404");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str3 = locale0.getUnicodeLocaleType("en");
        boolean boolean4 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "en" + "'", str1, "en");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test3405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3405");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append('#');
        org.junit.Assert.assertNotNull(printWriter3);
    }

    @Test
    public void test3406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3406");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.distribution.TDistribution tDistribution27 = null;
        tTestImpl26.setDistribution(tDistribution27);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double35 = org.apache.commons.math.stat.StatUtils.product(doubleArray30);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray30);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38, 1, 0);
        double double43 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray30, doubleArray38);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double[] doubleArray48 = new double[] { '#' };
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.sum(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = tTestImpl26.pairedTTest(doubleArray30, doubleArray48, 1.0137771196302974E-7d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.5553480614894135d + "'", double34 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 34.99999999999999d + "'", double43 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.5553480614894135d + "'", double45 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
    }

    @Test
    public void test3407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3407");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        printWriter8.print(false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        boolean boolean24 = printWriter23.checkError();
        printWriter23.println(0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3408");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution15 = distributionFactory0.createWeibullDistribution((double) 100.0f, 1225.0d);
        org.apache.commons.math.distribution.TDistribution tDistribution17 = distributionFactory0.createTDistribution((double) 10L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution20 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 2147483647);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution23 = distributionFactory0.createNormalDistribution(0.9999999999999989d, (double) 'u');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory0.createWeibullDistribution((double) 100, (double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            double double28 = weibullDistribution26.inverseCumulativeProbability((double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability argument must be between 0 and 1 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(weibullDistribution15);
        org.junit.Assert.assertNotNull(tDistribution17);
        org.junit.Assert.assertNotNull(weibullDistribution20);
        org.junit.Assert.assertNotNull(normalDistribution23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
    }

    @Test
    public void test3409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3409");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution7 = distributionFactory0.createTDistribution((double) (byte) 1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl8 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double11 = tTestImpl8.tTest(statisticalSummary9, statisticalSummary10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(tDistribution7);
    }

    @Test
    public void test3410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3410");
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        printStream2.println(' ');
        printStream2.print(false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream2);
        java.io.PrintWriter printWriter11 = printWriter9.append(' ');
        java.io.PrintWriter printWriter13 = printWriter11.append('u');
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale[] localeArray26 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList27);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 1, mathException21, (byte) 0, localeList29, 1225.0d };
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("de", objArray31);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("", objArray31, (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("und", objArray31, (java.lang.Throwable) mathException38);
        java.io.PrintWriter printWriter40 = printWriter11.printf("Deutsch", objArray31);
        java.lang.String[] strArray43 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray43);
        java.io.PrintWriter printWriter45 = printWriter40.format("French", (java.lang.Object[]) strArray43);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter40, false);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter40);
        java.io.PrintWriter printWriter50 = printWriter40.append('4');
        java.io.PrintStream printStream53 = new java.io.PrintStream("en");
        java.io.PrintStream printStream56 = new java.io.PrintStream("French (France)");
        printStream56.println((float) (short) -1);
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.util.Locale[] localeArray70 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.util.Locale>) localeList71);
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 1, mathException65, (byte) 0, localeList73, 1225.0d };
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("hi!", objArray75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("de", objArray75);
        java.io.PrintStream printStream78 = printStream56.printf(locale59, "hi!", objArray75);
        java.io.PrintStream printStream79 = printStream53.printf("FR", objArray75);
        java.io.PrintWriter printWriter80 = printWriter40.format("\uc911\uad6d", objArray75);
        java.lang.Throwable throwable81 = null;
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("france", objArray75, throwable81);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printWriter80);
    }

    @Test
    public void test3411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3411");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.print((int) (byte) 10);
        printWriter5.print(false);
        printWriter5.print(100.0d);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getISO3Country();
        printWriter5.print((java.lang.Object) locale14);
        java.io.PrintWriter printWriter18 = printWriter5.append(' ');
        printWriter5.println('4');
        printWriter5.print("cinese (Cina)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FRA" + "'", str15, "FRA");
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test3412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3412");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("zho");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setExtension('x', "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: DE");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: DE [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test3413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3413");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 100L);
        org.apache.commons.math.distribution.FDistribution fDistribution18 = distributionFactory0.createFDistribution(0.9646641462260455d, (double) 120);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory0.createChiSquareDistribution((double) (byte) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution21 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution24 = distributionFactory0.createBinomialDistribution(100, 0.003594758625082406d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution27 = distributionFactory0.createCauchyDistribution(1.6653345369377348E-15d, 100.0d);
        org.apache.commons.math.distribution.FDistribution fDistribution30 = distributionFactory0.createFDistribution(61.0d, (double) ' ');
        fDistribution30.setNumeratorDegreesOfFreedom((double) 100.0f);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertNotNull(fDistribution18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
        org.junit.Assert.assertNotNull(normalDistribution21);
        org.junit.Assert.assertNotNull(binomialDistribution24);
        org.junit.Assert.assertNotNull(cauchyDistribution27);
        org.junit.Assert.assertNotNull(fDistribution30);
    }

    @Test
    public void test3414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3414");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter18.print((long) (byte) 10);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution29 = distributionFactory23.createTDistribution((double) 1L);
        double double30 = tDistribution29.getDegreesOfFreedom();
        tTestImpl22.setDistribution(tDistribution29);
        org.apache.commons.math.distribution.TDistribution tDistribution32 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl33 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution32);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory34 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution37 = distributionFactory34.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution38 = distributionFactory34.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution40 = distributionFactory34.createTDistribution((double) 1L);
        double double41 = tDistribution40.getDegreesOfFreedom();
        tTestImpl33.setDistribution(tDistribution40);
        tTestImpl22.setDistribution(tDistribution40);
        printWriter18.print((java.lang.Object) tTestImpl22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double47 = tTestImpl22.homoscedasticTTest(statisticalSummary45, statisticalSummary46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(tDistribution29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory34);
        org.junit.Assert.assertNotNull(weibullDistribution37);
        org.junit.Assert.assertNotNull(normalDistribution38);
        org.junit.Assert.assertNotNull(tDistribution40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
    }

    @Test
    public void test3415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3415");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double double29 = tDistribution24.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution24);
        org.apache.commons.math.distribution.TDistribution tDistribution31 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution31);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory33 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution36 = distributionFactory33.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution37 = distributionFactory33.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution39 = distributionFactory33.createTDistribution((double) 1L);
        double double40 = tDistribution39.getDegreesOfFreedom();
        tTestImpl32.setDistribution(tDistribution39);
        tDistribution39.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl44 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution39);
        tDistribution39.setDegreesOfFreedom(117.0d);
        tTestImpl12.setDistribution(tDistribution39);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double50 = tTestImpl12.homoscedasticTTest(statisticalSummary48, statisticalSummary49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertNotNull(distributionFactory33);
        org.junit.Assert.assertNotNull(weibullDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution37);
        org.junit.Assert.assertNotNull(tDistribution39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
    }

    @Test
    public void test3416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3416");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setUnicodeLocaleKeyword("Chinesisch (China)", "French");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Chinesisch (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test3417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3417");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.print((long) 'u');
        java.lang.Object[] objArray25 = null;
        java.io.PrintWriter printWriter26 = printWriter8.printf("\ud504\ub791\uc2a4", objArray25);
        printWriter8.print(false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter8.println();
        printWriter8.println('4');
        printWriter8.println(false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter26);
    }

    @Test
    public void test3418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3418");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution44 = distributionFactory41.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double45 = weibullDistribution44.getShape();
        weibullDistribution44.setScale((double) 100);
        printWriter8.println((java.lang.Object) weibullDistribution44);
        java.io.PrintWriter printWriter50 = printWriter8.append((java.lang.CharSequence) "French");
        printWriter8.print((float) 'a');
        java.io.PrintWriter printWriter54 = printWriter8.append(' ');
        java.io.PrintStream printStream57 = new java.io.PrintStream("FRA");
        printStream57.print(true);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Locale[] localeArray71 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.util.Locale>) localeList72);
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 1, mathException66, (byte) 0, localeList74, 1225.0d };
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("de", objArray76);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("Chinesisch (China)", objArray76);
        java.io.PrintStream printStream80 = printStream57.printf("United Kingdom", objArray76);
        java.io.PrintWriter printWriter81 = printWriter54.format("FR_FR", objArray76);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(weibullDistribution44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertNotNull(printWriter81);
    }

    @Test
    public void test3419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3419");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, (int) (byte) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test3420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3420");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream57.println((float) 17);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Deutsch" + "'", str31, "Deutsch");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test3421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3421");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution29 = distributionFactory23.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution31 = distributionFactory23.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution33 = distributionFactory23.createChiSquareDistribution(0.6321205588285574d);
        org.apache.commons.math.distribution.TDistribution tDistribution35 = distributionFactory23.createTDistribution(0.5199388058383725d);
        tTestImpl1.setDistribution(tDistribution35);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory39 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution42 = distributionFactory39.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution43 = distributionFactory39.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution45 = distributionFactory39.createTDistribution((double) 1L);
        double double46 = tDistribution45.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution45);
        tTestImpl1.setDistribution(tDistribution45);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl49 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution45);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = tTestImpl49.tTest(statisticalSummary50, statisticalSummary51, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(exponentialDistribution29);
        org.junit.Assert.assertNotNull(poissonDistribution31);
        org.junit.Assert.assertNotNull(chiSquaredDistribution33);
        org.junit.Assert.assertNotNull(tDistribution35);
        org.junit.Assert.assertNotNull(distributionFactory39);
        org.junit.Assert.assertNotNull(weibullDistribution42);
        org.junit.Assert.assertNotNull(normalDistribution43);
        org.junit.Assert.assertNotNull(tDistribution45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
    }

    @Test
    public void test3422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3422");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 1, mathException5, (byte) 0, localeList13, 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("");
        mathException16.addSuppressed((java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException18);
        java.lang.String[] strArray23 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("allemand", (java.lang.Object[]) strArray23);
        mathException20.addSuppressed((java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("");
        mathException44.addSuppressed((java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("FRA", (java.lang.Throwable) mathException46);
        mathException25.addSuppressed((java.lang.Throwable) mathException49);
        java.lang.String str51 = mathException49.toString();
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.apache.commons.math.MathException: FRA" + "'", str51, "org.apache.commons.math.MathException: FRA");
    }

    @Test
    public void test3423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3423");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory32 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution35 = distributionFactory32.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution36 = distributionFactory32.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution38 = distributionFactory32.createTDistribution((double) 1L);
        double double39 = tDistribution38.getDegreesOfFreedom();
        tTestImpl31.setDistribution(tDistribution38);
        double double41 = tDistribution38.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution38);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double double50 = org.apache.commons.math.stat.StatUtils.sum(doubleArray44);
        double[] doubleArray52 = new double[] { '#' };
        double double53 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray52);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray52);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double58 = org.apache.commons.math.stat.StatUtils.sum(doubleArray52);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = tTestImpl12.homoscedasticT(doubleArray44, doubleArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory32);
        org.junit.Assert.assertNotNull(weibullDistribution35);
        org.junit.Assert.assertNotNull(normalDistribution36);
        org.junit.Assert.assertNotNull(tDistribution38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 34.99999999999999d + "'", double47 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.5553480614894135d + "'", double48 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1225.0d + "'", double53 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 34.99999999999999d + "'", double55 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 3.5553480614894135d + "'", double56 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 3.5553480614894135d + "'", double57 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.5553480614894135d + "'", double59 == 3.5553480614894135d);
    }

    @Test
    public void test3424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3424");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.print(false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream19 = new java.io.PrintStream("en");
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 1, mathException31, (byte) 0, localeList39, 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("de", objArray41);
        java.io.PrintStream printStream44 = printStream22.printf(locale25, "hi!", objArray41);
        java.io.PrintStream printStream45 = printStream19.printf("FR", objArray41);
        java.io.PrintWriter printWriter46 = printWriter16.format("zh-CN", objArray41);
        java.io.PrintStream printStream47 = printStream1.printf("Chinese (China)", objArray41);
        printStream47.print((float) 2147483646);
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream47, false);
        java.io.PrintStream printStream53 = printStream47.append((java.lang.CharSequence) "ja");
        java.io.PrintStream printStream55 = new java.io.PrintStream("French (France)");
        printStream55.println((float) (short) -1);
        printStream55.println(' ');
        printStream55.print(false);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter((java.io.OutputStream) printStream55);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        boolean boolean64 = locale63.hasExtensions();
        java.lang.String str65 = locale63.getDisplayVariant();
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        boolean boolean67 = locale66.hasExtensions();
        java.lang.String str68 = locale63.getDisplayLanguage(locale66);
        boolean boolean69 = locale63.hasExtensions();
        java.lang.Object[] objArray71 = null;
        java.io.PrintWriter printWriter72 = printWriter62.printf(locale63, "German", objArray71);
        printWriter62.print((double) 100.0f);
        printWriter62.flush();
        printWriter62.print((long) 'u');
        printWriter62.flush();
        printStream47.println((java.lang.Object) printWriter62);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Deutsch" + "'", str68, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(printWriter72);
    }

    @Test
    public void test3425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3425");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder11 = builder6.setExtension('x', "FRA");
        java.util.Locale.Builder builder12 = builder6.clear();
        java.util.Locale.Builder builder13 = builder12.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder13.setUnicodeLocaleKeyword("allemand", "hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: allemand [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3426");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double) 10.0f);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution((-9.992007221626409E-16d), (double) 'u');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution((double) 2147483647, (double) 52);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = distributionFactory0.createTDistribution(1.6653345369377348E-15d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution19 = distributionFactory0.createBinomialDistribution((int) (byte) 100, (double) 17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertNotNull(normalDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution14);
        org.junit.Assert.assertNotNull(tDistribution16);
    }

    @Test
    public void test3427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3427");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.36787944117144233d);
        double double8 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, (int) ' ', 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test3428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3428");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.print((long) 1);
        printWriter8.println();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test3429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3429");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("allemand");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale4.toLanguageTag();
        java.lang.String str7 = locale4.getScript();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Set<java.lang.String> strSet9 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale4.getDisplayCountry();
        java.util.Locale locale11 = locale4.stripExtensions();
        java.util.Set<java.lang.String> strSet12 = locale4.getUnicodeLocaleAttributes();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.parse("zho", strMap14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strMap22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList23, strMap24);
        java.lang.String[] strArray33 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags(languageRangeList25, (java.util.Collection<java.lang.String>) strList34);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList36);
        java.util.Locale.LanguageRange languageRange39 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] { languageRange39 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale[] localeArray46 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale50 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.Locale locale51 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.Locale.LanguageRange languageRange53 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange languageRange55 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] { languageRange53, languageRange55 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Locale locale62 = new java.util.Locale("allemand", "allemand", "");
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode64 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strSet63, filteringMode64);
        java.util.Locale locale66 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap71 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList72 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, strMap71);
        java.util.Locale.LanguageRange[] languageRangeArray73 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList74 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74, languageRangeArray73);
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap79 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList80 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, strMap79);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap81 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList82 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList80, strMap81);
        java.lang.String[] strArray90 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList91 = new java.util.ArrayList<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList91, strArray90);
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags(languageRangeList82, (java.util.Collection<java.lang.String>) strList91);
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, (java.util.Collection<java.lang.String>) strList93);
        java.util.Locale.FilteringMode filteringMode95 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags(languageRangeList72, (java.util.Collection<java.lang.String>) strList93, filteringMode95);
        java.util.List<java.lang.String> strList97 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strSet67, filteringMode95);
        java.util.List<java.util.Locale> localeList98 = java.util.Locale.filter(languageRangeList15, (java.util.Collection<java.util.Locale>) localeList49, filteringMode95);
        java.util.List<java.lang.String> strList99 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strSet12, filteringMode95);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh-CN" + "'", str6, "zh-CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chinesisch (China)" + "'", str8, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "China" + "'", str10, "China");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNull(locale51);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals(locale62.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + filteringMode64 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode64.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(languageRangeList72);
        org.junit.Assert.assertNotNull(languageRangeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(languageRangeList80);
        org.junit.Assert.assertNotNull(languageRangeList82);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertTrue("'" + filteringMode95 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode95.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertNotNull(strList97);
        org.junit.Assert.assertNotNull(localeList98);
        org.junit.Assert.assertNotNull(strList99);
    }

    @Test
    public void test3430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3430");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        java.util.Locale locale32 = java.util.Locale.UK;
        printWriter5.println((java.lang.Object) locale32);
        printWriter5.print((double) (short) -1);
        printWriter5.println((long) 35);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
    }

    @Test
    public void test3431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3431");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        hypergeometricDistribution10.setSampleSize(0);
        int int13 = hypergeometricDistribution10.getSampleSize();
        int int14 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setPopulationSize(120);
        hypergeometricDistribution10.setPopulationSize((int) 'x');
        double double20 = hypergeometricDistribution10.cumulativeProbability(7.392864098676455E-12d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test3432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3432");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        java.io.PrintWriter printWriter22 = printWriter8.append((java.lang.CharSequence) "org.apache.commons.math.MathException: de");
        printWriter22.println();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        printWriter24.println((double) (short) 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test3433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3433");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setNumeratorDegreesOfFreedom((double) (short) 10);
        double double9 = fDistribution6.getDenominatorDegreesOfFreedom();
        double double10 = fDistribution6.getDenominatorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom((double) (byte) 100);
        fDistribution6.setDenominatorDegreesOfFreedom(0.2596325675689883d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test3434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3434");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", "Chine");
        java.lang.String str3 = locale2.getDisplayVariant();
        java.lang.String str4 = locale2.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "org.apache.commons.math.mathexception: org.apache.commons.math.mathexception: _CHINE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CHINE" + "'", str4, "CHINE");
    }

    @Test
    public void test3435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3435");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize((int) (byte) 10);
        int int14 = hypergeometricDistribution10.getSampleSize();
        int int15 = hypergeometricDistribution10.getNumberOfSuccesses();
        int int16 = hypergeometricDistribution10.getSampleSize();
        int int17 = hypergeometricDistribution10.getPopulationSize();
        hypergeometricDistribution10.setSampleSize((int) 'u');
        double double21 = hypergeometricDistribution10.cumulativeProbability(0);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test3436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3436");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution((double) 10.0f, 0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution17 = distributionFactory0.createExponentialDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution20 = distributionFactory0.createBinomialDistribution(120, 0.0d);
        binomialDistribution20.setNumberOfTrials(120);
        int int23 = binomialDistribution20.getNumberOfTrials();
        double double25 = binomialDistribution20.probability((double) 52);
        int int26 = binomialDistribution20.getNumberOfTrials();
        binomialDistribution20.setNumberOfTrials((int) (short) 1);
        int int29 = binomialDistribution20.getNumberOfTrials();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution15);
        org.junit.Assert.assertNotNull(exponentialDistribution17);
        org.junit.Assert.assertNotNull(binomialDistribution20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120 + "'", int23 == 120);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120 + "'", int26 == 120);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test3437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3437");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray11 = new double[] { 'u', (short) 100 };
        double double12 = tTestImpl7.tTest(10.0d, doubleArray11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl7.t(0.9999999999999989d, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[117.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.054800971425164935d + "'", double12 == 0.054800971425164935d);
    }

    @Test
    public void test3438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3438");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale3.getDisplayCountry(locale5);
        java.lang.String str9 = locale0.getDisplayName(locale5);
        java.lang.String str10 = locale0.getDisplayScript();
        java.lang.Object obj11 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Deutsch" + "'", str4, "Deutsch");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "allemand" + "'", str9, "allemand");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "de");
    }

    @Test
    public void test3439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3439");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, (double) '#');
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double38 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray28, (double) ' ');
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double double40 = org.apache.commons.math.stat.StatUtils.min(doubleArray28);
        double double41 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double[] doubleArray43 = new double[] { '#' };
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray43);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray43, (double) '#');
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray43);
        double double50 = org.apache.commons.math.stat.StatUtils.mean(doubleArray43);
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray53 = new double[] { '#' };
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray53);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray53);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray53, (double) '#');
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray53);
        double double59 = org.apache.commons.math.stat.StatUtils.sum(doubleArray53);
        double double61 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray53, (double) 1.0f);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double63 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray43, doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = tTestImpl26.homoscedasticTTest(doubleArray28, doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1225.0d + "'", double48 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1225.0d + "'", double58 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 35.0d + "'", double59 == 35.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.5553480614894135d + "'", double62 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test3440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3440");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getLanguage();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale0.getDisplayLanguage();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale5.getDisplayName();
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getISO3Country();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.lang.String str10 = locale5.getDisplayCountry(locale7);
        java.util.Locale locale11 = locale5.stripExtensions();
        java.lang.String str12 = locale0.getDisplayName(locale5);
        java.lang.String str13 = locale5.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Deutsch" + "'", str1, "Deutsch");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Deutsch" + "'", str4, "Deutsch");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Deutsch" + "'", str6, "Deutsch");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FRA" + "'", str8, "FRA");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Deutsch" + "'", str12, "Deutsch");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test3441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3441");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str4 = locale1.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale6.getDisplayCountry(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale9);
        java.lang.String str12 = locale1.getDisplayVariant(locale5);
        java.lang.String str13 = locale5.toLanguageTag();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FRA" + "'", str7, "FRA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "French (France)" + "'", str8, "French (France)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud504\ub791\uc2a4" + "'", str10, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str11, "\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it-IT" + "'", str13, "it-IT");
    }

    @Test
    public void test3442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3442");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        byte[] byteArray2 = new byte[] {};
        printStream1.write(byteArray2);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.print((long) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        byte[] byteArray10 = new byte[] {};
        printStream9.write(byteArray10);
        printStream5.write(byteArray10);
        printStream1.write(byteArray10);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        printStream15.println(' ');
        printStream15.print(false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getDisplayVariant();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale23.getDisplayLanguage(locale26);
        boolean boolean29 = locale23.hasExtensions();
        java.lang.Object[] objArray31 = null;
        java.io.PrintWriter printWriter32 = printWriter22.printf(locale23, "German", objArray31);
        java.util.Locale locale33 = null;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Locale[] localeArray44 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList45 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList45, localeArray44);
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.util.Locale>) localeList45);
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 1, mathException39, (byte) 0, localeList47, 1225.0d };
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("de", objArray49);
        java.io.PrintWriter printWriter52 = printWriter22.printf(locale33, "zh-CN", objArray49);
        printWriter22.write((int) '#');
        printWriter22.print('x');
        printStream1.print((java.lang.Object) 'x');
        java.io.PrintStream printStream61 = new java.io.PrintStream("French (France)");
        printStream61.println((float) (short) -1);
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Locale[] localeArray75 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList76);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 1, mathException70, (byte) 0, localeList78, 1225.0d };
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", objArray80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("de", objArray80);
        java.io.PrintStream printStream83 = printStream61.printf(locale64, "hi!", objArray80);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("und", objArray80);
        java.io.PrintStream printStream85 = printStream1.format("zh", objArray80);
        java.io.PrintStream printStream86 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) 52);
        printStream1.println(0L);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Deutsch" + "'", str28, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream83);
        org.junit.Assert.assertNotNull(printStream85);
    }

    @Test
    public void test3443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3443");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution29 = distributionFactory23.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution31 = distributionFactory23.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution33 = distributionFactory23.createChiSquareDistribution(0.6321205588285574d);
        org.apache.commons.math.distribution.TDistribution tDistribution35 = distributionFactory23.createTDistribution(0.5199388058383725d);
        tTestImpl1.setDistribution(tDistribution35);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory39 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution42 = distributionFactory39.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution43 = distributionFactory39.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution45 = distributionFactory39.createTDistribution((double) 1L);
        double double46 = tDistribution45.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution45);
        tTestImpl1.setDistribution(tDistribution45);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double51 = tTestImpl1.homoscedasticTTest(statisticalSummary49, statisticalSummary50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(exponentialDistribution29);
        org.junit.Assert.assertNotNull(poissonDistribution31);
        org.junit.Assert.assertNotNull(chiSquaredDistribution33);
        org.junit.Assert.assertNotNull(tDistribution35);
        org.junit.Assert.assertNotNull(distributionFactory39);
        org.junit.Assert.assertNotNull(weibullDistribution42);
        org.junit.Assert.assertNotNull(normalDistribution43);
        org.junit.Assert.assertNotNull(tDistribution45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
    }

    @Test
    public void test3444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3444");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = tTestImpl15.tTest(0.9984345977419966d, statisticalSummary17, 0.9999999999999989d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.9999999999999989");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test3445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3445");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter18.print((long) (byte) 10);
        printWriter18.println('a');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test3446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3446");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray25, 0, 0);
        double double31 = org.apache.commons.math.stat.StatUtils.min(doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, 1225.0d);
        double double42 = org.apache.commons.math.stat.StatUtils.max(doubleArray33);
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray33);
        double[] doubleArray45 = new double[] { '#' };
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray45);
        double double49 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double[] doubleArray51 = new double[] { '#' };
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) '#');
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double57 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray45, doubleArray51);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double59 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray33, doubleArray51);
        double double60 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray25, doubleArray33);
        double[] doubleArray62 = new double[] { '#' };
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62);
        double double64 = org.apache.commons.math.stat.StatUtils.product(doubleArray62);
        double double65 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray25, doubleArray62);
        double[] doubleArray67 = new double[] { '#' };
        double double68 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double71 = org.apache.commons.math.stat.StatUtils.variance(doubleArray67, 1, 0);
        double double72 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray67);
        double[] doubleArray74 = new double[] { '#' };
        double double75 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray74);
        double double76 = org.apache.commons.math.stat.StatUtils.variance(doubleArray74);
        double double78 = org.apache.commons.math.stat.StatUtils.variance(doubleArray74, (double) '#');
        double double79 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray74);
        double double80 = org.apache.commons.math.stat.StatUtils.variance(doubleArray74);
        double double81 = org.apache.commons.math.stat.StatUtils.min(doubleArray74);
        double double82 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray67, doubleArray74);
        double[] doubleArray84 = new double[] { '#' };
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray84);
        double double86 = org.apache.commons.math.stat.StatUtils.variance(doubleArray84);
        double double88 = org.apache.commons.math.stat.StatUtils.variance(doubleArray84, (double) '#');
        double double89 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray84);
        double double90 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray84);
        double double91 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray67, doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = tTestImpl23.homoscedasticT(doubleArray62, doubleArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.5553480614894135d + "'", double37 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 3.5553480614894135d + "'", double39 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 34.99999999999999d + "'", double48 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1225.0d + "'", double63 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1225.0d + "'", double68 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 34.99999999999999d + "'", double72 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1225.0d + "'", double75 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1225.0d + "'", double79 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 35.0d + "'", double81 == 35.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[35.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1225.0d + "'", double85 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1225.0d + "'", double89 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 34.99999999999999d + "'", double90 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
    }

    @Test
    public void test3447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3447");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = tTestImpl13.tTest(32.0d, statisticalSummary15, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test3448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3448");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3449");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution29 = distributionFactory23.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution31 = distributionFactory23.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution33 = distributionFactory23.createChiSquareDistribution(0.6321205588285574d);
        org.apache.commons.math.distribution.TDistribution tDistribution35 = distributionFactory23.createTDistribution(0.5199388058383725d);
        tTestImpl1.setDistribution(tDistribution35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl1.t(0.0d, statisticalSummary38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(exponentialDistribution29);
        org.junit.Assert.assertNotNull(poissonDistribution31);
        org.junit.Assert.assertNotNull(chiSquaredDistribution33);
        org.junit.Assert.assertNotNull(tDistribution35);
    }

    @Test
    public void test3450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3450");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 100L);
        org.apache.commons.math.distribution.FDistribution fDistribution18 = distributionFactory0.createFDistribution(0.9646641462260455d, (double) 120);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory0.createChiSquareDistribution((double) (byte) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution21 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution24 = distributionFactory0.createBinomialDistribution(100, 0.003594758625082406d);
        binomialDistribution24.setNumberOfTrials((int) (short) 10);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertNotNull(fDistribution18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
        org.junit.Assert.assertNotNull(normalDistribution21);
        org.junit.Assert.assertNotNull(binomialDistribution24);
    }

    @Test
    public void test3451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3451");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        gammaDistribution9.setAlpha(100.0d);
        double double12 = gammaDistribution9.getAlpha();
        gammaDistribution9.setBeta((double) 100L);
        gammaDistribution9.setAlpha(Double.POSITIVE_INFINITY);
        double double17 = gammaDistribution9.getAlpha();
        double double20 = gammaDistribution9.cumulativeProbability(9.266631341249231E-194d, 34.99999999999999d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test3452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3452");
        java.util.Locale locale1 = new java.util.Locale("Chinesisch (China)");
        java.lang.String str2 = locale1.getDisplayCountry();
        java.lang.String str3 = locale1.getDisplayScript();
        java.lang.String str4 = locale1.getDisplayCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "chinesisch (china)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test3453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3453");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream1.println('#');
        java.io.PrintStream printStream61 = new java.io.PrintStream("French (France)");
        printStream61.println((float) (short) -1);
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Locale[] localeArray75 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList76);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 1, mathException70, (byte) 0, localeList78, 1225.0d };
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", objArray80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("de", objArray80);
        java.io.PrintStream printStream83 = printStream61.printf(locale64, "hi!", objArray80);
        byte[] byteArray89 = new byte[] { (byte) -1, (byte) 1, (byte) 0, (byte) 10, (byte) -1 };
        printStream83.write(byteArray89);
        printStream1.write(byteArray89);
        java.io.PrintStream printStream93 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.print(0.0d);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream83);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-1, 1, 0, 10, -1]");
    }

    @Test
    public void test3454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3454");
        java.util.Locale locale2 = new java.util.Locale("zh", "zh-CN");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale2);
        boolean boolean5 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "zh_ZH-CN");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test3455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3455");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        int int8 = pascalDistribution6.inverseCumulativeProbability(0.24999999999999964d);
        pascalDistribution6.setNumberOfSuccesses((int) '4');
        pascalDistribution6.setNumberOfSuccesses(97);
        // The following exception was thrown during execution in test generation
        try {
            pascalDistribution6.setProbabilityOfSuccess(1.0000000000000009d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483646 + "'", int8 == 2147483646);
    }

    @Test
    public void test3456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3456");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution29 = distributionFactory23.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution31 = distributionFactory23.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution33 = distributionFactory23.createChiSquareDistribution(0.6321205588285574d);
        org.apache.commons.math.distribution.TDistribution tDistribution35 = distributionFactory23.createTDistribution(0.5199388058383725d);
        tTestImpl1.setDistribution(tDistribution35);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory39 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution42 = distributionFactory39.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution43 = distributionFactory39.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution45 = distributionFactory39.createTDistribution((double) 1L);
        double double46 = tDistribution45.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution45);
        tTestImpl1.setDistribution(tDistribution45);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = tTestImpl1.tTest(statisticalSummary49, statisticalSummary50, (-9.992007221626409E-16d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -9.992007221626409E-16");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(exponentialDistribution29);
        org.junit.Assert.assertNotNull(poissonDistribution31);
        org.junit.Assert.assertNotNull(chiSquaredDistribution33);
        org.junit.Assert.assertNotNull(tDistribution35);
        org.junit.Assert.assertNotNull(distributionFactory39);
        org.junit.Assert.assertNotNull(weibullDistribution42);
        org.junit.Assert.assertNotNull(normalDistribution43);
        org.junit.Assert.assertNotNull(tDistribution45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
    }

    @Test
    public void test3457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3457");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double double13 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.max(doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.min(doubleArray17);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, 515.6999999999999d, 10, 2147483647);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = tTestImpl14.tTest((double) (-1.0f), doubleArray17, (double) 120);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 120.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test3458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3458");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        tTestImpl12.setDistribution(tDistribution21);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29, (double) '#');
        double double34 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29, (double) (byte) -1);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29, 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = tTestImpl12.tTest(0.0d, doubleArray29, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test3459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3459");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en");
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("de", objArray23);
        java.io.PrintStream printStream26 = printStream4.printf(locale7, "hi!", objArray23);
        java.io.PrintStream printStream27 = printStream1.printf("FR", objArray23);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream27);
        printStream27.println((long) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream34 = printStream27.append((java.lang.CharSequence) "cinese (Cina)", (int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream27);
    }

    @Test
    public void test3460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3460");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        java.io.PrintWriter printWriter22 = printWriter8.append((java.lang.CharSequence) "org.apache.commons.math.MathException: de");
        printWriter8.println();
        printWriter8.flush();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test3461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3461");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.print((long) 'u');
        java.lang.Object[] objArray25 = null;
        java.io.PrintWriter printWriter26 = printWriter8.printf("\ud504\ub791\uc2a4", objArray25);
        printWriter8.print(false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter8.println();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter31.write("\uc911\uad6d");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter26);
    }

    @Test
    public void test3462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3462");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize((int) (byte) 10);
        double double15 = hypergeometricDistribution10.cumulativeProbability((int) 'u');
        hypergeometricDistribution10.setSampleSize((int) 'x');
        int int18 = hypergeometricDistribution10.getSampleSize();
        int int19 = hypergeometricDistribution10.getPopulationSize();
        double double21 = hypergeometricDistribution10.probability((double) (byte) 100);
        int int22 = hypergeometricDistribution10.getSampleSize();
        hypergeometricDistribution10.setPopulationSize(35);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120 + "'", int18 == 120);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 120 + "'", int22 == 120);
    }

    @Test
    public void test3463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3463");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (short) 100);
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        printStream12.println((float) (short) -1);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale[] localeArray26 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList27);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 1, mathException21, (byte) 0, localeList29, 1225.0d };
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("de", objArray31);
        java.io.PrintStream printStream34 = printStream12.printf(locale15, "hi!", objArray31);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36, (double) '#');
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        printStream34.print((java.lang.Object) doubleArray36);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray36, doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.sum(doubleArray36);
        java.io.PrintStream printStream49 = new java.io.PrintStream("French (France)");
        printStream49.println((float) (short) -1);
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Locale[] localeArray63 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList64 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList64, localeArray63);
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.util.Locale>) localeList64);
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 1, mathException58, (byte) 0, localeList66, 1225.0d };
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", objArray68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("de", objArray68);
        java.io.PrintStream printStream71 = printStream49.printf(locale52, "hi!", objArray68);
        double[] doubleArray73 = new double[] { '#' };
        double double74 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray73);
        double double75 = org.apache.commons.math.stat.StatUtils.variance(doubleArray73);
        double double77 = org.apache.commons.math.stat.StatUtils.variance(doubleArray73, (double) '#');
        double double78 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray73);
        printStream71.print((java.lang.Object) doubleArray73);
        double[] doubleArray81 = new double[] { '#' };
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray73, doubleArray81);
        double double84 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray36, doubleArray81);
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray81);
        double double86 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray81);
        double double87 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double89 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, 120, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[35.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1225.0d + "'", double74 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1225.0d + "'", double78 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[35.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1225.0d + "'", double82 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1225.0d + "'", double85 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 35.0d + "'", double87 == 35.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 35.0d + "'", double89 == 35.0d);
    }

    @Test
    public void test3464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3464");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (int) (byte) 1, (int) (byte) 100, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test3465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3465");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(statisticalSummary2, statisticalSummary3, 0.965126505523586d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.965126505523586");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3466");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.print((int) (byte) 10);
        printWriter5.print(false);
        printWriter5.print(100.0d);
        java.io.PrintWriter printWriter15 = printWriter5.append((java.lang.CharSequence) "zho");
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        java.io.PrintStream printStream21 = new java.io.PrintStream("French (France)");
        printStream21.println((float) (short) -1);
        java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream21);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream21);
        java.lang.Object obj26 = null;
        printWriter25.println(obj26);
        printWriter25.write((int) (short) 1);
        java.io.PrintStream printStream31 = new java.io.PrintStream("French (France)");
        printStream31.println((float) (short) -1);
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream31);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream31);
        char[] charArray37 = new char[] { ' ' };
        printWriter35.write(charArray37);
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.println((float) (short) -1);
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream40);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.OutputStream) printStream40);
        char[] charArray46 = new char[] { ' ' };
        printWriter44.write(charArray46);
        printWriter35.println(charArray46);
        printWriter25.write(charArray46, (int) (byte) 0, 1);
        printStream17.print(charArray46);
        printWriter15.write(charArray46);
        printWriter15.println(0.0f);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ ]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ ]");
    }

    @Test
    public void test3467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3467");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory18 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution21 = distributionFactory18.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory18.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory18.createTDistribution((double) 1L);
        double double25 = tDistribution24.getDegreesOfFreedom();
        tTestImpl17.setDistribution(tDistribution24);
        tDistribution24.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl29 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(117.0d);
        tTestImpl15.setDistribution(tDistribution24);
        org.apache.commons.math.distribution.TDistribution tDistribution33 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution33);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory35 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution38 = distributionFactory35.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory35.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory35.createTDistribution((double) 1L);
        double double42 = tDistribution41.getDegreesOfFreedom();
        tTestImpl34.setDistribution(tDistribution41);
        org.apache.commons.math.distribution.TDistribution tDistribution44 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl45 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution44);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory46 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution49 = distributionFactory46.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution50 = distributionFactory46.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution52 = distributionFactory46.createTDistribution((double) 1L);
        double double53 = tDistribution52.getDegreesOfFreedom();
        tTestImpl45.setDistribution(tDistribution52);
        tTestImpl34.setDistribution(tDistribution52);
        tTestImpl15.setDistribution(tDistribution52);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray58);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double63 = org.apache.commons.math.stat.StatUtils.product(doubleArray58);
        double double64 = org.apache.commons.math.stat.StatUtils.sum(doubleArray58);
        double double65 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray58);
        double double66 = org.apache.commons.math.stat.StatUtils.product(doubleArray58);
        double double70 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray58, (int) (short) 1, 0, (double) (short) 100);
        double[] doubleArray72 = new double[] { '#' };
        double double73 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray72);
        double double74 = org.apache.commons.math.stat.StatUtils.variance(doubleArray72);
        double double75 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray72);
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray72);
        double double77 = org.apache.commons.math.stat.StatUtils.product(doubleArray72);
        double double78 = org.apache.commons.math.stat.StatUtils.sum(doubleArray72);
        double double79 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray72);
        double double82 = org.apache.commons.math.stat.StatUtils.product(doubleArray72, 0, 1);
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray72, 10, 2147483647);
        double double86 = org.apache.commons.math.stat.StatUtils.min(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = tTestImpl15.tTest(doubleArray58, doubleArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory18);
        org.junit.Assert.assertNotNull(weibullDistribution21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory35);
        org.junit.Assert.assertNotNull(weibullDistribution38);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory46);
        org.junit.Assert.assertNotNull(weibullDistribution49);
        org.junit.Assert.assertNotNull(normalDistribution50);
        org.junit.Assert.assertNotNull(tDistribution52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 34.99999999999999d + "'", double61 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.5553480614894135d + "'", double62 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 34.99999999999999d + "'", double65 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 35.0d + "'", double66 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1225.0d + "'", double73 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 34.99999999999999d + "'", double75 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 3.5553480614894135d + "'", double76 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 35.0d + "'", double77 == 35.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 35.0d + "'", double78 == 35.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 34.99999999999999d + "'", double79 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 35.0d + "'", double82 == 35.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 35.0d + "'", double86 == 35.0d);
    }

    @Test
    public void test3468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3468");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray11 = new double[] { 'u', (short) 100 };
        double double12 = tTestImpl7.tTest(10.0d, doubleArray11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        org.apache.commons.math.distribution.TDistribution tDistribution26 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution26);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory28 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution31 = distributionFactory28.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory28.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory28.createTDistribution((double) 1L);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl27.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        tTestImpl25.setDistribution(tDistribution34);
        tTestImpl7.setDistribution(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = tTestImpl7.tTest((double) (byte) 1, statisticalSummary45, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[117.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.054800971425164935d + "'", double12 == 0.054800971425164935d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(distributionFactory28);
        org.junit.Assert.assertNotNull(weibullDistribution31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
    }

    @Test
    public void test3469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3469");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.println((float) (short) -1);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale[] localeArray23 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList24);
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 1, mathException18, (byte) 0, localeList26, 1225.0d };
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("de", objArray28);
        java.io.PrintStream printStream31 = printStream9.printf(locale12, "hi!", objArray28);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, (double) '#');
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        printStream31.print((java.lang.Object) doubleArray33);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray33, doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test3470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3470");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        fDistribution6.setNumeratorDegreesOfFreedom((double) (short) 100);
        double double11 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setNumeratorDegreesOfFreedom(52.0d);
        double double14 = fDistribution6.getNumeratorDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
    }

    @Test
    public void test3471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3471");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("eng");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "eng");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test3472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3472");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.lang.Object obj10 = null;
        printWriter9.println(obj10);
        printWriter9.write((int) (short) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        char[] charArray21 = new char[] { ' ' };
        printWriter19.write(charArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printWriter19.println(charArray30);
        printWriter9.write(charArray30, (int) (byte) 0, 1);
        printStream1.print(charArray30);
        printStream1.flush();
        printStream1.print((float) (short) 1);
        char[] charArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            printStream1.println(charArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
    }

    @Test
    public void test3473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3473");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream4 = new java.io.PrintStream("en");
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale[] localeArray21 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList22);
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 1, mathException16, (byte) 0, localeList24, 1225.0d };
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("de", objArray26);
        java.io.PrintStream printStream29 = printStream7.printf(locale10, "hi!", objArray26);
        java.io.PrintStream printStream30 = printStream4.printf("FR", objArray26);
        java.io.PrintWriter printWriter31 = printWriter1.format("zh-CN", objArray26);
        java.lang.String[] strArray35 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray35);
        java.io.PrintWriter printWriter38 = printWriter1.format("FR_FR", (java.lang.Object[]) strArray35);
        printWriter1.println(0.0f);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(printWriter38);
    }

    @Test
    public void test3474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3474");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        printWriter5.println(charArray16);
        java.io.PrintWriter printWriter20 = printWriter5.append((java.lang.CharSequence) "FRA");
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream22);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream22);
        char[] charArray28 = new char[] { ' ' };
        printWriter26.write(charArray28);
        java.io.PrintStream printStream31 = new java.io.PrintStream("French (France)");
        printStream31.println((float) (short) -1);
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream31);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream31);
        char[] charArray37 = new char[] { ' ' };
        printWriter35.write(charArray37);
        printWriter26.println(charArray37);
        java.lang.Object[] objArray41 = null;
        java.io.PrintWriter printWriter42 = printWriter26.printf("allemand", objArray41);
        printWriter42.print("de");
        java.io.PrintWriter printWriter46 = printWriter42.append('u');
        printWriter5.print((java.lang.Object) printWriter46);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ ]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ ]");
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(printWriter46);
    }

    @Test
    public void test3475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3475");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale[] localeArray8 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.List<java.util.Locale> localeList11 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale locale12 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale13.getDisplayVariant();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = locale18.getISO3Country();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.lang.String str21 = locale16.getDisplayCountry(locale18);
        java.lang.String str22 = locale13.getDisplayName(locale18);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = locale25.getISO3Country();
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleKeys();
        java.lang.String str28 = locale23.getDisplayCountry(locale25);
        java.lang.String str29 = locale13.getDisplayScript(locale25);
        java.util.Set<java.lang.String> strSet30 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet30);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strMap40);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList41, strMap42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap50 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, strMap50);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList51, strMap52);
        java.lang.String[] strArray61 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags(languageRangeList53, (java.util.Collection<java.lang.String>) strList62);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList64);
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags(languageRangeList41, (java.util.Collection<java.lang.String>) strList64);
        java.util.Locale.FilteringMode filteringMode67 = null;
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags(languageRangeList36, (java.util.Collection<java.lang.String>) strList66, filteringMode67);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList68);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap70 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList71 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap70);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeList11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u5fb7\u6587" + "'", str17, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "FRA" + "'", str19, "FRA");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "allemand" + "'", str22, "allemand");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u5fb7\u6587" + "'", str24, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "FRA" + "'", str26, "FRA");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(languageRangeList71);
    }

    @Test
    public void test3476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3476");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.println((float) (short) -1);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream9);
        printStream9.print((long) (short) 0);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream16);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream16);
        char[] charArray22 = new char[] { ' ' };
        printWriter20.write(charArray22);
        printStream9.print(charArray22);
        printStream1.println(charArray22);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale[] localeArray37 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList38);
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 1, mathException32, (byte) 0, localeList40, 1225.0d };
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("de", objArray42);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", objArray42, (java.lang.Throwable) mathException46);
        java.io.PrintStream printStream48 = printStream1.format("Chinesisch (China)", objArray42);
        printStream48.println((float) (byte) 0);
        java.util.Locale locale51 = null;
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream57 = new java.io.PrintStream("en");
        java.io.PrintStream printStream60 = new java.io.PrintStream("French (France)");
        printStream60.println((float) (short) -1);
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.util.Locale[] localeArray74 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList75 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList75, localeArray74);
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, (java.util.Collection<java.util.Locale>) localeList75);
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 1, mathException69, (byte) 0, localeList77, 1225.0d };
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", objArray79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("de", objArray79);
        java.io.PrintStream printStream82 = printStream60.printf(locale63, "hi!", objArray79);
        java.io.PrintStream printStream83 = printStream57.printf("FR", objArray79);
        java.io.PrintWriter printWriter84 = printWriter54.format("zh-CN", objArray79);
        java.lang.String[] strArray88 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray88);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray88);
        java.io.PrintWriter printWriter91 = printWriter54.format("FR_FR", (java.lang.Object[]) strArray88);
        java.io.PrintStream printStream92 = printStream48.format(locale51, "Italienisch", (java.lang.Object[]) strArray88);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ ]");
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(printStream83);
        org.junit.Assert.assertNotNull(printWriter84);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(printWriter91);
        org.junit.Assert.assertNotNull(printStream92);
    }

    @Test
    public void test3477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3477");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom((double) 10);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test3478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3478");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        cauchyDistribution6.setScale((double) (short) 1);
        double double10 = cauchyDistribution6.inverseCumulativeProbability((double) (short) 0);
        cauchyDistribution6.setScale((double) 'a');
        cauchyDistribution6.setScale(2.2288027128982685E-37d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.NEGATIVE_INFINITY + "'", double10 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test3479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3479");
        java.util.Locale locale3 = new java.util.Locale("KOR", "Chinesisch (China)", "\uc601\uc5b4");
        java.util.Locale.setDefault(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4");
    }

    @Test
    public void test3480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3480");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution29 = distributionFactory23.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution31 = distributionFactory23.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution33 = distributionFactory23.createChiSquareDistribution(0.6321205588285574d);
        org.apache.commons.math.distribution.TDistribution tDistribution35 = distributionFactory23.createTDistribution(0.5199388058383725d);
        tTestImpl1.setDistribution(tDistribution35);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38);
        double double41 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.sum(doubleArray38);
        double double45 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray38);
        double double46 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double[] doubleArray48 = new double[] { '#' };
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48, (double) '#');
        double double53 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.sum(doubleArray48);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48, (double) (short) 100);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double58 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray38, doubleArray48);
        double double59 = org.apache.commons.math.stat.StatUtils.sum(doubleArray38);
        double[] doubleArray61 = new double[] { '#' };
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray61);
        double double65 = org.apache.commons.math.stat.StatUtils.variance(doubleArray61, 1, 0);
        double double66 = org.apache.commons.math.stat.StatUtils.variance(doubleArray61);
        double[] doubleArray68 = new double[] { '#' };
        double double69 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68);
        double double71 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray68);
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double double73 = org.apache.commons.math.stat.StatUtils.sum(doubleArray68);
        double double74 = org.apache.commons.math.stat.StatUtils.max(doubleArray68);
        double double75 = org.apache.commons.math.stat.StatUtils.min(doubleArray68);
        double double76 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68);
        double[] doubleArray78 = new double[] { '#' };
        double double79 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray78);
        double double80 = org.apache.commons.math.stat.StatUtils.variance(doubleArray78);
        double double81 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray78);
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray78);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray78);
        double double84 = org.apache.commons.math.stat.StatUtils.sum(doubleArray78);
        double[] doubleArray86 = new double[] { '#' };
        double double87 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray86);
        double double90 = org.apache.commons.math.stat.StatUtils.variance(doubleArray86, 1, 0);
        double double91 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray86);
        double double92 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray78, doubleArray86);
        double double93 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray68, doubleArray86);
        double double95 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray68, (double) 10);
        double double96 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray61, doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = tTestImpl1.pairedTTest(doubleArray38, doubleArray61, (-13.607141222220143d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -13.607141222220143");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(exponentialDistribution29);
        org.junit.Assert.assertNotNull(poissonDistribution31);
        org.junit.Assert.assertNotNull(chiSquaredDistribution33);
        org.junit.Assert.assertNotNull(tDistribution35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 34.99999999999999d + "'", double41 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 3.5553480614894135d + "'", double42 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 34.99999999999999d + "'", double45 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1225.0d + "'", double53 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 3.5553480614894135d + "'", double57 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 35.0d + "'", double59 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1225.0d + "'", double62 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1225.0d + "'", double69 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 34.99999999999999d + "'", double71 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 3.5553480614894135d + "'", double72 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 35.0d + "'", double73 == 35.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 35.0d + "'", double74 == 35.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 35.0d + "'", double75 == 35.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[35.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1225.0d + "'", double79 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 34.99999999999999d + "'", double81 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3.5553480614894135d + "'", double82 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 35.0d + "'", double83 == 35.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 35.0d + "'", double84 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[35.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1225.0d + "'", double87 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 34.99999999999999d + "'", double91 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 35.0d + "'", double95 == 35.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test3481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3481");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double10 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (int) (short) 0, (int) (byte) 0);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double19 = org.apache.commons.math.stat.StatUtils.min(doubleArray12);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double27 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray22);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30, 1, 0);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        double double36 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray22, doubleArray30);
        double double37 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray12, doubleArray30);
        double double38 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray30);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test3482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3482");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        java.io.PrintStream printStream50 = new java.io.PrintStream("zho");
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream57 = printStream50.printf("Italienisch", (java.lang.Object[]) strArray54);
        java.io.PrintWriter printWriter58 = printWriter47.printf("ITA", (java.lang.Object[]) strArray54);
        boolean boolean59 = printWriter58.checkError();
        printWriter58.println();
        printWriter58.print((double) 1);
        printWriter58.println((long) 52);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test3483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3483");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, 17, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
    }

    @Test
    public void test3484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3484");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 100L);
        gammaDistribution15.setAlpha((double) 2147483646);
        double double18 = gammaDistribution15.getAlpha();
        double double19 = gammaDistribution15.getAlpha();
        gammaDistribution15.setAlpha((double) '#');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2.147483646E9d + "'", double18 == 2.147483646E9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.147483646E9d + "'", double19 == 2.147483646E9d);
    }

    @Test
    public void test3485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3485");
        java.util.Locale locale2 = new java.util.Locale("Chinese (Taiwan)", "Italian");
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale3.getDisplayLanguage(locale4);
        java.lang.String str7 = locale2.getDisplayVariant(locale4);
        org.junit.Assert.assertEquals(locale2.toString(), "chinese (taiwan)_ITALIAN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italienisch" + "'", str6, "Italienisch");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test3486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3486");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("zho");
        java.util.Locale locale6 = builder5.build();
        org.apache.commons.math.distribution.DistributionFactory distributionFactory7 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution9 = distributionFactory7.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution11 = distributionFactory7.createChiSquareDistribution((double) (short) 1);
        boolean boolean12 = locale6.equals((java.lang.Object) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "german__#u-zho");
        org.junit.Assert.assertNotNull(distributionFactory7);
        org.junit.Assert.assertNotNull(chiSquaredDistribution9);
        org.junit.Assert.assertNotNull(chiSquaredDistribution11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3487");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.DistributionFactory distributionFactory1 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution4 = distributionFactory1.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution7 = distributionFactory1.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution10 = distributionFactory1.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution12 = distributionFactory1.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution12);
        org.apache.commons.math.distribution.TDistribution tDistribution14 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution14);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double23 = tDistribution22.getDegreesOfFreedom();
        tTestImpl15.setDistribution(tDistribution22);
        tDistribution22.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl29 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        tTestImpl13.setDistribution(tDistribution22);
        tTestImpl0.setDistribution(tDistribution22);
        double[] doubleArray32 = null;
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double42 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray34, (double) (short) 100);
        double double43 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double44 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34, 0, 0);
        double double48 = org.apache.commons.math.stat.StatUtils.min(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = tTestImpl0.tTest(doubleArray32, doubleArray34, 3.5080495063977146E-4d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory1);
        org.junit.Assert.assertNotNull(weibullDistribution4);
        org.junit.Assert.assertNotNull(fDistribution7);
        org.junit.Assert.assertNotNull(normalDistribution10);
        org.junit.Assert.assertNotNull(tDistribution12);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.5553480614894135d + "'", double38 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 34.99999999999999d + "'", double44 == 34.99999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
    }

    @Test
    public void test3488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3488");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution10 = distributionFactory0.createPoissonDistribution(0.691462461274013d);
        double double11 = poissonDistribution10.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertNotNull(poissonDistribution10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.691462461274013d + "'", double11 == 0.691462461274013d);
    }

    @Test
    public void test3489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3489");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution10 = distributionFactory0.createChiSquareDistribution(0.6321205588285574d);
        org.apache.commons.math.distribution.TDistribution tDistribution12 = distributionFactory0.createTDistribution(0.5199388058383725d);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution14 = distributionFactory0.createChiSquareDistribution(0.003594758625082406d);
        double double15 = chiSquaredDistribution14.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(chiSquaredDistribution10);
        org.junit.Assert.assertNotNull(tDistribution12);
        org.junit.Assert.assertNotNull(chiSquaredDistribution14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.003594758625082406d + "'", double15 == 0.003594758625082406d);
    }

    @Test
    public void test3490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3490");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) (short) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test3491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3491");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        byte[] byteArray6 = new byte[] {};
        printStream5.write(byteArray6);
        printStream1.write(byteArray6);
        printStream1.println();
        printStream1.println('#');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test3492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3492");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        printWriter18.print("org.apache.commons.math.MathException: de");
        printWriter18.println((float) 100);
        printWriter18.print("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        java.util.Locale locale27 = java.util.Locale.US;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 1, mathException35, (byte) 0, localeList43, 1225.0d };
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("de", objArray45);
        java.io.PrintWriter printWriter48 = printWriter18.format(locale28, "Franz\366sisch (Frankreich)", objArray45);
        java.lang.String str49 = locale28.getVariant();
        java.lang.String str50 = locale28.getVariant();
        java.lang.String str51 = locale28.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4" + "'", str29, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test3493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3493");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream6 = new java.io.PrintStream("French (France)");
        printStream6.println((float) (short) -1);
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale[] localeArray20 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList21);
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 1, mathException15, (byte) 0, localeList23, 1225.0d };
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("de", objArray25);
        java.io.PrintStream printStream28 = printStream6.printf(locale9, "hi!", objArray25);
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.lang.String str30 = locale9.getDisplayLanguage(locale29);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale9.getDisplayVariant(locale31);
        java.lang.String str33 = locale9.toLanguageTag();
        java.lang.String str34 = locale9.getDisplayLanguage();
        java.lang.String str35 = locale4.getDisplayLanguage(locale9);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str30, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Italian" + "'", str34, "Italian");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test3494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3494");
        java.io.PrintStream printStream1 = new java.io.PrintStream("und");
    }

    @Test
    public void test3495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3495");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution13 = distributionFactory0.createNormalDistribution();
        normalDistribution13.setMean((double) 100L);
        normalDistribution13.setMean((double) '4');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution13);
    }

    @Test
    public void test3496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3496");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        fDistribution6.setNumeratorDegreesOfFreedom((double) (short) 100);
        double double11 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setNumeratorDegreesOfFreedom(52.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 100);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
    }

    @Test
    public void test3497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3497");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str4 = locale1.toLanguageTag();
        java.lang.String str5 = locale1.getCountry();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getDisplayScript();
        java.lang.String str9 = locale1.getDisplayLanguage(locale6);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FRA" + "'", str7, "FRA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test3498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3498");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale0.getDisplayScript(locale4);
        java.lang.String str7 = locale4.getScript();
        java.lang.String str8 = locale4.getDisplayLanguage();
        java.lang.String str9 = locale4.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test3499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3499");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.println("zh");
        printStream4.print("hi!");
        printStream4.close();
        java.util.Locale locale10 = null;
        java.lang.String[] strArray12 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream13 = printStream4.format(locale10, "France", (java.lang.Object[]) strArray12);
        printStream13.write((int) 'a');
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, 1, 0);
        double double38 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double42 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray17, doubleArray25);
        double double46 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray25, (int) (byte) 1, (int) (short) 0, 10.0d);
        printStream13.println((java.lang.Object) (byte) 1);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 34.99999999999999d + "'", double38 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test3500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3500");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double10 = poissonDistribution8.cumulativeProbability((int) '#');
        double double13 = poissonDistribution8.cumulativeProbability(0, (int) 'x');
        double double14 = poissonDistribution8.getMean();
        double double16 = poissonDistribution8.probability(117.0d);
        double double18 = poissonDistribution8.probability(117.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 9.266631341249231E-194d + "'", double16 == 9.266631341249231E-194d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 9.266631341249231E-194d + "'", double18 == 9.266631341249231E-194d);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("allemand", (double) 0L);
        boolean boolean4 = languageRange2.equals((java.lang.Object) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, (int) (short) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra", (double) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=120.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, (double) '#');
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.sum(doubleArray19);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, 1, 0);
        double double32 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray19, doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = tTestImpl1.tTest(doubleArray12, doubleArray19, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 34.99999999999999d + "'", double32 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.5553480614894135d + "'", double34 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) 1L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 'a', 35.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution(0.0d, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 100L);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter12.println(true);
        // The following exception was thrown during execution in test generation
        try {
            printWriter12.write("org.apache.commons.math.MathException: ", 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 45");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl1.homoscedasticTTest(statisticalSummary23, statisticalSummary24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'x', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getUnicodeLocaleType("german");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: german");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double20 = tTestImpl12.tTest((double) (short) 100, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl7.t(statisticalSummary21, statisticalSummary22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setNumberOfSuccesses(10);
        double double13 = pascalDistribution6.getProbabilityOfSuccess();
        double double15 = pascalDistribution6.cumulativeProbability(100);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = pascalDistribution6.cumulativeProbability((int) 'a', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution6 = distributionFactory0.createBinomialDistribution(0, 515.7000000000007d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double) 10.0f);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) 'x');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution11 = distributionFactory0.createBinomialDistribution((int) (byte) -1, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of trials must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.println((float) (short) -1);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream9);
        printStream9.print((long) (short) 0);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream16);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream16);
        char[] charArray22 = new char[] { ' ' };
        printWriter20.write(charArray22);
        printStream9.print(charArray22);
        printStream1.println(charArray22);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale[] localeArray37 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList38);
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 1, mathException32, (byte) 0, localeList40, 1225.0d };
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("de", objArray42);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", objArray42, (java.lang.Throwable) mathException46);
        java.io.PrintStream printStream48 = printStream1.format("Chinesisch (China)", objArray42);
        java.io.PrintStream printStream50 = new java.io.PrintStream("French (France)");
        printStream50.println((float) (short) -1);
        java.io.PrintStream printStream53 = new java.io.PrintStream((java.io.OutputStream) printStream50);
        printStream50.print((long) (short) 0);
        java.io.PrintStream printStream57 = new java.io.PrintStream("French (France)");
        printStream57.println((float) (short) -1);
        java.io.PrintStream printStream60 = new java.io.PrintStream((java.io.OutputStream) printStream57);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.OutputStream) printStream57);
        char[] charArray63 = new char[] { ' ' };
        printWriter61.write(charArray63);
        printStream50.print(charArray63);
        printStream48.println(charArray63);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream69 = new java.io.PrintStream((java.io.OutputStream) printStream48, true, "USA");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: USA");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ ]");
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ ]");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(0.9646641462260455d, statisticalSummary3, 0.24999999999999964d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        double double9 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom((double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            fDistribution6.setNumeratorDegreesOfFreedom((double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintStream printStream46 = printStream24.printf(locale27, "hi!", objArray43);
        double[] doubleArray48 = new double[] { '#' };
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48, (double) '#');
        double double53 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        printStream46.print((java.lang.Object) doubleArray48);
        double[] doubleArray56 = new double[] { '#' };
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray56);
        double double58 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray48, doubleArray56);
        double[] doubleArray60 = new double[] { '#' };
        double double61 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        double double62 = org.apache.commons.math.stat.StatUtils.variance(doubleArray60);
        double double63 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray60);
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60);
        double double65 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double double66 = org.apache.commons.math.stat.StatUtils.sum(doubleArray60);
        double double67 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray69 = new double[] { '#' };
        double double70 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray69);
        double double71 = org.apache.commons.math.stat.StatUtils.variance(doubleArray69);
        double double73 = org.apache.commons.math.stat.StatUtils.variance(doubleArray69, (double) '#');
        double double74 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray69);
        double double75 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray69);
        double double76 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray56, doubleArray60);
        double[] doubleArray82 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double83 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = org.apache.commons.math.stat.StatUtils.variance(doubleArray82, (double) (byte) 100);
        double double86 = org.apache.commons.math.stat.StatUtils.sum(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = tTestImpl1.pairedTTest(doubleArray56, doubleArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1225.0d + "'", double53 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1225.0d + "'", double57 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1225.0d + "'", double61 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 34.99999999999999d + "'", double63 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 3.5553480614894135d + "'", double64 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 35.0d + "'", double65 == 35.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 35.0d + "'", double66 == 35.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 35.0d + "'", double67 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1225.0d + "'", double70 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1225.0d + "'", double74 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 52.0d + "'", double83 == 52.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 515.7000000000007d + "'", double85 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 61.0d + "'", double86 == 61.0d);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "de", 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 32");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.print((long) ' ');
        printStream4.print((-1L));
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream10, false);
        java.io.PrintStream printStream16 = new java.io.PrintStream("zh-CN");
        printStream16.print('a');
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.print((long) ' ');
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        byte[] byteArray25 = new byte[] {};
        printStream24.write(byteArray25);
        printStream20.write(byteArray25);
        printStream16.write(byteArray25);
        printStream14.write(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            printStream4.write(byteArray25, (int) 'u', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double double18 = org.apache.commons.math.stat.StatUtils.sum(doubleArray13);
        double double19 = org.apache.commons.math.stat.StatUtils.max(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = tTestImpl1.t((double) (-1L), doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.5553480614894135d + "'", double17 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.min(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        java.io.PrintStream printStream3 = new java.io.PrintStream("French (France)");
        printStream3.println((float) (short) -1);
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale[] localeArray17 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList18);
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 1, mathException12, (byte) 0, localeList20, 1225.0d };
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("de", objArray22);
        java.io.PrintStream printStream25 = printStream3.printf(locale6, "hi!", objArray22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, (double) '#');
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        printStream25.print((java.lang.Object) doubleArray27);
        double[] doubleArray35 = new double[] { '#' };
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray27, doubleArray35);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double double42 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray39);
        double double45 = org.apache.commons.math.stat.StatUtils.sum(doubleArray39);
        double double46 = org.apache.commons.math.stat.StatUtils.product(doubleArray39);
        double[] doubleArray48 = new double[] { '#' };
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48, (double) '#');
        double double53 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray39, doubleArray48);
        double double55 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray35, doubleArray39);
        double[] doubleArray61 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double62 = org.apache.commons.math.stat.StatUtils.max(doubleArray61);
        double double64 = org.apache.commons.math.stat.StatUtils.variance(doubleArray61, (double) (byte) 100);
        double double65 = org.apache.commons.math.stat.StatUtils.sum(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl1.tTest(doubleArray35, doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 34.99999999999999d + "'", double42 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 3.5553480614894135d + "'", double43 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1225.0d + "'", double53 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 52.0d + "'", double62 == 52.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 515.7000000000007d + "'", double64 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 61.0d + "'", double65 == 61.0d);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl12.tTest((double) 1L, statisticalSummary14, Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -Infinity");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        double[] doubleArray5 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5, (double) (byte) 100);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray5);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray11);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11, 1225.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray5, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 515.7000000000007d + "'", double8 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 61.0d + "'", double9 == 61.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.5553480614894135d + "'", double15 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.5553480614894135d + "'", double17 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale locale7 = builder0.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "france");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.lang.String str9 = locale7.getDisplayLanguage();
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        printStream12.println((float) (short) -1);
        printStream12.println(' ');
        printStream12.print(false);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream12);
        java.io.PrintWriter printWriter21 = printWriter19.append(' ');
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.getDisplayVariant();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale25.getDisplayName();
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = locale27.getISO3Country();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.lang.String str30 = locale25.getDisplayCountry(locale27);
        java.lang.String str31 = locale22.getDisplayName(locale27);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale[] localeArray42 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList43);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 1, mathException37, (byte) 0, localeList45, 1225.0d };
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", objArray47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("de", objArray47);
        java.io.PrintWriter printWriter50 = printWriter21.printf(locale22, "zho", objArray47);
        java.io.PrintStream printStream51 = printStream4.format(locale7, "fra", objArray47);
        java.lang.String str52 = locale7.getLanguage();
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "German" + "'", str9, "German");
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "German" + "'", str26, "German");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "FRA" + "'", str28, "FRA");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "allemand" + "'", str31, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "de" + "'", str52, "de");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "\ub3c5\uc77c\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ????????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            pascalDistribution6.setNumberOfSuccesses((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.setLanguageTag("fr_FR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: fr_FR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.sum(doubleArray12);
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double26 = org.apache.commons.math.stat.StatUtils.sum(doubleArray21);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21, 1225.0d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = tTestImpl1.tTest(doubleArray12, doubleArray21, 0.03172551743055352d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 3.5553480614894135d + "'", double25 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.Object obj1 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "zh");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "zh");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "zh");
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = tTestImpl14.tTest(61.0d, statisticalSummary16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, 1, 0);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray15, doubleArray23);
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, 1, 0);
        double double46 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray41);
        double double47 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray33, doubleArray41);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double49 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = tTestImpl13.pairedT(doubleArray15, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.5553480614894135d + "'", double30 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.5553480614894135d + "'", double37 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 34.99999999999999d + "'", double46 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.5553480614894135d + "'", double48 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 34.99999999999999d + "'", double49 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.Class<?> wildcardClass3 = locale0.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) '#', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray24);
        double double31 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double32 = org.apache.commons.math.stat.StatUtils.min(doubleArray24);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl1.tTest(doubleArray24, doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.5553480614894135d + "'", double28 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale[] localeArray12 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList13);
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 1, mathException7, (byte) 0, localeList15, 1225.0d };
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("de", objArray17);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray17, (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("und", objArray17, (java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("\uc601\uc5b4", (java.lang.Throwable) mathException25);
        java.lang.String str27 = mathException26.toString();
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc601\uc5b4" + "'", str27, "\uc601\uc5b4");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl1.tTest((double) 0.0f, statisticalSummary24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("allemand", (double) 0L);
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("und");
        boolean boolean5 = languageRange2.equals((java.lang.Object) "und");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution12 = distributionFactory0.createFDistribution((double) 'x', (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22, 1, 0);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray14, doubleArray22);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double37 = org.apache.commons.math.stat.StatUtils.product(doubleArray32);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray32);
        double double39 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double double42 = org.apache.commons.math.stat.StatUtils.min(doubleArray32, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = tTestImpl12.pairedTTest(doubleArray14, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 34.99999999999999d + "'", double39 == 34.99999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl15.t(0.03172551743055352d, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22, 1, 0);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray14, doubleArray22);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31, (double) '#');
        double double36 = org.apache.commons.math.stat.StatUtils.min(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = tTestImpl12.homoscedasticT(doubleArray14, doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\ud504\ub791\uc2a4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, (double) '#');
        double double28 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = tTestImpl13.homoscedasticTTest(doubleArray15, doubleArray23, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl12.tTest(statisticalSummary13, statisticalSummary14, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, 1225.0d);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, 1, 0);
        double double38 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double41 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44, 1, 0);
        double double50 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray44, (double) (byte) 100);
        double double51 = org.apache.commons.math.stat.StatUtils.mean(doubleArray44);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double53 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = tTestImpl13.homoscedasticT(doubleArray15, doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 34.99999999999999d + "'", double38 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 34.99999999999999d + "'", double41 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.t(statisticalSummary13, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            pascalDistribution6.setProbabilityOfSuccess(120.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = tTestImpl14.tTest(statisticalSummary15, statisticalSummary16, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double5 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray2);
        double double8 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, 1, 0);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray2, doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2, (double) (short) 0);
        double[] doubleArray22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl0.pairedTTest(doubleArray2, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 34.99999999999999d + "'", double5 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.5553480614894135d + "'", double6 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.5553480614894135d + "'", double17 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(0.0d, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double5 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, 1, 0);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, 1, 0);
        double double34 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray28, (double) (byte) 100);
        double double35 = org.apache.commons.math.stat.StatUtils.mean(doubleArray28);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double37 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = tTestImpl0.tTest(doubleArray2, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 34.99999999999999d + "'", double5 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.5553480614894135d + "'", double6 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.min(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.pairedTTest(doubleArray3, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.5553480614894135d + "'", double14 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double5 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray2);
        double double8 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, 1, 0);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray2, doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2, (double) (short) 0);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double28 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.sum(doubleArray23);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31, 1, 0);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray23, doubleArray31);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double39 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42, 1, 0);
        double double48 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray42, (double) (byte) 100);
        double double49 = org.apache.commons.math.stat.StatUtils.mean(doubleArray42);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42);
        double double51 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray23, doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = tTestImpl0.tTest(doubleArray2, doubleArray23, 8.999999999999998d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 8.999999999999998");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 34.99999999999999d + "'", double5 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.5553480614894135d + "'", double6 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.5553480614894135d + "'", double17 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.5553480614894135d + "'", double38 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 34.99999999999999d + "'", double39 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "\u65e5\u6587");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        normalDistribution4.setStandardDeviation(35.0d);
        java.lang.Class<?> wildcardClass7 = normalDistribution4.getClass();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double double32 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray25, doubleArray34, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 34.99999999999999d + "'", double32 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.5553480614894135d + "'", double38 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 3.5553480614894135d + "'", double39 == 3.5553480614894135d);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 'u');
        printStream1.println((long) (byte) 10);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.println((int) (short) 100);
        java.io.PrintStream printStream25 = new java.io.PrintStream("French (France)");
        printStream25.println((float) (short) -1);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream25);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream25);
        char[] charArray31 = new char[] { ' ' };
        printWriter29.write(charArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("French (France)");
        printStream34.println((float) (short) -1);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream34);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream34);
        char[] charArray40 = new char[] { ' ' };
        printWriter38.write(charArray40);
        printWriter29.println(charArray40);
        printWriter29.println((int) (short) 0);
        char[] charArray46 = new char[] { '4' };
        printWriter29.println(charArray46);
        printWriter8.print((java.lang.Object) printWriter29);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter8.print(true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ ]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4]");
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (int) 'u', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl1.tTest(1.0d, statisticalSummary24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "org.apache.commons.math.MathException: allemand");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: allemand");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        printStream12.println((float) (short) -1);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale[] localeArray26 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList27);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 1, mathException21, (byte) 0, localeList29, 1225.0d };
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("de", objArray31);
        java.io.PrintStream printStream34 = printStream12.printf(locale15, "hi!", objArray31);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36, (double) '#');
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        printStream34.print((java.lang.Object) doubleArray36);
        double double43 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray36);
        double[] doubleArray45 = new double[] { '#' };
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45, 1, 0);
        double double51 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray45, (double) (byte) 100);
        double double52 = org.apache.commons.math.stat.StatUtils.mean(doubleArray45);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = tTestImpl1.homoscedasticT(doubleArray36, doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 34.99999999999999d + "'", double43 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale[] localeArray69 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 1, mathException64, (byte) 0, localeList72, 1225.0d };
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("de", objArray74);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", objArray74, (java.lang.Throwable) mathException78);
        java.io.PrintStream printStream80 = printStream57.format("", objArray74);
        printStream57.println((float) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream86 = printStream57.append((java.lang.CharSequence) "Deutsch", 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 52");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream80);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution13 = distributionFactory0.createChiSquareDistribution((double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution17 = distributionFactory0.createHypergeometricDistribution((-1), (int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: sample size must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertNotNull(chiSquaredDistribution13);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        gammaDistribution9.setAlpha(100.0d);
        double double12 = gammaDistribution9.getBeta();
        gammaDistribution9.setBeta((double) (byte) 10);
        double double15 = gammaDistribution9.getAlpha();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.println((float) 100);
        printWriter8.println(0L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder6.setScript("hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.println((float) (short) -1);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale[] localeArray23 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList24);
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 1, mathException18, (byte) 0, localeList26, 1225.0d };
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("de", objArray28);
        java.io.PrintStream printStream31 = printStream9.printf(locale12, "hi!", objArray28);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, (double) '#');
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        printStream31.print((java.lang.Object) doubleArray33);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double42 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray33, 0.9646641462260455d);
        java.io.PrintStream printStream44 = new java.io.PrintStream("French (France)");
        printStream44.println((float) (short) -1);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale[] localeArray58 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.util.Locale>) localeList59);
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 1, mathException53, (byte) 0, localeList61, 1225.0d };
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("hi!", objArray63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("de", objArray63);
        java.io.PrintStream printStream66 = printStream44.printf(locale47, "hi!", objArray63);
        double[] doubleArray68 = new double[] { '#' };
        double double69 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68);
        double double72 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68, (double) '#');
        double double73 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        printStream66.print((java.lang.Object) doubleArray68);
        double[] doubleArray76 = new double[] { '#' };
        double double77 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray76);
        double double78 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray68, doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = tTestImpl7.pairedTTest(doubleArray33, doubleArray68, 1225.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1225.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 34.99999999999999d + "'", double40 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1225.0d + "'", double69 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1225.0d + "'", double73 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[35.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1225.0d + "'", double77 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.max(doubleArray14);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20, (double) '#');
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double26 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray14, doubleArray20);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, (double) '#');
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double35 = org.apache.commons.math.stat.StatUtils.mean(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = tTestImpl12.homoscedasticTTest(doubleArray14, doubleArray28, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.tTest((double) 10, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.max(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = tTestImpl12.tTest(120.0d, doubleArray15, 3.5553480614894135d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 3.5553480614894135");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.tTest(515.7000000000007d, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.setVariant("ITA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ITA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = tTestImpl15.tTest(statisticalSummary16, statisticalSummary17, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.lang.Object obj10 = null;
        printWriter9.println(obj10);
        printWriter9.write((int) (short) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        char[] charArray21 = new char[] { ' ' };
        printWriter19.write(charArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printWriter19.println(charArray30);
        printWriter9.write(charArray30, (int) (byte) 0, 1);
        printStream1.print(charArray30);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.println((float) (short) -1);
        printStream40.println(' ');
        printStream40.print(false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream40);
        java.io.PrintWriter printWriter49 = printWriter47.append(' ');
        java.io.PrintWriter printWriter51 = printWriter49.append('u');
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale[] localeArray64 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList65);
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 1, mathException59, (byte) 0, localeList67, 1225.0d };
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("de", objArray69);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("", objArray69, (java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("und", objArray69, (java.lang.Throwable) mathException76);
        java.io.PrintWriter printWriter78 = printWriter49.printf("Deutsch", objArray69);
        java.io.PrintStream printStream79 = printStream1.printf(locale37, "Deutsch", objArray69);
        java.io.PrintStream printStream81 = new java.io.PrintStream("French (France)");
        printStream81.println((float) (short) -1);
        java.io.PrintStream printStream84 = new java.io.PrintStream((java.io.OutputStream) printStream81);
        java.io.PrintWriter printWriter85 = new java.io.PrintWriter((java.io.OutputStream) printStream81);
        char[] charArray87 = new char[] { ' ' };
        printWriter85.write(charArray87);
        printStream1.println(charArray87);
        printStream1.print(true);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[ ]");
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, 1, 0);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, 1, 0);
        double double34 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray28, (double) (byte) 100);
        double double35 = org.apache.commons.math.stat.StatUtils.mean(doubleArray28);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double37 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray28);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double double42 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = tTestImpl7.tTest(doubleArray9, doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 34.99999999999999d + "'", double42 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.homoscedasticTTest(statisticalSummary14, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = pascalDistribution6.inverseCumulativeProbability((double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.max(doubleArray24);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double35 = org.apache.commons.math.stat.StatUtils.product(doubleArray30);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray30);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38, 1, 0);
        double double43 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray30, doubleArray38);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double46 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = tTestImpl1.pairedTTest(doubleArray24, doubleArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.5553480614894135d + "'", double34 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 34.99999999999999d + "'", double43 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.5553480614894135d + "'", double45 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 34.99999999999999d + "'", double46 == 34.99999999999999d);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.homoscedasticT(statisticalSummary14, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        gammaDistribution9.setAlpha(100.0d);
        double double12 = gammaDistribution9.getAlpha();
        gammaDistribution9.setBeta((double) 100L);
        gammaDistribution9.setBeta((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            gammaDistribution9.setAlpha(Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.max(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.MathException: fra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception:fra");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution9 = distributionFactory0.createFDistribution(0.0d, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2, (double) '#');
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19, (double) '#');
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray10, doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl0.pairedTTest(doubleArray2, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1225.0d + "'", double7 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.5553480614894135d + "'", double14 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = tTestImpl15.tTest((double) (short) -1, statisticalSummary17, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl7.homoscedasticTTest(statisticalSummary8, statisticalSummary9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double5 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double[] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double9 = tTestImpl0.pairedT(doubleArray2, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 34.99999999999999d + "'", double5 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.5553480614894135d + "'", double6 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale3.getDisplayCountry(locale5);
        java.lang.String str9 = locale0.getDisplayName(locale5);
        java.lang.String str10 = locale0.getDisplayScript();
        java.lang.String str11 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "allemand" + "'", str4, "allemand");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "allemand" + "'", str9, "allemand");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        java.util.Locale locale3 = new java.util.Locale("", "zho", "org.apache.commons.math.mathexception: de");
        java.lang.Object obj4 = locale3.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "_ZHO_org.apache.commons.math.mathexception: de");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "_ZHO_org.apache.commons.math.mathexception: de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "_ZHO_org.apache.commons.math.mathexception: de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "_ZHO_org.apache.commons.math.mathexception: de");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setNumberOfSuccesses(10);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = pascalDistribution6.cumulativeProbability((double) (short) 10, 0.03172551743055352d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray6 = new double[] { '#' };
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray6);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray6, (double) '#');
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray6);
        double double13 = org.apache.commons.math.stat.StatUtils.mean(doubleArray6);
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl1.homoscedasticTTest(doubleArray3, doubleArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1225.0d + "'", double7 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.max(doubleArray0, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.print((long) 'u');
        java.lang.Object[] objArray25 = null;
        java.io.PrintWriter printWriter26 = printWriter8.printf("\ud504\ub791\uc2a4", objArray25);
        printWriter8.print(false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter29.print(false);
        printWriter29.close();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter26);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        double double9 = chiSquaredDistribution8.getDegreesOfFreedom();
        double double10 = chiSquaredDistribution8.getDegreesOfFreedom();
        chiSquaredDistribution8.setDegreesOfFreedom((double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            chiSquaredDistribution8.setDegreesOfFreedom((double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution4 = distributionFactory0.createChiSquareDistribution((double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.homoscedasticT(statisticalSummary13, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.util.Locale locale1 = new java.util.Locale("org.apache.commons.math.MathException: de");
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getDisplayVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "org.apache.commons.math.mathexception: de");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.apache.commons.math.mathexception: de" + "'", str3, "org.apache.commons.math.mathexception: de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        java.lang.Class<?> wildcardClass12 = tDistribution11.getClass();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh-CN");
        printStream1.print((long) (byte) 100);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray0, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray18 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double19 = org.apache.commons.math.stat.StatUtils.max(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, (double) (byte) 100);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray18);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24, 1, 0);
        double double30 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray24, (double) (byte) 100);
        double double31 = org.apache.commons.math.stat.StatUtils.mean(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl12.homoscedasticT(doubleArray18, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 515.7000000000007d + "'", double21 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 61.0d + "'", double22 == 61.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory6 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory6.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double10 = weibullDistribution9.getScale();
        double double11 = weibullDistribution9.getScale();
        double double12 = weibullDistribution9.getScale();
        printWriter5.println((java.lang.Object) double12);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        printStream16.println(' ');
        printStream16.print(false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream16);
        java.io.PrintWriter printWriter25 = printWriter23.append(' ');
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = locale31.getISO3Country();
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        java.lang.String str34 = locale29.getDisplayCountry(locale31);
        java.lang.String str35 = locale26.getDisplayName(locale31);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale[] localeArray46 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList47);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 1, mathException41, (byte) 0, localeList49, 1225.0d };
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("de", objArray51);
        java.io.PrintWriter printWriter54 = printWriter25.printf(locale26, "zho", objArray51);
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale57 = java.util.Locale.PRC;
        java.lang.String str58 = locale56.getDisplayName(locale57);
        java.lang.String[] strArray60 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter61 = printWriter54.format(locale56, "de", (java.lang.Object[]) strArray60);
        java.io.PrintWriter printWriter62 = printWriter5.printf("Chinesisch (China)", (java.lang.Object[]) strArray60);
        printWriter5.print(1);
        org.junit.Assert.assertNotNull(distributionFactory6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "allemand" + "'", str30, "allemand");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "FRA" + "'", str32, "FRA");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "allemand" + "'", str35, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printWriter62);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.setLanguage("org.apache.commons.math.MathException: ");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: org.apache.commons.math.MathException:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.print((long) 'u');
        java.lang.Object[] objArray25 = null;
        java.io.PrintWriter printWriter26 = printWriter8.printf("\ud504\ub791\uc2a4", objArray25);
        printWriter8.print(false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter29.println(true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter26);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "Deutsch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Deutsch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale[] localeArray29 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList30);
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 1, mathException24, (byte) 0, localeList32, 1225.0d };
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("de", objArray34);
        java.io.PrintStream printStream37 = printStream15.printf(locale18, "hi!", objArray34);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39, (double) '#');
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        printStream37.print((java.lang.Object) doubleArray39);
        double[] doubleArray47 = new double[] { '#' };
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double49 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray39, doubleArray47);
        double[] doubleArray51 = new double[] { '#' };
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray51);
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double56 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double57 = org.apache.commons.math.stat.StatUtils.sum(doubleArray51);
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double[] doubleArray60 = new double[] { '#' };
        double double61 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        double double62 = org.apache.commons.math.stat.StatUtils.variance(doubleArray60);
        double double64 = org.apache.commons.math.stat.StatUtils.variance(doubleArray60, (double) '#');
        double double65 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        double double66 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray51, doubleArray60);
        double double67 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray47, doubleArray51);
        double[] doubleArray69 = new double[] { '#' };
        double double70 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray69);
        double double71 = org.apache.commons.math.stat.StatUtils.variance(doubleArray69);
        double double72 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray69);
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray69);
        double double74 = org.apache.commons.math.stat.StatUtils.product(doubleArray69);
        double double75 = org.apache.commons.math.stat.StatUtils.sum(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = tTestImpl13.tTest(doubleArray47, doubleArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1225.0d + "'", double48 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 34.99999999999999d + "'", double54 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 3.5553480614894135d + "'", double55 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1225.0d + "'", double61 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1225.0d + "'", double65 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1225.0d + "'", double70 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 34.99999999999999d + "'", double72 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 3.5553480614894135d + "'", double73 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 35.0d + "'", double74 == 35.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 35.0d + "'", double75 == 35.0d);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = tTestImpl0.t(statisticalSummary1, statisticalSummary2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.tTest(statisticalSummary13, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(statisticalSummary2, statisticalSummary3, 117.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 117.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) '#');
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) (short) 100);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double[] doubleArray35 = new double[] { '#' };
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35, 1, 0);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray35);
        double double41 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray27, doubleArray35);
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = tTestImpl15.tTest(doubleArray17, doubleArray27, (double) 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 2.147483647E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 34.99999999999999d + "'", double40 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 3.5553480614894135d + "'", double42 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.lang.Object obj5 = locale2.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4" + "'", str3, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "ko");
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl7.t((double) (short) 100, statisticalSummary9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution13 = distributionFactory0.createChiSquareDistribution((double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution17 = distributionFactory0.createHypergeometricDistribution((int) (short) 0, (int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertNotNull(chiSquaredDistribution13);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.MathException: de", "\uc911\uad6d");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "Franz\366sisch (Frankreich)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Franzo?sisch (Frankreich)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("zh-CN", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: zh-CN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.homoscedasticT(statisticalSummary14, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getScale();
        weibullDistribution3.setScale((double) 'x');
        double double7 = weibullDistribution3.getScale();
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution3.setShape((double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 120.0d + "'", double7 == 120.0d);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        normalDistribution4.setStandardDeviation(35.0d);
        normalDistribution4.setMean((double) 10L);
        normalDistribution4.setStandardDeviation((double) 10.0f);
        normalDistribution4.setMean((double) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = normalDistribution4.inverseCumulativeProbability((double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.print((int) (byte) 10);
        printWriter5.print(false);
        printWriter5.print(100.0d);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getISO3Country();
        printWriter5.print((java.lang.Object) locale14);
        java.io.PrintWriter printWriter18 = printWriter5.append(' ');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter22 = printWriter5.append((java.lang.CharSequence) "fra", 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FRA" + "'", str15, "FRA");
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList9, strMap10);
        java.lang.String[] strArray19 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags(languageRangeList11, (java.util.Collection<java.lang.String>) strList20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList27, strMap28);
        java.lang.String[] strArray37 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags(languageRangeList29, (java.util.Collection<java.lang.String>) strList38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags(languageRangeList11, (java.util.Collection<java.lang.String>) strList38, filteringMode41);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strMap47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList48, strMap49);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, strMap57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList58, strMap59);
        java.lang.String[] strArray68 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags(languageRangeList60, (java.util.Collection<java.lang.String>) strList69);
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strList71);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags(languageRangeList48, (java.util.Collection<java.lang.String>) strList71);
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList73);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap75 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList76 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap75);
        java.util.Collection<java.util.Locale> localeCollection77 = null;
        java.util.Locale locale78 = java.util.Locale.lookup(languageRangeList4, localeCollection77);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode41.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(languageRangeList58);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(languageRangeList76);
        org.junit.Assert.assertNull(locale78);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.util.Locale locale0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(locale0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\uc911\uad6d");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream9 = printStream5.append((java.lang.CharSequence) "FRA", (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -36");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        java.io.PrintStream printStream14 = new java.io.PrintStream("French (France)");
        printStream14.println((float) (short) -1);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale[] localeArray28 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList29);
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 1, mathException23, (byte) 0, localeList31, 1225.0d };
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("de", objArray33);
        java.io.PrintStream printStream36 = printStream14.printf(locale17, "hi!", objArray33);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38, (double) '#');
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        printStream36.print((java.lang.Object) doubleArray38);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray38, doubleArray46);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double55 = org.apache.commons.math.stat.StatUtils.sum(doubleArray50);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray50);
        double double57 = org.apache.commons.math.stat.StatUtils.product(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = tTestImpl12.homoscedasticT(doubleArray46, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 34.99999999999999d + "'", double53 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3.5553480614894135d + "'", double54 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, (double) '#');
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, (double) '#');
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double19 = org.apache.commons.math.stat.StatUtils.sum(doubleArray13);
        double double21 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray13, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = tTestImpl1.pairedTTest(doubleArray3, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 34.99999999999999d + "'", double9 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 3.5553480614894135d + "'", double10 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setScript("de");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: de [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder11 = builder6.setExtension('x', "FRA");
        java.util.Locale.Builder builder12 = builder6.clear();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder12.setRegion("org.apache.commons.math.MathException: de");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: org.apache.commons.math.MathException: de [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(true);
        printStream1.print((double) (-1L));
        printStream1.println(0);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl15.tTest(statisticalSummary16, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) (short) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale locale4 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setLanguageTag("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: org.apache.commons.math.MathException: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        printStream20.println(' ');
        printStream20.print(false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getDisplayVariant();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale28.getDisplayLanguage(locale31);
        boolean boolean34 = locale28.hasExtensions();
        java.lang.Object[] objArray36 = null;
        java.io.PrintWriter printWriter37 = printWriter27.printf(locale28, "German", objArray36);
        java.io.PrintStream printStream39 = new java.io.PrintStream("French (France)");
        printStream39.println((float) (short) -1);
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream39);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        char[] charArray45 = new char[] { ' ' };
        printWriter43.write(charArray45);
        java.io.PrintStream printStream48 = new java.io.PrintStream("French (France)");
        printStream48.println((float) (short) -1);
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream48);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream48);
        char[] charArray54 = new char[] { ' ' };
        printWriter52.write(charArray54);
        printWriter43.println(charArray54);
        printWriter43.println((int) (short) 0);
        char[] charArray60 = new char[] { '4' };
        printWriter43.println(charArray60);
        printWriter37.print(charArray60);
        printWriter8.println(charArray60);
        printWriter8.println((long) (byte) 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Deutsch" + "'", str33, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ ]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ ]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[4]");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray18 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double19 = org.apache.commons.math.stat.StatUtils.max(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, (double) (byte) 100);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray18);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24, (double) '#');
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray24);
        double double32 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray24, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = tTestImpl12.pairedTTest(doubleArray18, doubleArray24, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 515.7000000000007d + "'", double21 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 61.0d + "'", double22 == 61.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = pascalDistribution6.cumulativeProbability((int) 'x', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, (-1), (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray9, (double) (short) 100);
        double double18 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 2147483647, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        java.util.Locale.Category category0 = null;
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.MathException: de");
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "org.apache.commons.math.mathexception: de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.math.mathexception: de" + "'", str4, "org.apache.commons.math.mathexception: de");
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=chinese(taiwan)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution3 = distributionFactory0.createPascalDistribution((int) (short) 0, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder11 = builder6.setExtension('x', "FRA");
        java.util.Locale.Builder builder12 = builder6.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder6.setExtension(' ', "ITA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setRegion("\u65e5\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "en");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: en");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution13 = distributionFactory0.createExponentialDistribution((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = tTestImpl0.tTest(statisticalSummary1, statisticalSummary2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = null;
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) '#');
        double double22 = org.apache.commons.math.stat.StatUtils.min(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl14.homoscedasticTTest(doubleArray15, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.print((long) 'u');
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale[] localeArray35 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList36);
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 1, mathException30, (byte) 0, localeList38, 1225.0d };
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("de", objArray40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("Chinesisch (China)", objArray40);
        java.io.PrintWriter printWriter44 = printWriter8.format("French", objArray40);
        printWriter8.write((int) 'x');
        printWriter8.println((double) '4');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter44);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream5.print((int) (short) 10);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl14.tTest((double) (short) 0, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 100L);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.print(true);
        printStream1.print(0.0d);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.flush();
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray1, doubleArray9, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.println((float) (short) -1);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream9);
        printStream9.print((long) (short) 0);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream16);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream16);
        char[] charArray22 = new char[] { ' ' };
        printWriter20.write(charArray22);
        printStream9.print(charArray22);
        printStream1.println(charArray22);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale[] localeArray37 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList38);
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 1, mathException32, (byte) 0, localeList40, 1225.0d };
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("de", objArray42);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", objArray42, (java.lang.Throwable) mathException46);
        java.io.PrintStream printStream48 = printStream1.format("Chinesisch (China)", objArray42);
        java.io.PrintStream printStream50 = new java.io.PrintStream("French (France)");
        printStream50.println((float) (short) -1);
        java.io.PrintStream printStream53 = new java.io.PrintStream((java.io.OutputStream) printStream50);
        printStream50.print((long) (short) 0);
        java.io.PrintStream printStream57 = new java.io.PrintStream("French (France)");
        printStream57.println((float) (short) -1);
        java.io.PrintStream printStream60 = new java.io.PrintStream((java.io.OutputStream) printStream57);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.OutputStream) printStream57);
        char[] charArray63 = new char[] { ' ' };
        printWriter61.write(charArray63);
        printStream50.print(charArray63);
        printStream48.println(charArray63);
        printStream48.print("Chinesisch (China)");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ ]");
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ ]");
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale0.getDisplayLanguage(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale3.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Deutsch" + "'", str5, "Deutsch");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl12.tTest((double) 10L, statisticalSummary14, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = tTestImpl1.tTest(117.0d, statisticalSummary24, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 97.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.util.Locale locale3 = new java.util.Locale("ko_KR", "French (France)", "und");
        org.junit.Assert.assertEquals(locale3.toString(), "ko_kr_FRENCH (FRANCE)_und");
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.println((int) (short) 100);
        java.io.PrintStream printStream25 = new java.io.PrintStream("French (France)");
        printStream25.println((float) (short) -1);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream25);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream25);
        char[] charArray31 = new char[] { ' ' };
        printWriter29.write(charArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("French (France)");
        printStream34.println((float) (short) -1);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream34);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream34);
        char[] charArray40 = new char[] { ' ' };
        printWriter38.write(charArray40);
        printWriter29.println(charArray40);
        printWriter29.println((int) (short) 0);
        char[] charArray46 = new char[] { '4' };
        printWriter29.println(charArray46);
        printWriter8.print((java.lang.Object) printWriter29);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter8.print((float) 'a');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ ]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4]");
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14, 1225.0d);
        double double23 = org.apache.commons.math.stat.StatUtils.max(doubleArray14);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, 1, 0);
        double double38 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double41 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44, 1, 0);
        double double50 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray44, (double) (byte) 100);
        double double51 = org.apache.commons.math.stat.StatUtils.mean(doubleArray44);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double53 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = tTestImpl12.pairedTTest(doubleArray14, doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 34.99999999999999d + "'", double38 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 34.99999999999999d + "'", double41 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24, 1, 0);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double36 = org.apache.commons.math.stat.StatUtils.product(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.sum(doubleArray31);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39, 1, 0);
        double double44 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray39);
        double double45 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray31, doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = tTestImpl1.tTest(doubleArray24, doubleArray39, 0.308537538725987d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 34.99999999999999d + "'", double44 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, 1225.0d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = tTestImpl1.pairedTTest(doubleArray12, doubleArray18, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 34.99999999999999d + "'", double21 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) '#');
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) (byte) -1);
        java.io.PrintStream printStream26 = new java.io.PrintStream("French (France)");
        printStream26.println((float) (short) -1);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 1, mathException35, (byte) 0, localeList43, 1225.0d };
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("de", objArray45);
        java.io.PrintStream printStream48 = printStream26.printf(locale29, "hi!", objArray45);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, (double) '#');
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        printStream48.print((java.lang.Object) doubleArray50);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray50, doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.sum(doubleArray50);
        java.io.PrintStream printStream63 = new java.io.PrintStream("French (France)");
        printStream63.println((float) (short) -1);
        java.util.Locale locale66 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray74 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList75 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList75, languageRangeArray74);
        java.util.Locale[] localeArray77 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList78 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList78, localeArray77);
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList75, (java.util.Collection<java.util.Locale>) localeList78);
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 1, mathException72, (byte) 0, localeList80, 1225.0d };
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("hi!", objArray82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("de", objArray82);
        java.io.PrintStream printStream85 = printStream63.printf(locale66, "hi!", objArray82);
        double[] doubleArray87 = new double[] { '#' };
        double double88 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray87);
        double double89 = org.apache.commons.math.stat.StatUtils.variance(doubleArray87);
        double double91 = org.apache.commons.math.stat.StatUtils.variance(doubleArray87, (double) '#');
        double double92 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray87);
        printStream85.print((java.lang.Object) doubleArray87);
        double[] doubleArray95 = new double[] { '#' };
        double double96 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray95);
        double double97 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray87, doubleArray95);
        double double98 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray50, doubleArray95);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = tTestImpl15.homoscedasticT(doubleArray17, doubleArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[35.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1225.0d + "'", double88 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1225.0d + "'", double92 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[35.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1225.0d + "'", double96 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        java.lang.String[] strArray42 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter44 = printWriter39.format("French", (java.lang.Object[]) strArray42);
        char[] charArray45 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter39.write(charArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printWriter44);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.print((double) (byte) 100);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        char[] charArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            printStream1.print(charArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, (double) '#');
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, (double) (short) 100);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double24 = org.apache.commons.math.stat.StatUtils.sum(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.max(doubleArray19);
        double double26 = org.apache.commons.math.stat.StatUtils.max(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = tTestImpl7.t(doubleArray9, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = null;
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.max(doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.max(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = tTestImpl14.pairedTTest(doubleArray15, doubleArray17, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = tTestImpl0.tTest((double) (short) -1, doubleArray3, 0.9646641462260455d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.9646641462260455");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "Chinesisch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Chinesisch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        double double5 = weibullDistribution3.getShape();
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution3.setShape((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution6 = distributionFactory0.createHypergeometricDistribution((int) (short) 10, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: sample size must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, (double) '#');
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray3);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double18 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray10, (double) (short) 100);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double25 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray10, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl1.pairedTTest(doubleArray3, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.5553480614894135d + "'", double14 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) 'u', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl1.homoscedasticT(statisticalSummary23, statisticalSummary24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double5 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray2);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double18 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray10, (double) (short) 100);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double25 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray10, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl0.t(doubleArray2, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 34.99999999999999d + "'", double5 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.5553480614894135d + "'", double6 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.5553480614894135d + "'", double14 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setNumeratorDegreesOfFreedom((double) (short) 10);
        double double9 = fDistribution6.getDenominatorDegreesOfFreedom();
        double double10 = fDistribution6.getDenominatorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom((double) 10);
        // The following exception was thrown during execution in test generation
        try {
            fDistribution6.setNumeratorDegreesOfFreedom(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setRegion("de");
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale9.getDisplayCountry(locale11);
        java.lang.String str15 = locale6.getDisplayName(locale11);
        java.util.Locale.Builder builder16 = builder5.setLocale(locale11);
        java.util.Locale.Builder builder17 = builder16.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder17.setScript("USA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: USA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "German" + "'", str10, "German");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FRA" + "'", str12, "FRA");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "allemand" + "'", str15, "allemand");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setRegion("de");
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale9.getDisplayCountry(locale11);
        java.lang.String str15 = locale6.getDisplayName(locale11);
        java.util.Locale.Builder builder16 = builder5.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder5.setRegion("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "German" + "'", str10, "German");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FRA" + "'", str12, "FRA");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "allemand" + "'", str15, "allemand");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray37);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double42 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double double43 = org.apache.commons.math.stat.StatUtils.sum(doubleArray37);
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) '#');
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double52 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray37, doubleArray46);
        double double53 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray33, doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33, (int) 'a', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 34.99999999999999d + "'", double40 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.5553480614894135d + "'", double41 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strMap16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList17, strMap18);
        java.lang.String[] strArray27 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strList28);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList30);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strList30, filteringMode32);
        java.lang.String str34 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap35);
        java.util.Locale.LanguageRange languageRange38 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange languageRange40 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] { languageRange38, languageRange40 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Locale locale47 = new java.util.Locale("allemand", "allemand", "");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strSet48, filteringMode49);
        java.lang.String str51 = java.util.Locale.lookupTag(languageRangeList36, (java.util.Collection<java.lang.String>) strList50);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals(locale47.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + filteringMode49 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode49.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("JPN");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList11, strMap12);
        java.lang.String[] strArray21 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags(languageRangeList13, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strMap28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList29, strMap30);
        java.lang.String[] strArray39 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags(languageRangeList31, (java.util.Collection<java.lang.String>) strList40);
        java.util.Locale.FilteringMode filteringMode43 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags(languageRangeList13, (java.util.Collection<java.lang.String>) strList40, filteringMode43);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange languageRange47 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] { languageRange47 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale[] localeArray54 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter(languageRangeList6, (java.util.Collection<java.util.Locale>) localeList57, filteringMode59);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, strMap64);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap66 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList65, strMap66);
        java.lang.String[] strArray75 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags(languageRangeList67, (java.util.Collection<java.lang.String>) strList76);
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap82 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList83 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, strMap82);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap84 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList85 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList83, strMap84);
        java.lang.String[] strArray93 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList94 = new java.util.ArrayList<java.lang.String>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList94, strArray93);
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags(languageRangeList85, (java.util.Collection<java.lang.String>) strList94);
        java.util.Locale.FilteringMode filteringMode97 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList98 = java.util.Locale.filterTags(languageRangeList67, (java.util.Collection<java.lang.String>) strList94, filteringMode97);
        java.util.List<java.util.Locale> localeList99 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList60, filteringMode97);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + filteringMode43 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode43.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNull(locale58);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode59.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(languageRangeList67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(languageRangeList83);
        org.junit.Assert.assertNotNull(languageRangeList85);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertTrue("'" + filteringMode97 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode97.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList98);
        org.junit.Assert.assertNotNull(localeList99);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(0.0d, statisticalSummary3, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = tTestImpl14.tTest(statisticalSummary15, statisticalSummary16, 3.5553480614894135d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 3.5553480614894135");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int9 = pascalDistribution6.getNumberOfSuccesses();
        int int10 = pascalDistribution6.getNumberOfSuccesses();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setRegion("anglais");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: anglais [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14, (double) '#');
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double[] doubleArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = tTestImpl12.pairedTTest(doubleArray14, doubleArray21, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println("French (France)");
        boolean boolean6 = printStream1.checkError();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u7fa9\u5927\u5229\u6587", "Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Chinese (Taiwan)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.homoscedasticTTest(statisticalSummary13, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (short) 100);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double16 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (short) -1, (int) '4', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.5553480614894135d + "'", double15 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder2.removeUnicodeLocaleAttribute("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.MathException: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setNumberOfSuccesses(10);
        double double13 = pascalDistribution6.getProbabilityOfSuccess();
        pascalDistribution6.setNumberOfSuccesses((int) '4');
        double double16 = pascalDistribution6.getProbabilityOfSuccess();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = pascalDistribution6.cumulativeProbability((int) (byte) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getLanguage();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getVariant();
        java.lang.String str5 = locale3.getDisplayLanguage();
        java.lang.String str6 = locale3.getISO3Language();
        boolean boolean7 = locale3.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "German" + "'", str1, "German");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "German" + "'", str5, "German");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "deu" + "'", str6, "deu");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution(0.36787944117144233d, (double) 2147483647);
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution12.setShape(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getDisplayVariant();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Country();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale14.getDisplayCountry(locale16);
        java.lang.String str20 = locale11.getDisplayName(locale16);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 1, mathException26, (byte) 0, localeList34, 1225.0d };
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("de", objArray36);
        java.io.PrintWriter printWriter39 = printWriter10.printf(locale11, "zho", objArray36);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        boolean boolean41 = locale40.hasExtensions();
        java.lang.String str42 = locale40.getDisplayVariant();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getDisplayName();
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = locale45.getISO3Country();
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.lang.String str48 = locale43.getDisplayCountry(locale45);
        java.lang.String str49 = locale40.getDisplayName(locale45);
        java.lang.String str50 = locale40.getDisplayScript();
        java.lang.String str51 = locale11.getDisplayScript(locale40);
        java.util.Locale locale53 = new java.util.Locale("org.apache.commons.math.MathException: de");
        java.lang.String str54 = locale53.getISO3Country();
        java.lang.String str55 = locale11.getDisplayLanguage(locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = locale53.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "German" + "'", str15, "German");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FRA" + "'", str17, "FRA");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "allemand" + "'", str20, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "German" + "'", str44, "German");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "FRA" + "'", str46, "FRA");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "allemand" + "'", str49, "allemand");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals(locale53.toString(), "org.apache.commons.math.mathexception: de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "German" + "'", str55, "German");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray16 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double17 = org.apache.commons.math.stat.StatUtils.max(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) (byte) 100);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double double27 = org.apache.commons.math.stat.StatUtils.sum(doubleArray21);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29, 1, 0);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray29);
        double double35 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray21, doubleArray29);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = tTestImpl1.tTest(doubleArray16, doubleArray21, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 515.7000000000007d + "'", double19 == 515.7000000000007d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 3.5553480614894135d + "'", double25 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter1 = new java.io.PrintWriter("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = tTestImpl12.tTest((double) (byte) 100, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl7.tTest(statisticalSummary8, statisticalSummary9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.tTest((double) 10L, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.println((int) (short) 100);
        printWriter8.print(10L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("FR", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, 1, 0);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, 1225.0d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = tTestImpl7.homoscedasticTTest(doubleArray9, doubleArray28, 97.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 97.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.5553480614894135d + "'", double34 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.t(0.9646641462260455d, statisticalSummary12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "en");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: en");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double5 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray2);
        double double8 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2);
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray2);
        double double10 = org.apache.commons.math.stat.StatUtils.min(doubleArray2);
        double double13 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2, (int) 'u', 2147483647);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24, (double) '#');
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray15, doubleArray24);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl0.t(doubleArray2, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 34.99999999999999d + "'", double5 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.5553480614894135d + "'", double6 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setNumberOfSuccesses(10);
        pascalDistribution6.setNumberOfSuccesses((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            pascalDistribution6.setProbabilityOfSuccess((double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray20 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20, (double) (byte) 100);
        double double24 = org.apache.commons.math.stat.StatUtils.sum(doubleArray20);
        double double25 = org.apache.commons.math.stat.StatUtils.mean(doubleArray20);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, (double) '#');
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, (double) (short) 100);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = tTestImpl14.t(doubleArray20, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 515.7000000000007d + "'", double23 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 61.0d + "'", double24 == 61.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12.2d + "'", double25 == 12.2d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray2, 0, 0);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray9, (double) (short) 100);
        double double18 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray2, doubleArray9);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double25 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double double26 = org.apache.commons.math.stat.StatUtils.sum(doubleArray20);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, 1, 0);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray20, doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = tTestImpl0.homoscedasticT(doubleArray9, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.io.PrintStream printStream3 = new java.io.PrintStream("French (France)");
        printStream3.println((float) (short) -1);
        printStream3.println(' ');
        printStream3.flush();
        java.util.Locale locale9 = null;
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        printStream12.println((float) (short) -1);
        java.io.PrintStream printStream15 = new java.io.PrintStream((java.io.OutputStream) printStream12);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream12);
        java.io.PrintStream printStream19 = new java.io.PrintStream("French (France)");
        printStream19.println((float) (short) -1);
        printStream19.println(' ');
        printStream19.print(false);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        java.io.PrintWriter printWriter28 = printWriter26.append(' ');
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = locale29.getDisplayVariant();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getDisplayName();
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = locale34.getISO3Country();
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleKeys();
        java.lang.String str37 = locale32.getDisplayCountry(locale34);
        java.lang.String str38 = locale29.getDisplayName(locale34);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale[] localeArray49 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList50);
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 1, mathException44, (byte) 0, localeList52, 1225.0d };
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("de", objArray54);
        java.io.PrintWriter printWriter57 = printWriter28.printf(locale29, "zho", objArray54);
        java.io.PrintWriter printWriter58 = printWriter16.printf("", objArray54);
        java.io.PrintStream printStream59 = printStream3.printf(locale9, "und", objArray54);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("fra", objArray54);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", objArray54);
        java.lang.String str62 = mathException61.getPattern();
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "German" + "'", str33, "German");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "FRA" + "'", str35, "FRA");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "allemand" + "'", str38, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        double double9 = chiSquaredDistribution8.getDegreesOfFreedom();
        double double10 = chiSquaredDistribution8.getDegreesOfFreedom();
        chiSquaredDistribution8.setDegreesOfFreedom((double) 'a');
        double double14 = chiSquaredDistribution8.inverseCumulativeProbability((double) 1L);
        chiSquaredDistribution8.setDegreesOfFreedom((double) 100);
        double double17 = chiSquaredDistribution8.getDegreesOfFreedom();
        double double18 = chiSquaredDistribution8.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + Double.POSITIVE_INFINITY + "'", double14 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.min(doubleArray10);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double25 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double double26 = org.apache.commons.math.stat.StatUtils.sum(doubleArray20);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, 1, 0);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray20, doubleArray28);
        double double35 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray10, doubleArray28);
        double double37 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray10, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = tTestImpl7.tTest((double) '#', doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.5553480614894135d + "'", double14 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double28 = tTestImpl15.homoscedasticTTest(statisticalSummary26, statisticalSummary27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.tTest(117.0d, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.tTest(statisticalSummary11, statisticalSummary12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.t(statisticalSummary13, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = tTestImpl15.tTest(0.308537538725987d, statisticalSummary27, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        double double9 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setNumeratorDegreesOfFreedom(0.9646159093607598d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42, 1, 0);
        double double47 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray42);
        double double48 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray34, doubleArray42);
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = tTestImpl15.pairedTTest(doubleArray27, doubleArray34, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.5553480614894135d + "'", double38 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 34.99999999999999d + "'", double47 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 3.5553480614894135d + "'", double49 == 3.5553480614894135d);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double28 = tTestImpl15.homoscedasticTTest(statisticalSummary26, statisticalSummary27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale0.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "French" + "'", str1, "French");
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        java.io.PrintWriter printWriter49 = printWriter5.append('#');
        printWriter49.write("hi!");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(printWriter49);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.close();
        printStream1.flush();
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double9 = poissonDistribution8.getMean();
        double double11 = poissonDistribution8.cumulativeProbability((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            poissonDistribution8.setMean(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Poisson mean must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "French (France)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: French (France)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("FRA", "org.apache.commons.math.MathException");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.sum(doubleArray19);
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray19);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, (double) '#');
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray19, doubleArray28);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = tTestImpl1.homoscedasticTTest(doubleArray12, doubleArray28, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream1.println('#');
        java.io.PrintStream printStream61 = new java.io.PrintStream("French (France)");
        printStream61.println((float) (short) -1);
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Locale[] localeArray75 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList76);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 1, mathException70, (byte) 0, localeList78, 1225.0d };
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", objArray80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("de", objArray80);
        java.io.PrintStream printStream83 = printStream61.printf(locale64, "hi!", objArray80);
        byte[] byteArray89 = new byte[] { (byte) -1, (byte) 1, (byte) 0, (byte) 10, (byte) -1 };
        printStream83.write(byteArray89);
        printStream1.write(byteArray89);
        boolean boolean92 = printStream1.checkError();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream95 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "org.apache.commons.math.MathException: allemand");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: allemand");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tedesco" + "'", str31, "tedesco");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream83);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-1, 1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 117.0d, (int) '4', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (int) 'u', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) '#');
        double double11 = fDistribution6.cumulativeProbability((double) (-1L), 35.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = fDistribution6.inverseCumulativeProbability((double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setRegion("FR");
        java.util.Locale.Builder builder12 = builder10.setLanguage("und");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder10.setScript("org.apache.commons.math.MathException: ");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: org.apache.commons.math.MathException:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter5.print('4');
        printWriter5.print('u');
        printWriter5.print((float) 'a');
        java.lang.CharSequence charSequence12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter15 = printWriter5.append(charSequence12, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 0.03172551743055352d);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double19 = org.apache.commons.math.stat.StatUtils.min(doubleArray12);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray1, doubleArray12, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.homoscedasticTTest(statisticalSummary13, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println((double) 0.0f);
        printStream1.println((float) 100L);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            exponentialDistribution6.setMean((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.print('#');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.io.PrintStream printStream1 = new java.io.PrintStream("de");
        boolean boolean2 = printStream1.checkError();
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        java.io.PrintStream printStream10 = new java.io.PrintStream("zh-CN");
        printStream10.print('a');
        java.io.PrintStream printStream14 = new java.io.PrintStream("French (France)");
        printStream14.print((long) ' ');
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        byte[] byteArray19 = new byte[] {};
        printStream18.write(byteArray19);
        printStream14.write(byteArray19);
        printStream10.write(byteArray19);
        printStream8.write(byteArray19);
        printStream1.write(byteArray19);
        java.io.PrintStream printStream26 = printStream1.append((java.lang.CharSequence) "german");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream30 = printStream26.append((java.lang.CharSequence) "\uc774\ud0c8\ub9ac\uc544", 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        printStream20.println(' ');
        printStream20.print(false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getDisplayVariant();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale28.getDisplayLanguage(locale31);
        boolean boolean34 = locale28.hasExtensions();
        java.lang.Object[] objArray36 = null;
        java.io.PrintWriter printWriter37 = printWriter27.printf(locale28, "German", objArray36);
        java.io.PrintStream printStream39 = new java.io.PrintStream("French (France)");
        printStream39.println((float) (short) -1);
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream39);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        char[] charArray45 = new char[] { ' ' };
        printWriter43.write(charArray45);
        java.io.PrintStream printStream48 = new java.io.PrintStream("French (France)");
        printStream48.println((float) (short) -1);
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream48);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream48);
        char[] charArray54 = new char[] { ' ' };
        printWriter52.write(charArray54);
        printWriter43.println(charArray54);
        printWriter43.println((int) (short) 0);
        char[] charArray60 = new char[] { '4' };
        printWriter43.println(charArray60);
        printWriter37.print(charArray60);
        printWriter8.println(charArray60);
        printWriter8.println('a');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Deutsch" + "'", str33, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ ]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ ]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[4]");
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.print('x');
        printWriter8.print((long) (short) 1);
        printWriter8.println((float) (short) 10);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("");
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        java.io.PrintWriter printWriter51 = printWriter8.format("fra", (java.lang.Object[]) throwableArray50);
        printWriter8.write((int) 'x');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JPN" + "'", str1, "JPN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ja" + "'", str2, "ja");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.homoscedasticTTest(statisticalSummary13, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, (double) '#');
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = tTestImpl7.t((double) (byte) 10, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.5553480614894135d + "'", double30 == 3.5553480614894135d);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        java.io.PrintStream printStream50 = new java.io.PrintStream("zho");
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream57 = printStream50.printf("Italienisch", (java.lang.Object[]) strArray54);
        java.io.PrintWriter printWriter58 = printWriter47.printf("ITA", (java.lang.Object[]) strArray54);
        printWriter58.println();
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tedesco" + "'", str22, "tedesco");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(printWriter58);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        printWriter5.println((-1.0d));
        printWriter5.print((int) (short) -1);
        printWriter5.println((double) '#');
        printWriter5.flush();
        java.io.PrintWriter printWriter18 = printWriter5.append(' ');
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getDisplayVariant();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale1.getDisplayLanguage(locale4);
        java.lang.String str7 = locale1.getDisplayScript();
        java.lang.String str8 = locale0.getDisplayCountry(locale1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Deutsch" + "'", str6, "Deutsch");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vereinigtes K\366nigreich" + "'", str8, "Vereinigtes K\366nigreich");
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) 1L);
        exponentialDistribution6.setMean((double) (byte) 10);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) 'u', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = org.apache.commons.math.stat.StatUtils.mean(doubleArray10, (int) 'a', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.util.Locale locale3 = new java.util.Locale("eng", "ja", "Chinesisch");
        org.junit.Assert.assertEquals(locale3.toString(), "eng_JA_Chinesisch");
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.print((long) 'u');
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale[] localeArray35 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList36);
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 1, mathException30, (byte) 0, localeList38, 1225.0d };
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("de", objArray40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("Chinesisch (China)", objArray40);
        java.io.PrintWriter printWriter44 = printWriter8.format("French", objArray40);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter44, true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter44);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.util.Locale locale2 = new java.util.Locale("hi!", "French (France)");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "hi!_FRENCH (FRANCE)");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(locale0);
        java.lang.String str2 = locale0.getScript();
        java.lang.Object obj3 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "fr_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "fr_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "fr_CA");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double double10 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4);
        double double11 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray4, 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl1.tTest(12.2d, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 34.99999999999999d + "'", double11 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.println(true);
        java.io.PrintStream printStream44 = new java.io.PrintStream("French (France)");
        printStream44.println((float) (short) -1);
        java.io.PrintStream printStream47 = new java.io.PrintStream((java.io.OutputStream) printStream44);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream44);
        char[] charArray50 = new char[] { ' ' };
        printWriter48.write(charArray50);
        java.io.PrintStream printStream53 = new java.io.PrintStream("French (France)");
        printStream53.println((float) (short) -1);
        java.io.PrintStream printStream56 = new java.io.PrintStream((java.io.OutputStream) printStream53);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.OutputStream) printStream53);
        char[] charArray59 = new char[] { ' ' };
        printWriter57.write(charArray59);
        printWriter48.println(charArray59);
        printWriter48.println((int) (short) 0);
        char[] charArray65 = new char[] { '4' };
        printWriter48.println(charArray65);
        printWriter8.println(charArray65);
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.util.Locale[] localeArray79 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.util.Locale>) localeList80);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 1, mathException74, (byte) 0, localeList82, 1225.0d };
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", objArray84);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("");
        mathException85.addSuppressed((java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException87);
        java.lang.Throwable[] throwableArray90 = mathException87.getSuppressed();
        java.io.PrintWriter printWriter91 = printWriter8.printf(locale68, "France", (java.lang.Object[]) throwableArray90);
        char[] charArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter91.write(charArray92, (int) ' ', 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ ]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[4]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(printWriter91);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        java.io.PrintWriter printWriter22 = printWriter8.append((java.lang.CharSequence) "org.apache.commons.math.MathException: de");
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter22, true);
        printWriter22.println((double) 0L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream57.print(Double.NaN);
        printStream57.print(true);
        printStream57.close();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream65 = new java.io.PrintStream((java.io.OutputStream) printStream57, true, "\ud504\ub791\uc2a4");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ???????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "allemand" + "'", str31, "allemand");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getDisplayVariant();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Country();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale14.getDisplayCountry(locale16);
        java.lang.String str20 = locale11.getDisplayName(locale16);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 1, mathException26, (byte) 0, localeList34, 1225.0d };
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("de", objArray36);
        java.io.PrintWriter printWriter39 = printWriter10.printf(locale11, "zho", objArray36);
        java.util.Locale locale42 = new java.util.Locale("hi!", "French (France)");
        java.lang.String str43 = locale11.getDisplayScript(locale42);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "allemand" + "'", str15, "allemand");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FRA" + "'", str17, "FRA");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "allemand" + "'", str20, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_FRENCH (FRANCE)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray18 = new double[] { 0.0f, Double.NaN, '4', 1, (short) 0 };
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.sum(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl12.t(doubleArray18, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, NaN, 52.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = tTestImpl12.tTest((-1.0d), doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray1 = null;
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double8 = org.apache.commons.math.stat.StatUtils.sum(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray11);
        double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray11);
        double double19 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray11, (double) (short) 100);
        double double20 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray3, doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = tTestImpl0.tTest(doubleArray1, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 3.5553480614894135d + "'", double9 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.5553480614894135d + "'", double15 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory6 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory6.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double10 = weibullDistribution9.getScale();
        double double11 = weibullDistribution9.getScale();
        double double12 = weibullDistribution9.getScale();
        printWriter5.println((java.lang.Object) double12);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        printStream16.println(' ');
        printStream16.print(false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream16);
        java.io.PrintWriter printWriter25 = printWriter23.append(' ');
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = locale31.getISO3Country();
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        java.lang.String str34 = locale29.getDisplayCountry(locale31);
        java.lang.String str35 = locale26.getDisplayName(locale31);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale[] localeArray46 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList47);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 1, mathException41, (byte) 0, localeList49, 1225.0d };
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("de", objArray51);
        java.io.PrintWriter printWriter54 = printWriter25.printf(locale26, "zho", objArray51);
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale57 = java.util.Locale.PRC;
        java.lang.String str58 = locale56.getDisplayName(locale57);
        java.lang.String[] strArray60 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter61 = printWriter54.format(locale56, "de", (java.lang.Object[]) strArray60);
        java.io.PrintWriter printWriter62 = printWriter5.printf("Chinesisch (China)", (java.lang.Object[]) strArray60);
        char[] charArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter5.print(charArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "allemand" + "'", str30, "allemand");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "FRA" + "'", str32, "FRA");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "allemand" + "'", str35, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printWriter62);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double27 = org.apache.commons.math.stat.StatUtils.min(doubleArray17, 1, 0);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29);
        double double32 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double34 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double double35 = org.apache.commons.math.stat.StatUtils.sum(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = tTestImpl15.t(doubleArray17, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 34.99999999999999d + "'", double32 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 3.5553480614894135d + "'", double33 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray22);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30, (double) '#');
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        double double37 = org.apache.commons.math.stat.StatUtils.product(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = tTestImpl7.homoscedasticT(doubleArray22, doubleArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.sum(doubleArray19);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        double double29 = org.apache.commons.math.stat.StatUtils.min(doubleArray19, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = tTestImpl12.homoscedasticTTest(doubleArray14, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.setRegion("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: org.apache.commons.math.MathException: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.println((float) (short) -1);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale[] localeArray23 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList24);
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 1, mathException18, (byte) 0, localeList26, 1225.0d };
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("de", objArray28);
        java.io.PrintStream printStream31 = printStream9.printf(locale12, "hi!", objArray28);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, (double) '#');
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        printStream31.print((java.lang.Object) doubleArray33);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray33, doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) 0L, 97, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) '#');
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl14.t((double) (-1.0f), doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.println((float) (short) -1);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale[] localeArray23 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList24);
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 1, mathException18, (byte) 0, localeList26, 1225.0d };
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("de", objArray28);
        java.io.PrintStream printStream31 = printStream9.printf(locale12, "hi!", objArray28);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, (double) '#');
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        printStream31.print((java.lang.Object) doubleArray33);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray33, doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution((double) 0, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.tTest((-13.607141222220143d), statisticalSummary12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder2.addUnicodeLocaleAttribute("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder2.setLanguageTag("hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution12 = distributionFactory0.createCauchyDistribution((double) 0, 117.0d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution15 = distributionFactory0.createWeibullDistribution((double) (byte) 10, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution18 = distributionFactory0.createPascalDistribution(1, (double) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(cauchyDistribution12);
        org.junit.Assert.assertNotNull(weibullDistribution15);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 0, 0);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray8);
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray8);
        double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray8);
        double double16 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray8, (double) (short) 100);
        double double17 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (-1), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 34.99999999999999d + "'", double11 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.5553480614894135d + "'", double12 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.addUnicodeLocaleAttribute("\uc774\ud0c8\ub9ac\uc544");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "german");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.List<java.util.Locale> localeList14 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 1, mathException6, (byte) 0, localeList14, 1225.0d };
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("de", objArray16);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", objArray16, (java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("und", objArray16, (java.lang.Throwable) mathException23);
        java.lang.Object[] objArray25 = mathException23.getArguments();
        java.lang.String str26 = mathException23.getPattern();
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localeList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "allemand" + "'", str26, "allemand");
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double9 = poissonDistribution8.getMean();
        double double11 = poissonDistribution8.normalApproximateProbability((int) (byte) 100);
        double double13 = poissonDistribution8.normalApproximateProbability((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = poissonDistribution8.inverseCumulativeProbability((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.691462461274013d + "'", double13 == 0.691462461274013d);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "zho");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zho");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl7.tTest(Double.POSITIVE_INFINITY, statisticalSummary22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = tTestImpl14.homoscedasticTTest(statisticalSummary15, statisticalSummary16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray9, (double) (short) 100);
        double double18 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getLanguage();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getVariant();
        java.lang.String str5 = locale3.getScript();
        java.lang.String str6 = locale3.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "allemand" + "'", str1, "allemand");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "de" + "'", str6, "de");
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream1.println('#');
        printStream1.print((int) (short) 0);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "allemand" + "'", str31, "allemand");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("France");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        printStream5.println(' ');
        printStream5.print(false);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter14 = printWriter12.append(' ');
        printWriter12.flush();
        boolean boolean16 = printWriter12.checkError();
        boolean boolean17 = languageRange1.equals((java.lang.Object) boolean16);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl15.tTest((double) (byte) 100, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        hypergeometricDistribution10.setPopulationSize((int) (byte) 100);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("JPN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap7);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList13, strMap14);
        java.lang.String[] strArray23 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strList24);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, strMap30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList31, strMap32);
        java.lang.String[] strArray41 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags(languageRangeList33, (java.util.Collection<java.lang.String>) strList42);
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strList42, filteringMode45);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strList46);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, strMap51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap53 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList54 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList52, strMap53);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, strMap61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap63 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList62, strMap63);
        java.lang.String[] strArray72 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags(languageRangeList64, (java.util.Collection<java.lang.String>) strList73);
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strList75);
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags(languageRangeList52, (java.util.Collection<java.lang.String>) strList75);
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strList77);
        java.lang.String str79 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList77);
        java.util.Collection<java.lang.String> strCollection80 = null;
        java.util.Locale.LanguageRange languageRange82 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange languageRange84 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange[] languageRangeArray85 = new java.util.Locale.LanguageRange[] { languageRange82, languageRange84 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList86 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList86, languageRangeArray85);
        java.util.Locale locale91 = new java.util.Locale("allemand", "allemand", "");
        java.util.Set<java.lang.String> strSet92 = locale91.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode93 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList86, (java.util.Collection<java.lang.String>) strSet92, filteringMode93);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags(languageRangeList1, strCollection80, filteringMode93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode45.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertNotNull(languageRangeList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(languageRangeList62);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(languageRangeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertEquals(locale91.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + filteringMode93 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode93.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList94);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) '#');
        double double11 = fDistribution6.cumulativeProbability((double) (-1L), 35.0d);
        fDistribution6.setNumeratorDegreesOfFreedom(35.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale2.getCountry();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.lang.String str9 = locale2.getDisplayName(locale7);
        boolean boolean10 = locale7.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        java.io.PrintStream printStream21 = new java.io.PrintStream("French (France)");
        printStream21.println((float) (short) -1);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale[] localeArray35 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList36);
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 1, mathException30, (byte) 0, localeList38, 1225.0d };
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("de", objArray40);
        java.io.PrintStream printStream43 = printStream21.printf(locale24, "hi!", objArray40);
        double[] doubleArray45 = new double[] { '#' };
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45, (double) '#');
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        printStream43.print((java.lang.Object) doubleArray45);
        double[] doubleArray53 = new double[] { '#' };
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray53);
        double double55 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray45, doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = tTestImpl15.tTest(doubleArray17, doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder11 = builder6.setExtension('x', "FRA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder6.setVariant("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ????????? (???????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = tTestImpl7.tTest(0.36787944117144233d, statisticalSummary22, 1225.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1225.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("USA", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale[] localeArray6 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList7 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList7, localeArray6);
        java.util.List<java.util.Locale> localeList9 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale[] localeArray13 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList16);
        java.util.Locale locale18 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strMap22);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, strMap30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList31, strMap32);
        java.lang.String[] strArray41 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags(languageRangeList33, (java.util.Collection<java.lang.String>) strList42);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strList44, filteringMode46);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale[] localeArray51 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter(languageRangeList23, (java.util.Collection<java.util.Locale>) localeList52);
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        boolean boolean57 = locale56.hasExtensions();
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strSet58, filteringMode59);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, strMap64);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap66 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList65, strMap66);
        java.lang.String[] strArray75 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags(languageRangeList67, (java.util.Collection<java.lang.String>) strList76);
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap82 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList83 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, strMap82);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap84 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList85 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList83, strMap84);
        java.lang.String[] strArray93 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList94 = new java.util.ArrayList<java.lang.String>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList94, strArray93);
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags(languageRangeList85, (java.util.Collection<java.lang.String>) strList94);
        java.util.Locale.FilteringMode filteringMode97 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList98 = java.util.Locale.filterTags(languageRangeList67, (java.util.Collection<java.lang.String>) strList94, filteringMode97);
        java.util.List<java.lang.String> strList99 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList60, filteringMode97);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode46.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode59.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(languageRangeList67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(languageRangeList83);
        org.junit.Assert.assertNotNull(languageRangeList85);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertTrue("'" + filteringMode97 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode97.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList98);
        org.junit.Assert.assertNotNull(strList99);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.691462461274013d, (int) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder2.setLanguage("\u7fa9\u5927\u5229\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ???? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        double double8 = tDistribution6.cumulativeProbability((-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            tDistribution6.setDegreesOfFreedom(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.24999999999999964d + "'", double8 == 0.24999999999999964d);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, 97, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 34.99999999999999d + "'", double9 == 34.99999999999999d);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale[] localeArray9 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 1, mathException4, (byte) 0, localeList12, 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("de", objArray14);
        java.lang.Throwable[] throwableArray17 = mathException16.getSuppressed();
        java.lang.String str18 = mathException16.toString();
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.MathException: de" + "'", str18, "org.apache.commons.math.MathException: de");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        char[] charArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            printStream1.println(charArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl1.homoscedasticTTest(statisticalSummary23, statisticalSummary24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution8 = distributionFactory0.createCauchyDistribution((-1.0d), 1225.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution11 = distributionFactory0.createBinomialDistribution((-1), (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of trials must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(cauchyDistribution8);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale4.getISO3Language();
        java.lang.String str6 = locale4.getDisplayName();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str8 = locale1.getDisplayLanguage(locale4);
        java.util.Set<java.lang.Character> charSet9 = locale1.getExtensionKeys();
        java.lang.String str10 = locale1.getVariant();
        java.lang.String str11 = locale1.getISO3Language();
        java.lang.String str12 = locale1.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italienisch" + "'", str3, "Italienisch");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (France)" + "'", str6, "French (France)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "allemand" + "'", str8, "allemand");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "deu" + "'", str11, "deu");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) (byte) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14, (double) '#');
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.max(doubleArray14);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.max(doubleArray22);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, (double) '#');
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray22, doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = tTestImpl12.tTest(doubleArray14, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        printWriter5.println((-1.0d));
        printWriter5.print((float) 1L);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("JPN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Collection<java.util.Locale> localeCollection4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList5 = java.util.Locale.filter(languageRangeList1, localeCollection4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 515.7d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: 515.7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution44 = distributionFactory41.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double45 = weibullDistribution44.getShape();
        weibullDistribution44.setScale((double) 100);
        printWriter8.println((java.lang.Object) weibullDistribution44);
        double double49 = weibullDistribution44.getShape();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(weibullDistribution44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.println((float) (short) -1);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream9);
        printStream9.print((long) (short) 0);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream16);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream16);
        char[] charArray22 = new char[] { ' ' };
        printWriter20.write(charArray22);
        printStream9.print(charArray22);
        printStream1.println(charArray22);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale[] localeArray37 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList38);
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 1, mathException32, (byte) 0, localeList40, 1225.0d };
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("de", objArray42);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", objArray42, (java.lang.Throwable) mathException46);
        java.io.PrintStream printStream48 = printStream1.format("Chinesisch (China)", objArray42);
        java.io.PrintStream printStream50 = new java.io.PrintStream("French (France)");
        printStream50.println((float) (short) -1);
        java.io.PrintStream printStream53 = new java.io.PrintStream((java.io.OutputStream) printStream50);
        printStream50.print((long) (short) 0);
        java.io.PrintStream printStream57 = new java.io.PrintStream("French (France)");
        printStream57.println((float) (short) -1);
        java.io.PrintStream printStream60 = new java.io.PrintStream((java.io.OutputStream) printStream57);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.OutputStream) printStream57);
        char[] charArray63 = new char[] { ' ' };
        printWriter61.write(charArray63);
        printStream50.print(charArray63);
        printStream48.println(charArray63);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream70 = printStream48.append((java.lang.CharSequence) "\uc601\uc5b4", (int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ ]");
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ ]");
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, (double) '#');
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray14, doubleArray23);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31, (double) '#');
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.sum(doubleArray31);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = tTestImpl12.tTest(doubleArray23, doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        normalDistribution4.setMean(0.0d);
        double double7 = normalDistribution4.getStandardDeviation();
        double double8 = normalDistribution4.getStandardDeviation();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = normalDistribution4.cumulativeProbability(52.0d, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) 'u', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, (double) '#');
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double25 = org.apache.commons.math.stat.StatUtils.mean(doubleArray18);
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = tTestImpl12.pairedTTest(doubleArray14, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.tTest((double) (byte) 0, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22, 1, 0);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray14, doubleArray22);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, 1, 0);
        double double39 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray33, (double) (byte) 100);
        double double40 = org.apache.commons.math.stat.StatUtils.mean(doubleArray33);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double42 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray14, doubleArray33);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double49 = org.apache.commons.math.stat.StatUtils.sum(doubleArray44);
        double double50 = org.apache.commons.math.stat.StatUtils.max(doubleArray44);
        double double51 = org.apache.commons.math.stat.StatUtils.max(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = tTestImpl12.pairedTTest(doubleArray33, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 34.99999999999999d + "'", double47 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.5553480614894135d + "'", double48 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.print('x');
        printWriter8.print((long) (short) 1);
        printWriter8.println((float) (short) 10);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("");
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        java.io.PrintWriter printWriter51 = printWriter8.format("fra", (java.lang.Object[]) throwableArray50);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter55 = printWriter8.append((java.lang.CharSequence) "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)", (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("en");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: en [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("und");
        java.lang.String str2 = locale1.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale1.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale0.getDisplayCountry(locale3);
        java.lang.String str5 = locale3.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "FRA" + "'", str1, "FRA");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "French (France)" + "'", str2, "French (France)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud504\ub791\uc2a4" + "'", str4, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        double double10 = pascalDistribution6.probability((int) 'x');
        double double12 = pascalDistribution6.probability((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            pascalDistribution6.setProbabilityOfSuccess((double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        double double10 = pascalDistribution6.probability((int) 'x');
        double double12 = pascalDistribution6.cumulativeProbability((int) (byte) 10);
        int int14 = pascalDistribution6.inverseCumulativeProbability((double) 1L);
        int int15 = pascalDistribution6.getNumberOfSuccesses();
        // The following exception was thrown during execution in test generation
        try {
            pascalDistribution6.setNumberOfSuccesses((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory26 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution29 = distributionFactory26.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution32 = distributionFactory26.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution35 = distributionFactory26.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory26.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        tTestImpl15.setDistribution(tDistribution37);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, 1, 0);
        double double47 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray41, (double) (byte) 100);
        double double48 = org.apache.commons.math.stat.StatUtils.mean(doubleArray41);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double[] doubleArray51 = new double[] { '#' };
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray51, 0, 0);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double62 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58, (double) '#');
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double64 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double65 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double66 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray51, doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = tTestImpl15.tTest(doubleArray41, doubleArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(distributionFactory26);
        org.junit.Assert.assertNotNull(weibullDistribution29);
        org.junit.Assert.assertNotNull(cauchyDistribution32);
        org.junit.Assert.assertNotNull(gammaDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1225.0d + "'", double63 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 3.5553480614894135d + "'", double65 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayLanguage(locale3);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setScript("JPN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: JPN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Italienisch" + "'", str5, "Italienisch");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        hypergeometricDistribution10.setSampleSize((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            hypergeometricDistribution10.setNumberOfSuccesses((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "Chinesisch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Chinesisch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl20 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        tTestImpl12.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = tTestImpl12.tTest(10.0d, statisticalSummary23, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = tTestImpl15.tTest((double) '#', statisticalSummary17, 515.7000000000007d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 515.7000000000007");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("allemand", (double) 0L);
        double double3 = languageRange2.getWeight();
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.println((float) (short) -1);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream9);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream9);
        java.lang.Object obj14 = null;
        printWriter13.println(obj14);
        printWriter13.write((int) (short) 1);
        java.io.PrintStream printStream19 = new java.io.PrintStream("French (France)");
        printStream19.println((float) (short) -1);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream19);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        char[] charArray25 = new char[] { ' ' };
        printWriter23.write(charArray25);
        java.io.PrintStream printStream28 = new java.io.PrintStream("French (France)");
        printStream28.println((float) (short) -1);
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream28);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream28);
        char[] charArray34 = new char[] { ' ' };
        printWriter32.write(charArray34);
        printWriter23.println(charArray34);
        printWriter13.write(charArray34, (int) (byte) 0, 1);
        printStream5.print(charArray34);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        java.io.PrintStream printStream44 = printStream5.append('#');
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        boolean boolean46 = languageRange2.equals((java.lang.Object) printWriter45);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ ]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ ]");
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream2);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream2);
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.print((long) ' ');
        java.io.PrintStream printStream13 = new java.io.PrintStream("French (France)");
        byte[] byteArray14 = new byte[] {};
        printStream13.write(byteArray14);
        printStream9.write(byteArray14);
        java.io.PrintStream printStream19 = new java.io.PrintStream("French (France)");
        printStream19.println((float) (short) -1);
        printStream19.println(' ');
        printStream19.print(false);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale27.getDisplayLanguage(locale30);
        boolean boolean33 = locale27.hasExtensions();
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter26.printf(locale27, "German", objArray35);
        java.util.Locale locale37 = null;
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale[] localeArray48 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList49);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 1, mathException43, (byte) 0, localeList51, 1225.0d };
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("de", objArray53);
        java.io.PrintWriter printWriter56 = printWriter26.printf(locale37, "zh-CN", objArray53);
        java.io.PrintStream printStream57 = printStream9.format("Chinese (Taiwan)", objArray53);
        java.io.PrintWriter printWriter58 = printWriter6.printf("Franz\366sisch (Frankreich)", objArray53);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("\u65e5\u6587", objArray53);
        java.lang.String str60 = mathException59.toString();
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Deutsch" + "'", str32, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(printWriter58);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u65e5\u6587" + "'", str60, "\u65e5\u6587");
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = tTestImpl14.tTest(1.0d, statisticalSummary16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 0, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution14 = distributionFactory0.createBinomialDistribution((int) ' ', (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, (double) '#');
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, (double) (byte) -1);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, 1, (int) (byte) 0);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.max(doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.min(doubleArray27);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray37);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double42 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double double43 = org.apache.commons.math.stat.StatUtils.sum(doubleArray37);
        double[] doubleArray45 = new double[] { '#' };
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45, 1, 0);
        double double50 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray45);
        double double51 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray37, doubleArray45);
        double double52 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray27, doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = tTestImpl13.homoscedasticTTest(doubleArray15, doubleArray27, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 34.99999999999999d + "'", double40 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.5553480614894135d + "'", double41 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 34.99999999999999d + "'", double50 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, (double) '#');
        double double23 = org.apache.commons.math.stat.StatUtils.min(doubleArray18);
        double double25 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray18, 12.2d);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl15.tTest(0.308537538725987d, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.max(doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.min(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.sum(doubleArray19);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, 1, 0);
        double double32 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray19, doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray9, doubleArray27);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double39 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.product(doubleArray36);
        double double42 = org.apache.commons.math.stat.StatUtils.sum(doubleArray36);
        double double43 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray36);
        double double46 = org.apache.commons.math.stat.StatUtils.product(doubleArray36, 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = tTestImpl7.pairedTTest(doubleArray27, doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 34.99999999999999d + "'", double32 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 34.99999999999999d + "'", double39 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 34.99999999999999d + "'", double43 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        cauchyDistribution6.setScale((double) 1.0f);
        double double10 = cauchyDistribution6.getScale();
        cauchyDistribution6.setScale((double) 'u');
        double double13 = cauchyDistribution6.getScale();
        double double14 = cauchyDistribution6.getMedian();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 117.0d + "'", double13 == 117.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl15.tTest((double) (byte) 0, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 1, mathException5, (byte) 0, localeList13, 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("");
        mathException16.addSuppressed((java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException18);
        java.lang.String[] strArray23 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("allemand", (java.lang.Object[]) strArray23);
        mathException20.addSuppressed((java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 1, mathException31, (byte) 0, localeList39, 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("");
        mathException42.addSuppressed((java.lang.Throwable) mathException44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException44);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException46);
        mathException20.addSuppressed((java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("und", (java.lang.Throwable) mathException46);
        java.lang.String str50 = mathException46.toString();
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org.apache.commons.math.MathException: fra" + "'", str50, "org.apache.commons.math.MathException: fra");
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray0, (int) 'u', 1, 3.5553480614894135d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl7.tTest(statisticalSummary21, statisticalSummary22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale4.getISO3Language();
        java.lang.String str6 = locale4.getDisplayName();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str8 = locale1.getDisplayLanguage(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = locale1.getUnicodeLocaleType("\u7fa9\u5927\u5229\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italienisch" + "'", str3, "Italienisch");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (France)" + "'", str6, "French (France)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "allemand" + "'", str8, "allemand");
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("US");
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        hypergeometricDistribution10.setSampleSize((int) (short) 1);
        hypergeometricDistribution10.setSampleSize(2147483647);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, 1, 0);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray15, doubleArray23);
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double37 = org.apache.commons.math.stat.StatUtils.product(doubleArray32);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray32);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40, 1, 0);
        double double45 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray40);
        double double46 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray32, doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = tTestImpl13.t(doubleArray15, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.5553480614894135d + "'", double30 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 34.99999999999999d + "'", double45 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl20 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        tTestImpl12.setDistribution(tDistribution19);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double28 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.sum(doubleArray23);
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        java.io.PrintStream printStream32 = new java.io.PrintStream("French (France)");
        printStream32.println((float) (short) -1);
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale[] localeArray46 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList47);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 1, mathException41, (byte) 0, localeList49, 1225.0d };
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("de", objArray51);
        java.io.PrintStream printStream54 = printStream32.printf(locale35, "hi!", objArray51);
        double[] doubleArray56 = new double[] { '#' };
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray56);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray56);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray56, (double) '#');
        double double61 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray56);
        printStream54.print((java.lang.Object) doubleArray56);
        double[] doubleArray64 = new double[] { '#' };
        double double65 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray64);
        double double66 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray56, doubleArray64);
        double[] doubleArray68 = new double[] { '#' };
        double double69 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68);
        double double71 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray68);
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double double73 = org.apache.commons.math.stat.StatUtils.product(doubleArray68);
        double double74 = org.apache.commons.math.stat.StatUtils.sum(doubleArray68);
        double double75 = org.apache.commons.math.stat.StatUtils.product(doubleArray68);
        double[] doubleArray77 = new double[] { '#' };
        double double78 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray77);
        double double79 = org.apache.commons.math.stat.StatUtils.variance(doubleArray77);
        double double81 = org.apache.commons.math.stat.StatUtils.variance(doubleArray77, (double) '#');
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray77);
        double double83 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray68, doubleArray77);
        double double84 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray64, doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = tTestImpl12.homoscedasticTTest(doubleArray23, doubleArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1225.0d + "'", double57 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1225.0d + "'", double61 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1225.0d + "'", double65 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1225.0d + "'", double69 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 34.99999999999999d + "'", double71 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 3.5553480614894135d + "'", double72 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 35.0d + "'", double73 == 35.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 35.0d + "'", double74 == 35.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 35.0d + "'", double75 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[35.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1225.0d + "'", double78 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1225.0d + "'", double82 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.t(515.7000000000007d, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray21 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double22 = org.apache.commons.math.stat.StatUtils.max(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21, (double) (byte) 100);
        double double25 = org.apache.commons.math.stat.StatUtils.sum(doubleArray21);
        double double26 = org.apache.commons.math.stat.StatUtils.mean(doubleArray21);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double35 = org.apache.commons.math.stat.StatUtils.min(doubleArray28);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38);
        double double41 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.sum(doubleArray38);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, 1, 0);
        double double51 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray46);
        double double52 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray38, doubleArray46);
        double double53 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray28, doubleArray46);
        double double55 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray28, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = tTestImpl15.pairedTTest(doubleArray21, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 515.7000000000007d + "'", double24 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 61.0d + "'", double25 == 61.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 12.2d + "'", double26 == 12.2d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 34.99999999999999d + "'", double41 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 3.5553480614894135d + "'", double42 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 34.99999999999999d + "'", double51 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double28 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.sum(doubleArray23);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double32 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray23, 0.03172551743055352d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = tTestImpl7.tTest((double) (byte) 10, doubleArray23, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl12.homoscedasticTTest(statisticalSummary30, statisticalSummary31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) '#');
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double26 = org.apache.commons.math.stat.StatUtils.mean(doubleArray17, (int) (short) 0, (int) (byte) 0);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.sum(doubleArray28);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36, 1, 0);
        double double41 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray36);
        double double42 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray28, doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = tTestImpl15.homoscedasticTTest(doubleArray17, doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 34.99999999999999d + "'", double41 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.apache.commons.math.stat.StatUtils.variance(doubleArray0, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        printWriter5.print(0.0d);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.lang.String str5 = locale2.toLanguageTag();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4" + "'", str3, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ko" + "'", str5, "ko");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.MathException: de", "KOR");
        boolean boolean3 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "org.apache.commons.math.mathexception: de_KOR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter38.flush();
        printWriter38.print((long) 10);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double42 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray34, (double) (short) 100);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double49 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray34, doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = tTestImpl15.homoscedasticT(doubleArray27, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.5553480614894135d + "'", double38 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 34.99999999999999d + "'", double47 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.5553480614894135d + "'", double48 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.String str19 = locale9.getLanguage();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "de" + "'", str19, "de");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = org.apache.commons.math.stat.StatUtils.product(doubleArray9, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale4.getDisplayScript(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale4.getDisplayScript(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder0.setRegion("\uc911\uad6d");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 1, (int) '#', 0.9646159093607598d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            tDistribution11.setDegreesOfFreedom(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.max(doubleArray15);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double double27 = org.apache.commons.math.stat.StatUtils.sum(doubleArray21);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29, 1, 0);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray29);
        double double35 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray21, doubleArray29);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray21);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40, 1, 0);
        double double46 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray40, (double) (byte) 100);
        double double47 = org.apache.commons.math.stat.StatUtils.mean(doubleArray40);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40);
        double double49 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray21, doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = tTestImpl13.homoscedasticTTest(doubleArray15, doubleArray21, (double) 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 2.147483647E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 3.5553480614894135d + "'", double25 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.max(doubleArray16);
        double double23 = org.apache.commons.math.stat.StatUtils.min(doubleArray16);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double31 = org.apache.commons.math.stat.StatUtils.product(doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.sum(doubleArray26);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34, 1, 0);
        double double39 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray26, doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray16, doubleArray34);
        double double43 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray16, (double) 10);
        double[] doubleArray44 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double45 = tTestImpl14.t(doubleArray16, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.5553480614894135d + "'", double30 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 34.99999999999999d + "'", double39 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double[] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = tTestImpl1.pairedTTest(doubleArray3, doubleArray8, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = tTestImpl13.tTest(statisticalSummary14, statisticalSummary15, 0.36787944117144233d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        double double9 = chiSquaredDistribution8.getDegreesOfFreedom();
        double double10 = chiSquaredDistribution8.getDegreesOfFreedom();
        chiSquaredDistribution8.setDegreesOfFreedom((double) 'a');
        chiSquaredDistribution8.setDegreesOfFreedom(100.0d);
        double double15 = chiSquaredDistribution8.getDegreesOfFreedom();
        double double16 = chiSquaredDistribution8.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        printWriter10.close();
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        printStream16.println(' ');
        printStream16.print(false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream16);
        java.io.PrintWriter printWriter25 = printWriter23.append(' ');
        java.io.PrintWriter printWriter27 = printWriter25.append('u');
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 1, mathException35, (byte) 0, localeList43, 1225.0d };
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("de", objArray45);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("", objArray45, (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("und", objArray45, (java.lang.Throwable) mathException52);
        java.io.PrintWriter printWriter54 = printWriter25.printf("Deutsch", objArray45);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale[] localeArray66 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList67);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 1, mathException61, (byte) 0, localeList69, 1225.0d };
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", objArray71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("de", objArray71);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("", objArray71, (java.lang.Throwable) mathException75);
        java.lang.Object[] objArray77 = mathException76.getArguments();
        java.io.PrintWriter printWriter78 = printWriter54.printf("ITA", objArray77);
        java.io.PrintWriter printWriter79 = printWriter10.format("eng", objArray77);
        printWriter79.println(' ');
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printWriter79);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        double double21 = tDistribution19.getDegreesOfFreedom();
        tDistribution19.setDegreesOfFreedom(0.6321205588285574d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize((int) (byte) 10);
        double double15 = hypergeometricDistribution10.cumulativeProbability((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            int int17 = hypergeometricDistribution10.inverseCumulativeProbability((double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getISO3Country();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.lang.String str10 = java.util.Locale.lookupTag(languageRangeList6, (java.util.Collection<java.lang.String>) strSet9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, strMap14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap21);
        java.lang.String[] strArray30 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags(languageRangeList22, (java.util.Collection<java.lang.String>) strList31);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, strMap37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList38, strMap39);
        java.lang.String[] strArray48 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags(languageRangeList40, (java.util.Collection<java.lang.String>) strList49);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags(languageRangeList22, (java.util.Collection<java.lang.String>) strList49, filteringMode52);
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strList53);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap58 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, strMap58);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap63 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, strMap63);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap65 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList64, strMap65);
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap73 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList74 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, strMap73);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap75 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList76 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList74, strMap75);
        java.lang.String[] strArray84 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags(languageRangeList76, (java.util.Collection<java.lang.String>) strList85);
        java.util.List<java.lang.String> strList88 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strList87);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags(languageRangeList64, (java.util.Collection<java.lang.String>) strList87);
        java.util.Locale.FilteringMode filteringMode90 = null;
        java.util.List<java.lang.String> strList91 = java.util.Locale.filterTags(languageRangeList59, (java.util.Collection<java.lang.String>) strList89, filteringMode90);
        java.util.Locale.FilteringMode filteringMode92 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strList89, filteringMode92);
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strList93);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FRA" + "'", str8, "FRA");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + filteringMode52 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode52.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(languageRangeList59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(languageRangeList74);
        org.junit.Assert.assertNotNull(languageRangeList76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertTrue("'" + filteringMode92 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode92.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(strList94);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, 0, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream1.println('#');
        printStream1.print(false);
        java.io.PrintStream printStream63 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream63.print(97);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str31, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl12.tTest(statisticalSummary13, statisticalSummary14, 0.36787944117144233d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.Object obj4 = locale1.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("French (France)");
        java.lang.String str2 = locale1.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = tTestImpl13.tTest((double) 1L, statisticalSummary15, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.tTest(0.36787944117144233d, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) ' ');
        double double10 = poissonDistribution8.probability((double) 2147483647);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double35 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = tTestImpl15.tTest(12.2d, doubleArray28, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) '#');
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = tTestImpl13.tTest((double) (byte) 100, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (int) 'x', 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.print((long) 'u');
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale[] localeArray35 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList36);
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 1, mathException30, (byte) 0, localeList38, 1225.0d };
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("de", objArray40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("Chinesisch (China)", objArray40);
        java.io.PrintWriter printWriter44 = printWriter8.format("French", objArray40);
        printWriter8.println((double) 10L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter44);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 1, 0);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray17, doubleArray25);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) (short) 0);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38);
        double double41 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = tTestImpl15.homoscedasticTTest(doubleArray17, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 34.99999999999999d + "'", double41 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 3.5553480614894135d + "'", double42 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray16 = null;
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.sum(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl15.homoscedasticTTest(doubleArray16, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 34.99999999999999d + "'", double21 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) ' ');
        exponentialDistribution11.setMean(0.24999999999999964d);
        // The following exception was thrown during execution in test generation
        try {
            exponentialDistribution11.setMean(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getLanguage();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.Object obj4 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str1, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "de");
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) 100);
        exponentialDistribution11.setMean(52.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale1.getUnicodeLocaleType("org.apache.commons.math.MathException: fra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.MathException: fra");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4" + "'", str2, "\uc601\uc5b4");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.max(doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.min(doubleArray17);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double[] doubleArray35 = new double[] { '#' };
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35, 1, 0);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray35);
        double double41 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray27, doubleArray35);
        double double42 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray17, doubleArray35);
        double double44 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray17, (double) 10);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = tTestImpl15.pairedT(doubleArray17, doubleArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 34.99999999999999d + "'", double40 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        printWriter5.println(charArray16);
        printWriter5.flush();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10, (int) 'u', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution12 = distributionFactory0.createFDistribution(97.0d, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setLanguage("German");
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale15.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder19 = builder13.setLocale(locale15);
        java.util.Locale.Builder builder20 = builder10.setLocale(locale15);
        java.util.Set<java.lang.Character> charSet21 = locale15.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italienisch" + "'", str18, "Italienisch");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charSet21);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, 1, 0);
        double double23 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray17, (double) (byte) 100);
        double double24 = org.apache.commons.math.stat.StatUtils.mean(doubleArray17);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double35 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray27, (double) (short) 100);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = tTestImpl15.pairedTTest(doubleArray17, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = tTestImpl1.tTest(Double.POSITIVE_INFINITY, statisticalSummary12, 3.5553480614894135d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 3.5553480614894135");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getLanguage();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getVariant();
        java.lang.String str5 = locale3.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet6 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale3.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str1, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str5, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution5 = distributionFactory0.createPoissonDistribution(120.0d);
        double double7 = poissonDistribution5.normalApproximateProbability((int) (short) -1);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(poissonDistribution5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.992007221626409E-16d) + "'", double7 == (-9.992007221626409E-16d));
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale[] localeArray69 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 1, mathException64, (byte) 0, localeList72, 1225.0d };
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("de", objArray74);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", objArray74, (java.lang.Throwable) mathException78);
        java.io.PrintStream printStream80 = printStream57.format("", objArray74);
        java.io.PrintStream printStream82 = new java.io.PrintStream((java.io.OutputStream) printStream57, false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream85 = new java.io.PrintStream((java.io.OutputStream) printStream82, true, "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str31, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream80);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream1.println('#');
        java.io.PrintStream printStream61 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.OutputStream) printStream61, true);
        printWriter63.write("und");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str31, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder11 = builder6.setExtension('x', "FRA");
        java.util.Locale.Builder builder12 = builder6.clear();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setLanguage("Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Chinese (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double10 = poissonDistribution8.cumulativeProbability((int) '#');
        double double13 = poissonDistribution8.cumulativeProbability(0, (int) 'x');
        double double15 = poissonDistribution8.probability((int) (short) -1);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, (double) '#');
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray18);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, (double) '#');
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        double double33 = org.apache.commons.math.stat.StatUtils.min(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = tTestImpl7.tTest(doubleArray9, doubleArray26, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = locale2.getISO3Language();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale2.getDisplayScript(locale6);
        java.lang.String str9 = locale2.toLanguageTag();
        java.lang.String str10 = locale0.getDisplayLanguage(locale2);
        java.lang.String str11 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "FRA" + "'", str1, "FRA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getScale();
        weibullDistribution3.setScale((double) 'x');
        double double7 = weibullDistribution3.getScale();
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution3.setScale(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 120.0d + "'", double7 == 120.0d);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.sum(doubleArray31);
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray37);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double42 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double double43 = org.apache.commons.math.stat.StatUtils.sum(doubleArray37);
        double[] doubleArray45 = new double[] { '#' };
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45, 1, 0);
        double double50 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray45);
        double double51 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray37, doubleArray45);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double53 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray37);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = tTestImpl12.pairedTTest(doubleArray31, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 34.99999999999999d + "'", double40 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.5553480614894135d + "'", double41 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 34.99999999999999d + "'", double50 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.5553480614894135d + "'", double52 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 34.99999999999999d + "'", double53 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 3.5553480614894135d + "'", double55 == 3.5553480614894135d);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray8);
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double13 = org.apache.commons.math.stat.StatUtils.sum(doubleArray8);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray8);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintStream printStream38 = printStream16.printf(locale19, "hi!", objArray35);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40, (double) '#');
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        printStream38.print((java.lang.Object) doubleArray40);
        double[] doubleArray48 = new double[] { '#' };
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray40, doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.min(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = tTestImpl1.homoscedasticT(doubleArray3, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 34.99999999999999d + "'", double11 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.5553480614894135d + "'", double12 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, 1, 0);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = tTestImpl14.tTest(0.308537538725987d, doubleArray17, 0.308537538725987d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayLanguage(locale1);
        java.lang.String str4 = locale0.getLanguage();
        java.lang.String str5 = locale0.getDisplayName();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("Italienisch");
        java.lang.String str8 = locale0.getDisplayVariant(locale7);
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale10 = java.util.Locale.getDefault(category9);
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale7.getDisplayLanguage(locale10);
        java.util.Set<java.lang.String> strSet13 = locale7.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italienisch" + "'", str3, "Italienisch");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str5, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fr" + "'", str11, "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream4 = new java.io.PrintStream("en");
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale[] localeArray21 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList22);
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 1, mathException16, (byte) 0, localeList24, 1225.0d };
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("de", objArray26);
        java.io.PrintStream printStream29 = printStream7.printf(locale10, "hi!", objArray26);
        java.io.PrintStream printStream30 = printStream4.printf("FR", objArray26);
        java.io.PrintWriter printWriter31 = printWriter1.format("zh-CN", objArray26);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter33.print((float) (short) 100);
        printWriter33.println((int) (byte) 1);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(printWriter31);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 0, 0);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray8);
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray8);
        double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray8);
        double double16 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray8, (double) (short) 100);
        double double17 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray8);
        double double19 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 0.24999999999999964d);
        double double20 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 34.99999999999999d + "'", double11 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.5553480614894135d + "'", double12 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.t(35.0d, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4, (double) '#');
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double10 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double13 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray4, 0.6321205588285574d);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = tTestImpl1.tTest((double) 100L, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 34.99999999999999d + "'", double10 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.5553480614894135d + "'", double11 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory30 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution33 = distributionFactory30.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution36 = distributionFactory30.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory30.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory30.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tTestImpl12.setDistribution(tDistribution41);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double47 = tTestImpl12.t(statisticalSummary45, statisticalSummary46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory30);
        org.junit.Assert.assertNotNull(weibullDistribution33);
        org.junit.Assert.assertNotNull(fDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.mean(doubleArray17);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, (double) '#');
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = tTestImpl15.homoscedasticTTest(doubleArray17, doubleArray26, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray28 = new double[] { 0L };
        // The following exception was thrown during execution in test generation
        try {
            double double29 = tTestImpl15.tTest((double) 0L, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        byte[] byteArray6 = new byte[] {};
        printStream5.write(byteArray6);
        printStream1.write(byteArray6);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        printStream11.println(' ');
        printStream11.print(false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale19.getDisplayVariant();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale19.getDisplayLanguage(locale22);
        boolean boolean25 = locale19.hasExtensions();
        java.lang.Object[] objArray27 = null;
        java.io.PrintWriter printWriter28 = printWriter18.printf(locale19, "German", objArray27);
        java.util.Locale locale29 = null;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 1, mathException35, (byte) 0, localeList43, 1225.0d };
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("de", objArray45);
        java.io.PrintWriter printWriter48 = printWriter18.printf(locale29, "zh-CN", objArray45);
        java.io.PrintStream printStream49 = printStream1.format("Chinese (Taiwan)", objArray45);
        printStream1.print((long) (short) 100);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Deutsch" + "'", str24, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(printStream49);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        double double10 = pascalDistribution6.probability((int) 'x');
        double double12 = pascalDistribution6.probability((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            pascalDistribution6.setProbabilityOfSuccess(52.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        char[] charArray14 = new char[] { ' ' };
        printWriter12.write(charArray14);
        printStream1.print(charArray14);
        printStream1.println("Chinese (Taiwan)");
        printStream1.write((int) '4');
        printStream1.println((float) 10);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ]");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, (int) 'a', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double10 = poissonDistribution8.cumulativeProbability((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int12 = poissonDistribution8.inverseCumulativeProbability((double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = tTestImpl14.homoscedasticT(statisticalSummary15, statisticalSummary16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        cauchyDistribution6.setScale((double) 1.0f);
        double double10 = cauchyDistribution6.getScale();
        double double11 = cauchyDistribution6.getMedian();
        double double13 = cauchyDistribution6.inverseCumulativeProbability(0.24999999999999964d);
        cauchyDistribution6.setScale(1.0000000000000402d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 8.999999999999998d + "'", double13 == 8.999999999999998d);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl13.tTest((-1.0d), doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 1, mathException11, (byte) 0, localeList19, 1225.0d };
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("de", objArray21);
        java.io.PrintStream printStream24 = printStream2.printf(locale5, "hi!", objArray21);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale5.getDisplayLanguage(locale25);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.setLanguage("German");
        java.util.Locale locale31 = builder28.build();
        java.util.Locale.Builder builder32 = builder28.clearExtensions();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getISO3Language();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale35.getDisplayScript(locale37);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale39.getDisplayName();
        java.lang.String str41 = locale35.getDisplayScript(locale39);
        java.lang.String str42 = locale35.toLanguageTag();
        java.lang.String str43 = locale33.getDisplayLanguage(locale35);
        java.util.Locale.Builder builder44 = builder28.setLocale(locale35);
        java.util.Locale.setDefault(category0, locale35);
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder46.setLanguage("German");
        java.util.Locale.Builder builder49 = builder48.clearExtensions();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = locale50.getDisplayLanguage(locale51);
        java.util.Locale.Builder builder54 = builder48.setLocale(locale50);
        java.lang.String str55 = locale50.getVariant();
        java.util.Locale.setDefault(category0, locale50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = locale50.getUnicodeLocaleType("org.apache.commons.math.MathException: fra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.MathException: fra");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str26, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "german");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FRA" + "'", str34, "FRA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "French" + "'", str43, "French");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Italienisch" + "'", str53, "Italienisch");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution11 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double14 = poissonDistribution11.cumulativeProbability((int) (byte) 1, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = poissonDistribution11.cumulativeProbability(1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(poissonDistribution11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.6321205588285574d + "'", double14 == 0.6321205588285574d);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.sum(doubleArray18);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, 1, 0);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray18, doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = tTestImpl15.tTest(Double.POSITIVE_INFINITY, doubleArray26, 120.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 120.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 34.99999999999999d + "'", double21 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.util.Locale locale3 = new java.util.Locale("allemand", "allemand", "");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = locale3.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale5.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for allemand");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "allemand_ALLEMAND");
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        printWriter5.println(charArray16);
        java.lang.Object[] objArray20 = null;
        java.io.PrintWriter printWriter21 = printWriter5.printf("allemand", objArray20);
        boolean boolean22 = printWriter21.checkError();
        java.lang.Class<?> wildcardClass23 = printWriter21.getClass();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        boolean boolean4 = locale1.equals((java.lang.Object) locale3);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        gammaDistribution9.setAlpha(100.0d);
        double double12 = gammaDistribution9.getAlpha();
        gammaDistribution9.setBeta((double) 1L);
        double double15 = gammaDistribution9.getAlpha();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = tTestImpl1.tTest(0.691462461274013d, statisticalSummary24, 0.9646159093607598d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.9646159093607598");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\uc774\ud0c8\ub9ac\uc544", 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=?????????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int9 = pascalDistribution6.getNumberOfSuccesses();
        // The following exception was thrown during execution in test generation
        try {
            pascalDistribution6.setProbabilityOfSuccess(Double.POSITIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.print((int) (byte) 10);
        printWriter5.print(false);
        printWriter5.print(100.0d);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getISO3Country();
        printWriter5.print((java.lang.Object) locale14);
        java.io.PrintWriter printWriter18 = printWriter5.append(' ');
        printWriter5.print('4');
        printWriter5.print((float) (short) 10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FRA" + "'", str15, "FRA");
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize((int) (byte) 10);
        int int14 = hypergeometricDistribution10.getSampleSize();
        // The following exception was thrown during execution in test generation
        try {
            hypergeometricDistribution10.setNumberOfSuccesses((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = tTestImpl1.t((double) 1, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(12.2d, 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution18 = distributionFactory0.createPascalDistribution((int) (byte) 100, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream57.print(Double.NaN);
        printStream57.print(true);
        printStream57.close();
        printStream57.print("French (France)");
        printStream57.print(false);
        printStream57.write((int) '#');
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str3 = locale1.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "English (United States)" + "'", str3, "English (United States)");
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory30 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution33 = distributionFactory30.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution36 = distributionFactory30.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory30.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory30.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tTestImpl12.setDistribution(tDistribution41);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = tTestImpl12.tTest(statisticalSummary45, statisticalSummary46, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory30);
        org.junit.Assert.assertNotNull(weibullDistribution33);
        org.junit.Assert.assertNotNull(fDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.max(doubleArray27, 0, 0);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34, (double) '#');
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double42 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray27, doubleArray34);
        java.io.PrintStream printStream44 = new java.io.PrintStream("French (France)");
        printStream44.println((float) (short) -1);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale[] localeArray58 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.util.Locale>) localeList59);
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 1, mathException53, (byte) 0, localeList61, 1225.0d };
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("hi!", objArray63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("de", objArray63);
        java.io.PrintStream printStream66 = printStream44.printf(locale47, "hi!", objArray63);
        double[] doubleArray68 = new double[] { '#' };
        double double69 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68);
        double double72 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68, (double) '#');
        double double73 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        printStream66.print((java.lang.Object) doubleArray68);
        double[] doubleArray76 = new double[] { '#' };
        double double77 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray76);
        double double78 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray68, doubleArray76);
        double double79 = org.apache.commons.math.stat.StatUtils.sum(doubleArray68);
        double double81 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray68, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = tTestImpl15.homoscedasticTTest(doubleArray27, doubleArray68, 34.99999999999999d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 34.99999999999999");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.5553480614894135d + "'", double41 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1225.0d + "'", double69 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1225.0d + "'", double73 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[35.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1225.0d + "'", double77 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 35.0d + "'", double79 == 35.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 35.0d + "'", double81 == 35.0d);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("org.apache.commons.math.mathexception: de", 515.7000000000007d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=515.7000000000007");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = tTestImpl0.tTest((double) (byte) 10, statisticalSummary2, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(outputStream0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("ko", "org.apache.commons.math.mathexception: de");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.mathexception: de");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, (double) '#');
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.mean(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        java.io.PrintStream printStream19 = new java.io.PrintStream("French (France)");
        printStream19.println((float) (short) -1);
        printStream19.println(' ');
        printStream19.print(false);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale27.getDisplayLanguage(locale30);
        boolean boolean33 = locale27.hasExtensions();
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter26.printf(locale27, "German", objArray35);
        printWriter26.print((long) (byte) 10);
        printWriter26.print("");
        printWriter26.print((long) (short) 100);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44, (double) '#');
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double50 = org.apache.commons.math.stat.StatUtils.sum(doubleArray44);
        double double52 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray44, (double) 1.0f);
        printWriter26.print((java.lang.Object) doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = tTestImpl7.pairedT(doubleArray9, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Deutsch" + "'", str32, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double35 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37, (double) '#');
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37);
        double double44 = org.apache.commons.math.stat.StatUtils.min(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = tTestImpl26.homoscedasticT(doubleArray28, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale2.getDisplayCountry();
        java.lang.String str4 = locale2.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale.setDefault(locale1);
        java.lang.String str3 = locale1.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 1, mathException5, (byte) 0, localeList13, 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("de", objArray15);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray15, (java.lang.Throwable) mathException19);
        java.lang.String str21 = mathException19.getPattern();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 1, mathException26, (byte) 0, localeList34, 1225.0d };
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("");
        mathException37.addSuppressed((java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException39);
        mathException19.addSuppressed((java.lang.Throwable) mathException41);
        java.lang.String str43 = mathException41.toString();
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "allemand" + "'", str21, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org.apache.commons.math.MathException: " + "'", str43, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.691462461274013d, (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = locale2.getISO3Language();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getISO3Language();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.lang.String str8 = locale2.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de" + "'", str1, "de");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "German" + "'", str7, "German");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        double double9 = chiSquaredDistribution8.getDegreesOfFreedom();
        chiSquaredDistribution8.setDegreesOfFreedom((double) 10);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter10.print(2147483646);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10, (int) (byte) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, 1, 0);
        double double21 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, (double) '#');
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = tTestImpl14.t(doubleArray16, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 34.99999999999999d + "'", double21 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.t((double) 0.0f, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, (int) (byte) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.util.Locale locale2 = new java.util.Locale("und", "fr_FR");
        java.lang.String str3 = locale2.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "und_FR_FR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FR_FR" + "'", str3, "FR_FR");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2, (double) '#');
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double9 = org.apache.commons.math.stat.StatUtils.mean(doubleArray2);
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray0, doubleArray2, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1225.0d + "'", double7 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setLanguage("\ub3c5\uc77c\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double) 10.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(1.0000000000000402d);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = poissonDistribution8.cumulativeProbability((int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale[] localeArray8 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.List<java.util.Locale> localeList11 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList9);
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 1, mathException3, (byte) 0, localeList11, 1225.0d };
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale[] localeArray24 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList25);
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 1, mathException19, (byte) 0, localeList27, 1225.0d };
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("");
        mathException30.addSuppressed((java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale[] localeArray45 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.List<java.util.Locale> localeList48 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList46);
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 1, mathException40, (byte) 0, localeList48, 1225.0d };
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray50);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("");
        mathException51.addSuppressed((java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("German", (java.lang.Throwable) mathException53);
        mathException34.addSuppressed((java.lang.Throwable) mathException53);
        mathException14.addSuppressed((java.lang.Throwable) mathException34);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeList11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeList48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 1, mathException11, (byte) 0, localeList19, 1225.0d };
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("de", objArray21);
        java.io.PrintStream printStream24 = printStream2.printf(locale5, "hi!", objArray21);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale5.getDisplayLanguage(locale25);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.setLanguage("German");
        java.util.Locale locale31 = builder28.build();
        java.util.Locale.Builder builder32 = builder28.clearExtensions();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getISO3Language();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale35.getDisplayScript(locale37);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale39.getDisplayName();
        java.lang.String str41 = locale35.getDisplayScript(locale39);
        java.lang.String str42 = locale35.toLanguageTag();
        java.lang.String str43 = locale33.getDisplayLanguage(locale35);
        java.util.Locale.Builder builder44 = builder28.setLocale(locale35);
        java.util.Locale.setDefault(category0, locale35);
        java.lang.String str46 = locale35.getDisplayScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str26, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "german");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FRA" + "'", str34, "FRA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "French" + "'", str43, "French");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((-9.992007221626409E-16d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("FRA", "Chinesisch (China)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Chinesisch (China)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = fDistribution6.cumulativeProbability(100.0d, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("zho");
        printWriter1.print((float) 1L);
        printWriter1.write("anglais");
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Chinesisch (China)");
        char[] charArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            printStream1.println(charArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.MathException: de", "ko_KR");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ko_KR");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) 1L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 'a', 35.0d);
        double double10 = normalDistribution9.getMean();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = normalDistribution9.inverseCumulativeProbability(1.0000000000000402d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 97.0d + "'", double10 == 97.0d);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray13 = null;
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, (double) '#');
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = tTestImpl12.homoscedasticT(doubleArray13, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setRegion("FR");
        java.util.Locale.Builder builder12 = builder10.setLanguage("und");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder10.addUnicodeLocaleAttribute("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl15.t((double) ' ', statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution12 = distributionFactory0.createPascalDistribution(0, 117.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double double10 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, (double) '#');
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double19 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray13);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = tTestImpl1.tTest(1.0000000000000402d, doubleArray13, 1.0000000000000402d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0000000000000402");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution10 = distributionFactory0.createExponentialDistribution((double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PoissonDistribution poissonDistribution12 = distributionFactory0.createPoissonDistribution((double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Poisson mean must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(exponentialDistribution10);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double10 = poissonDistribution8.normalApproximateProbability((int) (short) 0);
        double double11 = poissonDistribution8.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.308537538725987d + "'", double10 == 0.308537538725987d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.max(doubleArray15, 0, 0);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double27 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray22);
        double double30 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray22, (double) (short) 100);
        double double31 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray15, doubleArray22);
        double double33 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray15, 0.24999999999999964d);
        double double34 = org.apache.commons.math.stat.StatUtils.mean(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = tTestImpl12.tTest(4.560969057281146E-69d, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayLanguage(locale1);
        java.lang.String str4 = locale1.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italienisch" + "'", str3, "Italienisch");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("France");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.io.PrintStream printStream6 = new java.io.PrintStream("French (France)");
        printStream6.println((float) (short) -1);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream6);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream6);
        java.io.PrintStream printStream13 = new java.io.PrintStream("French (France)");
        printStream13.print((long) ' ');
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        byte[] byteArray18 = new byte[] {};
        printStream17.write(byteArray18);
        printStream13.write(byteArray18);
        java.io.PrintStream printStream23 = new java.io.PrintStream("French (France)");
        printStream23.println((float) (short) -1);
        printStream23.println(' ');
        printStream23.print(false);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream23);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale31.getDisplayVariant();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        boolean boolean35 = locale34.hasExtensions();
        java.lang.String str36 = locale31.getDisplayLanguage(locale34);
        boolean boolean37 = locale31.hasExtensions();
        java.lang.Object[] objArray39 = null;
        java.io.PrintWriter printWriter40 = printWriter30.printf(locale31, "German", objArray39);
        java.util.Locale locale41 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale[] localeArray52 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList53);
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 1, mathException47, (byte) 0, localeList55, 1225.0d };
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("de", objArray57);
        java.io.PrintWriter printWriter60 = printWriter30.printf(locale41, "zh-CN", objArray57);
        java.io.PrintStream printStream61 = printStream13.format("Chinese (Taiwan)", objArray57);
        java.io.PrintWriter printWriter62 = printWriter10.printf("Franz\366sisch (Frankreich)", objArray57);
        printWriter10.println((int) (byte) 100);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory65 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution68 = distributionFactory65.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution71 = distributionFactory65.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double72 = pascalDistribution71.getProbabilityOfSuccess();
        printWriter10.print((java.lang.Object) pascalDistribution71);
        boolean boolean74 = languageRange1.equals((java.lang.Object) pascalDistribution71);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "france" + "'", str4, "france");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Deutsch" + "'", str36, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(distributionFactory65);
        org.junit.Assert.assertNotNull(weibullDistribution68);
        org.junit.Assert.assertNotNull(pascalDistribution71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale4.getDisplayScript(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale4.getDisplayScript(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.setExtension(' ', "eng");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.product(doubleArray0, 120, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }
}

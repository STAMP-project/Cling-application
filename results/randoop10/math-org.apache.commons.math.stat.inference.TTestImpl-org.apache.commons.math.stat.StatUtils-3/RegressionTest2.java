import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = tTestImpl14.tTest(statisticalSummary15, statisticalSummary16, Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -Infinity");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale2.getCountry();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.lang.String str9 = locale2.getDisplayName(locale7);
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = locale11.getDisplayName();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale11.getDisplayCountry(locale14);
        java.lang.String str16 = locale10.getDisplayCountry(locale14);
        java.lang.String str17 = locale7.getDisplayScript(locale10);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory18 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution21 = distributionFactory18.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution24 = distributionFactory18.createCauchyDistribution((double) 10L, (double) 100.0f);
        cauchyDistribution24.setScale((double) 10L);
        boolean boolean27 = locale7.equals((java.lang.Object) 10L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FRA" + "'", str12, "FRA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "French (France)" + "'", str13, "French (France)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud504\ub791\uc2a4" + "'", str15, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str16, "\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(distributionFactory18);
        org.junit.Assert.assertNotNull(weibullDistribution21);
        org.junit.Assert.assertNotNull(cauchyDistribution24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray3);
        double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray3);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, (double) '#');
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray3, doubleArray12);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20, 1, 0);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl1.t(doubleArray3, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        cauchyDistribution6.setScale((double) 1.0f);
        double double10 = cauchyDistribution6.getScale();
        double double11 = cauchyDistribution6.getMedian();
        double double12 = cauchyDistribution6.getScale();
        // The following exception was thrown during execution in test generation
        try {
            cauchyDistribution6.setScale((-9.992007221626409E-16d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.t(0.24999999999999964d, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese (Taiwan)" + "'", str1, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh_TW" + "'", str2, "zh_TW");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory0.createTDistribution((double) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution11 = distributionFactory0.createPascalDistribution(97, 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\uc601\uc5b4", (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fra" + "'", str1, "fra");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, 0, 1);
        double double13 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en");
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("de", objArray23);
        java.io.PrintStream printStream26 = printStream4.printf(locale7, "hi!", objArray23);
        java.io.PrintStream printStream27 = printStream1.printf("FR", objArray23);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream27);
        printWriter28.print((int) (byte) 0);
        printWriter28.print((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            printWriter28.write("ITA", (int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 132");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream27);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21, 1, 0);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = tTestImpl12.t(doubleArray14, doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory26 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution29 = distributionFactory26.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution32 = distributionFactory26.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution35 = distributionFactory26.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory26.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        tTestImpl15.setDistribution(tDistribution37);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42);
        double double45 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray42);
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray42);
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double double48 = org.apache.commons.math.stat.StatUtils.sum(doubleArray42);
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double[] doubleArray51 = new double[] { '#' };
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) '#');
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double57 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray42, doubleArray51);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = tTestImpl15.tTest(0.0d, doubleArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(distributionFactory26);
        org.junit.Assert.assertNotNull(weibullDistribution29);
        org.junit.Assert.assertNotNull(cauchyDistribution32);
        org.junit.Assert.assertNotNull(gammaDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 34.99999999999999d + "'", double45 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.5553480614894135d + "'", double46 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.homoscedasticT(statisticalSummary14, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayScript(locale9);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale7.getDisplayScript(locale11);
        java.lang.String str14 = locale7.toLanguageTag();
        java.lang.String str15 = locale5.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder16 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.setRegion("\uc911\uad6d");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "French" + "'", str15, "French");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.lang.String[] strArray2 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray2);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("allemand", (java.lang.Object[]) strArray2);
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        java.lang.String str6 = mathException4.toString();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.apache.commons.math.MathException: allemand" + "'", str6, "org.apache.commons.math.MathException: allemand");
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, 1, 0);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray15, doubleArray23);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double36 = org.apache.commons.math.stat.StatUtils.product(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.sum(doubleArray31);
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray31);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40, (double) '#');
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double46 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray31, doubleArray40);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double48 = tTestImpl13.pairedTTest(doubleArray15, doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray16, 0, 0);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, (double) '#');
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double31 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray16, doubleArray23);
        double[] doubleArray32 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double33 = tTestImpl14.pairedT(doubleArray23, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.5553480614894135d + "'", double30 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) '#');
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double25 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray17, (double) 1.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29);
        double double32 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double34 = org.apache.commons.math.stat.StatUtils.sum(doubleArray29);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29, 1225.0d);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl15.pairedT(doubleArray17, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 34.99999999999999d + "'", double32 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 3.5553480614894135d + "'", double33 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (int) '#', 100, 1.0000000000000402d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray1, doubleArray10, (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.5553480614894135d + "'", double14 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) '#');
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl13.t(1225.0d, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory30 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution33 = distributionFactory30.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution36 = distributionFactory30.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory30.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory30.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tTestImpl12.setDistribution(tDistribution41);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double49 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double51 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double double52 = org.apache.commons.math.stat.StatUtils.sum(doubleArray46);
        double double53 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray46);
        double double56 = org.apache.commons.math.stat.StatUtils.product(doubleArray46, 0, 1);
        double double58 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray46, (double) 10.0f);
        double[] doubleArray60 = new double[] { '#' };
        double double61 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        double double62 = org.apache.commons.math.stat.StatUtils.variance(doubleArray60);
        double double63 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray60);
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60);
        double double65 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60);
        double double66 = org.apache.commons.math.stat.StatUtils.sum(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = tTestImpl12.tTest(doubleArray46, doubleArray60, 0.9646641462260455d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.9646641462260455");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory30);
        org.junit.Assert.assertNotNull(weibullDistribution33);
        org.junit.Assert.assertNotNull(fDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 34.99999999999999d + "'", double49 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 3.5553480614894135d + "'", double50 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 34.99999999999999d + "'", double53 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1225.0d + "'", double61 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 34.99999999999999d + "'", double63 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 3.5553480614894135d + "'", double64 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 3.5553480614894135d + "'", double65 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 35.0d + "'", double66 == 35.0d);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, (double) '#');
        double double32 = org.apache.commons.math.stat.StatUtils.min(doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray27, 12.2d);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double39 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.product(doubleArray36);
        double double42 = org.apache.commons.math.stat.StatUtils.sum(doubleArray36);
        double double44 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray36, (double) (short) 100);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36, 1, 2147483647);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = tTestImpl15.pairedTTest(doubleArray27, doubleArray36, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 34.99999999999999d + "'", double39 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getLanguage();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "en" + "'", str1, "en");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double[] doubleArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = tTestImpl12.homoscedasticTTest(doubleArray14, doubleArray23, 120.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 120.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale3.getDisplayCountry(locale5);
        java.lang.String str9 = locale0.getDisplayName(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = locale0.getUnicodeLocaleType("tedesco");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: tedesco");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "allemand" + "'", str9, "allemand");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) (-1.0f), 3.5553480614894135d);
        double double10 = normalDistribution9.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        exponentialDistribution6.setMean(8.999999999999998d);
        // The following exception was thrown during execution in test generation
        try {
            exponentialDistribution6.setMean((-13.607141222220143d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setNumberOfSuccesses(10);
        pascalDistribution6.setNumberOfSuccesses((int) (short) 0);
        double double16 = pascalDistribution6.cumulativeProbability((double) (byte) 10);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        printStream2.println(' ');
        printStream2.flush();
        java.util.Locale locale8 = null;
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        printStream18.println(' ');
        printStream18.print(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        java.io.PrintWriter printWriter27 = printWriter25.append(' ');
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getDisplayVariant();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.lang.String str36 = locale31.getDisplayCountry(locale33);
        java.lang.String str37 = locale28.getDisplayName(locale33);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale[] localeArray48 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList49);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 1, mathException43, (byte) 0, localeList51, 1225.0d };
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("de", objArray53);
        java.io.PrintWriter printWriter56 = printWriter27.printf(locale28, "zho", objArray53);
        java.io.PrintWriter printWriter57 = printWriter15.printf("", objArray53);
        java.io.PrintStream printStream58 = printStream2.printf(locale8, "und", objArray53);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("fra", objArray53);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("KOR");
        mathException59.addSuppressed((java.lang.Throwable) mathException61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException61);
        java.lang.String str64 = mathException63.getPattern();
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "German" + "'", str32, "German");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FRA" + "'", str34, "FRA");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "allemand" + "'", str37, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "KOR" + "'", str64, "KOR");
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14, 1225.0d);
        double double23 = org.apache.commons.math.stat.StatUtils.max(doubleArray14);
        double[] doubleArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl12.pairedT(doubleArray14, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25, (int) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t(12.2d, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int9 = pascalDistribution6.getNumberOfSuccesses();
        pascalDistribution6.setNumberOfSuccesses((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = pascalDistribution6.cumulativeProbability((int) ' ', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29);
        double double32 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double34 = org.apache.commons.math.stat.StatUtils.sum(doubleArray29);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray37);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double42 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double double43 = org.apache.commons.math.stat.StatUtils.sum(doubleArray37);
        double[] doubleArray45 = new double[] { '#' };
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45, 1, 0);
        double double50 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray45);
        double double51 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray37, doubleArray45);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double53 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double54 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray29, doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = tTestImpl26.t(1.0000000000000402d, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 34.99999999999999d + "'", double32 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 3.5553480614894135d + "'", double33 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 34.99999999999999d + "'", double40 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.5553480614894135d + "'", double41 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 34.99999999999999d + "'", double50 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.5553480614894135d + "'", double52 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1225.0d + "'", double53 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.lang.String str25 = locale4.getDisplayLanguage(locale24);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale4.getDisplayVariant(locale26);
        java.util.Locale locale28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = locale26.getDisplayName(locale28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str25, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11, (double) '#');
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray11);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11, (double) (short) 100);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double21 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        java.io.PrintWriter printWriter49 = printWriter5.append('#');
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(printWriter49);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray31);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38, (double) '#');
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray38);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double48 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray38, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = tTestImpl12.homoscedasticTTest(doubleArray31, doubleArray38, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 34.99999999999999d + "'", double44 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.5553480614894135d + "'", double45 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.t(0.691462461274013d, statisticalSummary12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("FR_FR", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(12.2d, 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution17 = distributionFactory0.createExponentialDistribution((double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.lang.Object obj10 = null;
        printWriter9.println(obj10);
        printWriter9.write((int) (short) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        char[] charArray21 = new char[] { ' ' };
        printWriter19.write(charArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printWriter19.println(charArray30);
        printWriter9.write(charArray30, (int) (byte) 0, 1);
        printStream1.print(charArray30);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println((long) 2147483647);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory30 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution33 = distributionFactory30.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution36 = distributionFactory30.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory30.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory30.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tTestImpl12.setDistribution(tDistribution41);
        double[] doubleArray50 = new double[] { 120, (short) 1, '#', Double.POSITIVE_INFINITY, (short) -1 };
        double[] doubleArray51 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double52 = tTestImpl12.tTest(doubleArray50, doubleArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory30);
        org.junit.Assert.assertNotNull(weibullDistribution33);
        org.junit.Assert.assertNotNull(fDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[120.0, 1.0, 35.0, Infinity, -1.0]");
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\uc911\uad6d", (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) '#');
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray26);
        double double31 = org.apache.commons.math.stat.StatUtils.max(doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray17, doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = tTestImpl14.tTest((double) 100.0f, doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20, 1, 0);
        double double26 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray20, (double) (byte) 100);
        double double27 = org.apache.commons.math.stat.StatUtils.mean(doubleArray20);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double29 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int9 = pascalDistribution6.getNumberOfSuccesses();
        // The following exception was thrown during execution in test generation
        try {
            pascalDistribution6.setProbabilityOfSuccess((double) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = tTestImpl15.tTest(doubleArray17, doubleArray27, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 1, mathException11, (byte) 0, localeList19, 1225.0d };
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("de", objArray21);
        java.io.PrintStream printStream24 = printStream2.printf(locale5, "hi!", objArray21);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale5.getDisplayLanguage(locale25);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.setLanguage("German");
        java.util.Locale locale31 = builder28.build();
        java.util.Locale.Builder builder32 = builder28.clearExtensions();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getISO3Language();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale35.getDisplayScript(locale37);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale39.getDisplayName();
        java.lang.String str41 = locale35.getDisplayScript(locale39);
        java.lang.String str42 = locale35.toLanguageTag();
        java.lang.String str43 = locale33.getDisplayLanguage(locale35);
        java.util.Locale.Builder builder44 = builder28.setLocale(locale35);
        java.util.Locale.setDefault(category0, locale35);
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder46.setLanguage("German");
        java.util.Locale.Builder builder49 = builder48.clearExtensions();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = locale50.getDisplayLanguage(locale51);
        java.util.Locale.Builder builder54 = builder48.setLocale(locale50);
        java.lang.String str55 = locale50.getVariant();
        java.util.Locale.setDefault(category0, locale50);
        java.lang.Object obj57 = locale50.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str26, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "german");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FRA" + "'", str34, "FRA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "French" + "'", str43, "French");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Italienisch" + "'", str53, "Italienisch");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "it");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "it");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "it");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getLanguage();
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        printStream4.println(' ');
        printStream4.print(false);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        java.io.PrintWriter printWriter13 = printWriter11.append(' ');
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String str16 = locale14.getDisplayVariant();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getDisplayName();
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = locale19.getISO3Country();
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleKeys();
        java.lang.String str22 = locale17.getDisplayCountry(locale19);
        java.lang.String str23 = locale14.getDisplayName(locale19);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale[] localeArray34 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList35);
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 1, mathException29, (byte) 0, localeList37, 1225.0d };
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("de", objArray39);
        java.io.PrintWriter printWriter42 = printWriter13.printf(locale14, "zho", objArray39);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        boolean boolean44 = locale43.hasExtensions();
        java.lang.String str45 = locale43.getDisplayVariant();
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getDisplayName();
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = locale48.getISO3Country();
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        java.lang.String str51 = locale46.getDisplayCountry(locale48);
        java.lang.String str52 = locale43.getDisplayName(locale48);
        java.lang.String str53 = locale43.getDisplayScript();
        java.lang.String str54 = locale14.getDisplayScript(locale43);
        java.util.Locale locale56 = new java.util.Locale("org.apache.commons.math.MathException: de");
        java.lang.String str57 = locale56.getISO3Country();
        java.lang.String str58 = locale14.getDisplayLanguage(locale56);
        java.lang.String str59 = locale1.getDisplayVariant(locale14);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.lang.String str62 = locale61.getISO3Language();
        java.lang.String str63 = locale61.getDisplayName();
        java.lang.String str64 = locale60.getDisplayVariant(locale61);
        boolean boolean65 = locale1.equals((java.lang.Object) locale60);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tedesco" + "'", str18, "tedesco");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "FRA" + "'", str20, "FRA");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "allemand" + "'", str23, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tedesco" + "'", str47, "tedesco");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "FRA" + "'", str49, "FRA");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "allemand" + "'", str52, "allemand");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals(locale56.toString(), "org.apache.commons.math.mathexception: de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "German" + "'", str58, "German");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fra" + "'", str62, "fra");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "francese (Francia)" + "'", str63, "francese (Francia)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22, (double) '#');
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double31 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray22, 0.6321205588285574d);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray33, 12.2d);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = tTestImpl7.pairedT(doubleArray22, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("inglese (Stati Uniti)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=inglese(statiuniti)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double5 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2);
        double double8 = org.apache.commons.math.stat.StatUtils.max(doubleArray2);
        double double9 = org.apache.commons.math.stat.StatUtils.min(doubleArray2);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.sum(doubleArray12);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20, 1, 0);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        double double26 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray12, doubleArray20);
        double double27 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray2, doubleArray20);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29, (double) '#');
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = tTestImpl0.homoscedasticTTest(doubleArray20, doubleArray29, 52.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 52.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 34.99999999999999d + "'", double5 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.5553480614894135d + "'", double6 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double36 = org.apache.commons.math.stat.StatUtils.product(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.sum(doubleArray31);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39, 1, 0);
        double double44 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray39);
        double double45 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray31, doubleArray39);
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double48 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray23, doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = tTestImpl7.tTest(10.0d, doubleArray23, 0.5199388058383725d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.5199388058383725");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 34.99999999999999d + "'", double44 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.5553480614894135d + "'", double46 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl12.tTest(statisticalSummary30, statisticalSummary31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 0, 0);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8, (double) '#');
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.5553480614894135d + "'", double15 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.sum(doubleArray28);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray28, 0, 1);
        double double40 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray28, (double) 10.0f);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = tTestImpl26.pairedTTest(doubleArray28, doubleArray42, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        boolean boolean6 = locale5.hasExtensions();
        java.lang.String str7 = locale5.getDisplayVariant();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale5.getDisplayLanguage(locale8);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale[] localeArray20 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList21);
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 1, mathException15, (byte) 0, localeList23, 1225.0d };
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("");
        mathException26.addSuppressed((java.lang.Throwable) mathException28);
        java.lang.Object[] objArray30 = mathException26.getArguments();
        java.io.PrintStream printStream31 = printStream1.printf(locale5, "fran\347ais (France)", objArray30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = locale5.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Deutsch" + "'", str10, "Deutsch");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream31);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory30 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution33 = distributionFactory30.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution36 = distributionFactory30.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory30.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory30.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tTestImpl12.setDistribution(tDistribution41);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double47 = tTestImpl12.tTest((double) 97, statisticalSummary46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory30);
        org.junit.Assert.assertNotNull(weibullDistribution33);
        org.junit.Assert.assertNotNull(fDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl1.t(0.308537538725987d, statisticalSummary24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        java.util.Locale locale3 = new java.util.Locale("German", "allemand", "german");
        org.junit.Assert.assertEquals(locale3.toString(), "german_ALLEMAND_german");
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 1, mathException5, (byte) 0, localeList13, 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("");
        mathException16.addSuppressed((java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("German", (java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("Chinesisch (China)", (java.lang.Throwable) mathException24);
        mathException18.addSuppressed((java.lang.Throwable) mathException25);
        java.lang.String str27 = mathException25.getPattern();
        java.lang.Object[] objArray28 = mathException25.getArguments();
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Chinesisch (China)" + "'", str27, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) '#');
        double double22 = org.apache.commons.math.stat.StatUtils.min(doubleArray17);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray24);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32, 1, 0);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double double38 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray24, doubleArray32);
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = tTestImpl15.t(doubleArray17, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.5553480614894135d + "'", double28 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 3.5553480614894135d + "'", double39 == 3.5553480614894135d);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.print((long) ' ');
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        byte[] byteArray13 = new byte[] {};
        printStream12.write(byteArray13);
        printStream8.write(byteArray13);
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        printStream18.println(' ');
        printStream18.print(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = locale26.getDisplayLanguage(locale29);
        boolean boolean32 = locale26.hasExtensions();
        java.lang.Object[] objArray34 = null;
        java.io.PrintWriter printWriter35 = printWriter25.printf(locale26, "German", objArray34);
        java.util.Locale locale36 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter25.printf(locale36, "zh-CN", objArray52);
        java.io.PrintStream printStream56 = printStream8.format("Chinese (Taiwan)", objArray52);
        java.io.PrintWriter printWriter57 = printWriter5.printf("Franz\366sisch (Frankreich)", objArray52);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale[] localeArray67 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList68);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 1, mathException62, (byte) 0, localeList70, 1225.0d };
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("hi!", objArray72);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!");
        java.lang.Object[] objArray76 = new java.lang.Object[] { mathException73, mathException75 };
        java.io.PrintWriter printWriter77 = printWriter5.format("zh", objArray76);
        printWriter5.print('x');
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Deutsch" + "'", str31, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[org.apache.commons.math.MathException: hi!, org.apache.commons.math.MathException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[org.apache.commons.math.MathException: hi!, org.apache.commons.math.MathException: hi!]");
        org.junit.Assert.assertNotNull(printWriter77);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.write(1);
        printStream1.println((long) 2147483646);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "Italienisch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Italienisch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.Object obj3 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "FRA" + "'", str1, "FRA");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "France" + "'", str2, "France");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "fr_FR");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "fr_FR");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "fr_FR");
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, 1225.0d);
        double double26 = org.apache.commons.math.stat.StatUtils.max(doubleArray17);
        double double27 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = tTestImpl15.homoscedasticTTest(doubleArray17, doubleArray29, 0.03172551743055352d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setNumberOfSuccesses(10);
        double double13 = pascalDistribution6.getProbabilityOfSuccess();
        double double15 = pascalDistribution6.cumulativeProbability(100);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = pascalDistribution6.cumulativeProbability((int) 'u', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Chinese (China)", (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=chinese (china)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setProbabilityOfSuccess(0.0d);
        double double14 = pascalDistribution6.probability(10.0d);
        int int15 = pascalDistribution6.getNumberOfSuccesses();
        double double16 = pascalDistribution6.getProbabilityOfSuccess();
        // The following exception was thrown during execution in test generation
        try {
            pascalDistribution6.setProbabilityOfSuccess(120.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(outputStream0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = tTestImpl1.tTest(10.0d, statisticalSummary24, 0.691462461274013d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.691462461274013");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.lang.String[] strArray1 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray1);
        java.lang.String str3 = mathException2.getPattern();
        java.lang.Object[] objArray4 = mathException2.getArguments();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.print((int) (byte) 10);
        printWriter5.print(false);
        printWriter5.print(100.0d);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getISO3Country();
        printWriter5.print((java.lang.Object) locale14);
        java.lang.String str17 = locale14.toString();
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FRA" + "'", str15, "FRA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fr_FR" + "'", str17, "fr_FR");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        byte[] byteArray6 = new byte[] {};
        printStream5.write(byteArray6);
        printStream1.write(byteArray6);
        printStream1.println();
        printStream1.print(false);
        printStream1.print(true);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        printStream15.println(' ');
        printStream15.flush();
        java.util.Locale locale21 = null;
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        java.io.PrintStream printStream31 = new java.io.PrintStream("French (France)");
        printStream31.println((float) (short) -1);
        printStream31.println(' ');
        printStream31.print(false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream31);
        java.io.PrintWriter printWriter40 = printWriter38.append(' ');
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        boolean boolean42 = locale41.hasExtensions();
        java.lang.String str43 = locale41.getDisplayVariant();
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = locale46.getISO3Country();
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleKeys();
        java.lang.String str49 = locale44.getDisplayCountry(locale46);
        java.lang.String str50 = locale41.getDisplayName(locale46);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale[] localeArray61 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 1, mathException56, (byte) 0, localeList64, 1225.0d };
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("de", objArray66);
        java.io.PrintWriter printWriter69 = printWriter40.printf(locale41, "zho", objArray66);
        java.io.PrintWriter printWriter70 = printWriter28.printf("", objArray66);
        java.io.PrintStream printStream71 = printStream15.printf(locale21, "und", objArray66);
        printStream1.println((java.lang.Object) printStream15);
        java.io.PrintStream printStream74 = printStream1.append('#');
        java.io.PrintStream printStream76 = new java.io.PrintStream("French (France)");
        printStream76.print((long) ' ');
        java.io.PrintStream printStream80 = new java.io.PrintStream("French (France)");
        byte[] byteArray81 = new byte[] {};
        printStream80.write(byteArray81);
        printStream76.write(byteArray81);
        printStream76.println();
        printStream76.print(false);
        printStream76.print(true);
        printStream76.println((double) ' ');
        printStream1.println((java.lang.Object) printStream76);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "German" + "'", str45, "German");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "FRA" + "'", str47, "FRA");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "allemand" + "'", str50, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.lang.String[] strArray1 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray1);
        java.lang.String str3 = mathException2.getPattern();
        java.lang.Throwable[] throwableArray4 = mathException2.getSuppressed();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 100L);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.print(true);
        printStream1.println(true);
        printStream1.println((int) (byte) 0);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        java.io.PrintStream printStream25 = new java.io.PrintStream("French (France)");
        printStream25.println((float) (short) -1);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Locale[] localeArray39 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList40);
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 1, mathException34, (byte) 0, localeList42, 1225.0d };
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("de", objArray44);
        java.io.PrintStream printStream47 = printStream25.printf(locale28, "hi!", objArray44);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49, (double) '#');
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        printStream47.print((java.lang.Object) doubleArray49);
        double[] doubleArray57 = new double[] { '#' };
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray49, doubleArray57);
        double double60 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray17, doubleArray57);
        java.io.PrintStream printStream62 = new java.io.PrintStream("French (France)");
        printStream62.println((float) (short) -1);
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray73 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList74 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74, languageRangeArray73);
        java.util.Locale[] localeArray76 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList77 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList77, localeArray76);
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, (java.util.Collection<java.util.Locale>) localeList77);
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 1, mathException71, (byte) 0, localeList79, 1225.0d };
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("hi!", objArray81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("de", objArray81);
        java.io.PrintStream printStream84 = printStream62.printf(locale65, "hi!", objArray81);
        double[] doubleArray86 = new double[] { '#' };
        double double87 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray86);
        double double88 = org.apache.commons.math.stat.StatUtils.variance(doubleArray86);
        double double90 = org.apache.commons.math.stat.StatUtils.variance(doubleArray86, (double) '#');
        double double91 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray86);
        printStream84.print((java.lang.Object) doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = tTestImpl15.pairedTTest(doubleArray17, doubleArray86, (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1225.0d + "'", double58 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[35.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1225.0d + "'", double87 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1225.0d + "'", double91 == 1225.0d);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = tTestImpl14.tTest(statisticalSummary15, statisticalSummary16, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2, 1, 0);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, (double) '#');
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.min(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray2, doubleArray9);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19, (double) '#');
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        double double26 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray2, doubleArray19);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double35 = org.apache.commons.math.stat.StatUtils.sum(doubleArray30);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38);
        double double41 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.sum(doubleArray38);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, 1, 0);
        double double51 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray46);
        double double52 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray38, doubleArray46);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double55 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray30, doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = tTestImpl0.pairedT(doubleArray19, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.5553480614894135d + "'", double34 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 34.99999999999999d + "'", double41 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 3.5553480614894135d + "'", double42 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 34.99999999999999d + "'", double51 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.5553480614894135d + "'", double53 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("\u65e5\u6587");
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, 1225.0d, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = tTestImpl14.tTest((double) 120, doubleArray17, (-13.607141222220143d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -13.607141222220143");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray0, 97, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray24);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32, 1, 0);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double double38 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray24, doubleArray32);
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = tTestImpl15.t(doubleArray17, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.5553480614894135d + "'", double28 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 3.5553480614894135d + "'", double39 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 34.99999999999999d + "'", double40 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 3.5553480614894135d + "'", double42 == 3.5553480614894135d);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "\uc774\ud0c8\ub9ac\uc544");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ?????????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        printStream1.println(8.999999999999998d);
        printStream1.print(false);
        printStream1.print((long) 1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.lang.String str7 = locale2.getDisplayCountry(locale4);
        java.lang.String str8 = locale1.getDisplayName(locale4);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strMap17);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, strMap25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList26, strMap27);
        java.lang.String[] strArray36 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags(languageRangeList28, (java.util.Collection<java.lang.String>) strList37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags(languageRangeList18, (java.util.Collection<java.lang.String>) strList39, filteringMode41);
        java.lang.String str43 = java.util.Locale.lookupTag(languageRangeList13, (java.util.Collection<java.lang.String>) strList42);
        boolean boolean44 = locale1.equals((java.lang.Object) languageRangeList13);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "German" + "'", str3, "German");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FRA" + "'", str5, "FRA");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode41.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("");
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale1.getDisplayScript(locale3);
        boolean boolean6 = locale3.hasExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 8.999999999999998d);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize(0);
        hypergeometricDistribution10.setSampleSize((int) (short) 100);
        hypergeometricDistribution10.setNumberOfSuccesses((int) (short) 10);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.max(doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.min(doubleArray27);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray37);
        double double41 = org.apache.commons.math.stat.StatUtils.sum(doubleArray37);
        double double42 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = tTestImpl15.pairedT(doubleArray27, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 34.99999999999999d + "'", double40 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        double double7 = fDistribution6.getDenominatorDegreesOfFreedom();
        double double8 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom(0.24999999999999964d);
        fDistribution6.setNumeratorDegreesOfFreedom(12.2d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setRegion("de");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder2.setRegion("\uc911\uad6d");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory0.createTDistribution((double) 2147483647);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution11 = distributionFactory0.createPascalDistribution(1, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = pascalDistribution11.cumulativeProbability((int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertNotNull(pascalDistribution11);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.print('x');
        printWriter8.print((long) (short) 1);
        printWriter8.println((float) (short) 10);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("");
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        java.io.PrintWriter printWriter51 = printWriter8.format("fra", (java.lang.Object[]) throwableArray50);
        printWriter51.print("\uc911\uad6d");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        java.io.PrintStream printStream32 = new java.io.PrintStream("French (France)");
        printStream32.println((float) (short) -1);
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale[] localeArray46 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList47);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 1, mathException41, (byte) 0, localeList49, 1225.0d };
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("de", objArray51);
        java.io.PrintStream printStream54 = printStream32.printf(locale35, "hi!", objArray51);
        double[] doubleArray56 = new double[] { '#' };
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray56);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray56);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray56, (double) '#');
        double double61 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray56);
        printStream54.print((java.lang.Object) doubleArray56);
        double double63 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray56);
        double double65 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray56, 0.9646641462260455d);
        double double66 = org.apache.commons.math.stat.StatUtils.variance(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = tTestImpl12.t((double) 10, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1225.0d + "'", double57 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1225.0d + "'", double61 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 34.99999999999999d + "'", double63 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 35.0d + "'", double65 == 35.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("");
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale1.getDisplayScript(locale3);
        java.lang.String str6 = locale1.getScript();
        java.lang.Object obj7 = locale1.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "zh");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "zh");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "zh");
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = tTestImpl14.tTest(statisticalSummary15, statisticalSummary16, 515.7d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 515.7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        double[] doubleArray1 = new double[] { 120.0d };
        // The following exception was thrown during execution in test generation
        try {
            double double5 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (-1), 100, (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[120.0]");
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getScale();
        double double5 = weibullDistribution3.getScale();
        weibullDistribution3.setShape(10.0d);
        weibullDistribution3.setShape((double) (short) 1);
        double double10 = weibullDistribution3.getScale();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        gammaDistribution9.setAlpha(100.0d);
        double double12 = gammaDistribution9.getAlpha();
        gammaDistribution9.setBeta((double) 100L);
        gammaDistribution9.setAlpha(0.03172551743055352d);
        double double17 = gammaDistribution9.getAlpha();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.03172551743055352d + "'", double17 == 0.03172551743055352d);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = poissonDistribution8.inverseCumulativeProbability((double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl7.t(statisticalSummary21, statisticalSummary22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.MathException: de");
        java.io.PrintStream printStream3 = printStream1.append('u');
        org.junit.Assert.assertNotNull(printStream3);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double double22 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray14, (double) (short) 100);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14, 1, 2147483647);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double36 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray27, 0.03172551743055352d);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = tTestImpl12.tTest(doubleArray14, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("eng");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder3.removeUnicodeLocaleAttribute("Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Chinese (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "german");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory26 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution29 = distributionFactory26.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution32 = distributionFactory26.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution35 = distributionFactory26.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory26.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        tTestImpl15.setDistribution(tDistribution37);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double double46 = org.apache.commons.math.stat.StatUtils.sum(doubleArray41);
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray41);
        double double48 = org.apache.commons.math.stat.StatUtils.mean(doubleArray41);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, (double) '#');
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double[] doubleArray59 = new double[] { '#' };
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray59);
        double double61 = org.apache.commons.math.stat.StatUtils.variance(doubleArray59);
        double double62 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray59);
        double double63 = org.apache.commons.math.stat.StatUtils.sum(doubleArray59);
        double double64 = org.apache.commons.math.stat.StatUtils.max(doubleArray59);
        double double65 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray50, doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = tTestImpl15.tTest(doubleArray41, doubleArray59, (double) 2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 2.147483646E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(distributionFactory26);
        org.junit.Assert.assertNotNull(weibullDistribution29);
        org.junit.Assert.assertNotNull(cauchyDistribution32);
        org.junit.Assert.assertNotNull(gammaDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 34.99999999999999d + "'", double44 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.5553480614894135d + "'", double45 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 3.5553480614894135d + "'", double57 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1225.0d + "'", double60 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 34.99999999999999d + "'", double62 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale1.getDisplayCountry(locale4);
        java.lang.String str6 = locale0.getDisplayCountry(locale4);
        java.lang.String str7 = locale4.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet8 = locale4.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "FRA" + "'", str2, "FRA");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "French (France)" + "'", str3, "French (France)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud504\ub791\uc2a4" + "'", str5, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str6, "\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(charSet8);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = tTestImpl26.tTest(12.2d, doubleArray28, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "it");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: it");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zho");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = printStream1.printf("Italienisch", (java.lang.Object[]) strArray5);
        printStream8.println(true);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream8);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double29 = tTestImpl26.homoscedasticTTest(statisticalSummary27, statisticalSummary28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(117.0d, statisticalSummary3, (double) 2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 2.147483646E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        double[] doubleArray2 = new double[] { 0, 10 };
        // The following exception was thrown during execution in test generation
        try {
            double double5 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2, (int) (byte) 0, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, 10.0]");
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = tTestImpl15.tTest(statisticalSummary16, statisticalSummary17, 0.003594758625082406d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en");
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("de", objArray23);
        java.io.PrintStream printStream26 = printStream4.printf(locale7, "hi!", objArray23);
        java.io.PrintStream printStream27 = printStream1.printf("FR", objArray23);
        printStream1.println(true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream27);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("Chinesisch (China)", (java.lang.Throwable) mathException2);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        java.lang.Class<?> wildcardClass5 = mathException4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 0, 0);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray8);
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray8);
        double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray8);
        double double16 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray8, (double) (short) 100);
        double double17 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray8);
        double double19 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 0.24999999999999964d);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (int) (byte) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 34.99999999999999d + "'", double11 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.5553480614894135d + "'", double12 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray3);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, (double) '#');
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray3, doubleArray9);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) '#');
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl1.t(doubleArray9, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.println(true);
        java.io.PrintStream printStream44 = new java.io.PrintStream("French (France)");
        printStream44.println((float) (short) -1);
        java.io.PrintStream printStream47 = new java.io.PrintStream((java.io.OutputStream) printStream44);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream44);
        char[] charArray50 = new char[] { ' ' };
        printWriter48.write(charArray50);
        java.io.PrintStream printStream53 = new java.io.PrintStream("French (France)");
        printStream53.println((float) (short) -1);
        java.io.PrintStream printStream56 = new java.io.PrintStream((java.io.OutputStream) printStream53);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.OutputStream) printStream53);
        char[] charArray59 = new char[] { ' ' };
        printWriter57.write(charArray59);
        printWriter48.println(charArray59);
        printWriter48.println((int) (short) 0);
        char[] charArray65 = new char[] { '4' };
        printWriter48.println(charArray65);
        printWriter8.println(charArray65);
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.util.Locale[] localeArray79 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.util.Locale>) localeList80);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 1, mathException74, (byte) 0, localeList82, 1225.0d };
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", objArray84);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("");
        mathException85.addSuppressed((java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException87);
        java.lang.Throwable[] throwableArray90 = mathException87.getSuppressed();
        java.io.PrintWriter printWriter91 = printWriter8.printf(locale68, "France", (java.lang.Object[]) throwableArray90);
        // The following exception was thrown during execution in test generation
        try {
            printWriter91.write("FR", 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 11");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ ]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[4]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(printWriter91);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray10, 100, (int) (short) -1, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 12.2d);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (int) 'u', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl12.tTest(515.7d, statisticalSummary14, 0.6321205588285574d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.6321205588285574");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder2.addUnicodeLocaleAttribute("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setScript("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: org.apache.commons.math.MathException: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.util.Locale locale1 = new java.util.Locale("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale1.toString(), "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("Chinese (Taiwan)", "GB");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: GB");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double28 = tTestImpl15.homoscedasticT(statisticalSummary26, statisticalSummary27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = tTestImpl15.tTest(statisticalSummary16, statisticalSummary17, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        printStream1.print((int) ' ');
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        printStream7.println(' ');
        printStream7.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        printStream15.print((long) (short) 0);
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream22);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream22);
        char[] charArray28 = new char[] { ' ' };
        printWriter26.write(charArray28);
        printStream15.print(charArray28);
        printStream7.println(charArray28);
        printStream1.println(charArray28);
        java.io.PrintStream printStream34 = new java.io.PrintStream("French (France)");
        printStream34.println((float) (short) -1);
        java.io.PrintStream printStream38 = new java.io.PrintStream("French (France)");
        printStream38.println((float) (short) -1);
        java.io.PrintStream printStream41 = new java.io.PrintStream((java.io.OutputStream) printStream38);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream38);
        java.lang.Object obj43 = null;
        printWriter42.println(obj43);
        printWriter42.write((int) (short) 1);
        java.io.PrintStream printStream48 = new java.io.PrintStream("French (France)");
        printStream48.println((float) (short) -1);
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream48);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream48);
        char[] charArray54 = new char[] { ' ' };
        printWriter52.write(charArray54);
        java.io.PrintStream printStream57 = new java.io.PrintStream("French (France)");
        printStream57.println((float) (short) -1);
        java.io.PrintStream printStream60 = new java.io.PrintStream((java.io.OutputStream) printStream57);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.OutputStream) printStream57);
        char[] charArray63 = new char[] { ' ' };
        printWriter61.write(charArray63);
        printWriter52.println(charArray63);
        printWriter42.write(charArray63, (int) (byte) 0, 1);
        printStream34.print(charArray63);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintStream printStream73 = printStream34.append('#');
        java.io.PrintStream printStream75 = new java.io.PrintStream("French (France)");
        byte[] byteArray76 = new byte[] {};
        printStream75.write(byteArray76);
        java.io.PrintStream printStream79 = new java.io.PrintStream("French (France)");
        printStream79.print((long) ' ');
        java.io.PrintStream printStream83 = new java.io.PrintStream("French (France)");
        byte[] byteArray84 = new byte[] {};
        printStream83.write(byteArray84);
        printStream79.write(byteArray84);
        printStream75.write(byteArray84);
        printStream34.write(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray84, (int) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ ]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ ]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ ]");
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = cauchyDistribution6.inverseCumulativeProbability((double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability argument must be between 0 and 1 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution4 = distributionFactory0.createChiSquareDistribution((double) (short) 1);
        chiSquaredDistribution4.setDegreesOfFreedom((double) 2147483647);
        chiSquaredDistribution4.setDegreesOfFreedom((double) 120);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(chiSquaredDistribution4);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GB" + "'", str1, "GB");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (United Kingdom)" + "'", str2, "English (United Kingdom)");
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("zho");
        printWriter1.print((float) 1L);
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.setLanguage("German");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setRegion("de");
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale10.getDisplayVariant();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale13.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = locale15.getISO3Country();
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        java.lang.String str18 = locale13.getDisplayCountry(locale15);
        java.lang.String str19 = locale10.getDisplayName(locale15);
        java.util.Locale.Builder builder20 = builder9.setLocale(locale15);
        java.util.Locale locale21 = builder9.build();
        java.lang.String str22 = locale21.getISO3Country();
        printWriter1.println((java.lang.Object) str22);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "German" + "'", str14, "German");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "FRA" + "'", str16, "FRA");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "allemand" + "'", str19, "allemand");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "FRA" + "'", str22, "FRA");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) (short) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("fran\347ais (France)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=franc?ais(france)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale12.getISO3Country();
        java.lang.String str14 = locale12.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        java.lang.String str17 = locale11.getDisplayCountry(locale15);
        java.lang.String str18 = locale15.getDisplayVariant();
        java.util.Locale.Builder builder19 = builder10.setLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder10.setExtension(' ', "en");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FRA" + "'", str13, "FRA");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French (France)" + "'", str14, "French (France)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud504\ub791\uc2a4" + "'", str16, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str17, "\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        java.util.Locale locale2 = new java.util.Locale("anglais", "\u65e5\u6587");
        java.lang.String str3 = locale2.getDisplayVariant();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, 1225.0d);
        double double32 = org.apache.commons.math.stat.StatUtils.max(doubleArray23);
        double double33 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = tTestImpl14.tTest(doubleArray16, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        double double10 = pascalDistribution6.probability((int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            pascalDistribution6.setProbabilityOfSuccess((double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        java.util.Locale locale32 = java.util.Locale.UK;
        printWriter5.println((java.lang.Object) locale32);
        boolean boolean34 = locale32.hasExtensions();
        java.util.Locale locale35 = locale32.stripExtensions();
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        java.util.Locale locale2 = new java.util.Locale("Chinese (Taiwan)", "Italian");
        java.lang.String str3 = locale2.getDisplayVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "chinese (taiwan)_ITALIAN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        printWriter5.println(false);
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        printStream35.println(' ');
        printStream35.print(false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        java.io.PrintWriter printWriter44 = printWriter42.append(' ');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale45.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = locale50.getISO3Country();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.lang.String str53 = locale48.getDisplayCountry(locale50);
        java.lang.String str54 = locale45.getDisplayName(locale50);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale[] localeArray65 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList66);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 1, mathException60, (byte) 0, localeList68, 1225.0d };
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("de", objArray70);
        java.io.PrintWriter printWriter73 = printWriter44.printf(locale45, "zho", objArray70);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Locale[] localeArray83 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.util.Locale>) localeList84);
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 1, mathException78, (byte) 0, localeList86, 1225.0d };
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("hi!", objArray88);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("");
        mathException89.addSuppressed((java.lang.Throwable) mathException91);
        java.lang.Object[] objArray93 = mathException89.getArguments();
        java.io.PrintWriter printWriter94 = printWriter5.printf(locale45, "it", objArray93);
        printWriter94.println(true);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "German" + "'", str49, "German");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FRA" + "'", str51, "FRA");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "allemand" + "'", str54, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter94);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl12.tTest(statisticalSummary30, statisticalSummary31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter27.println();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, 1, 0);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double32 = org.apache.commons.math.stat.StatUtils.min(doubleArray25);
        double double33 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray18, doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = tTestImpl15.tTest((double) ' ', doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        java.util.Locale locale1 = new java.util.Locale("FRA");
        org.junit.Assert.assertEquals(locale1.toString(), "fra");
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        printStream1.print((int) ' ');
        printStream1.print(100.0f);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getISO3Language();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayScript(locale17);
        java.lang.String str19 = locale17.getDisplayLanguage();
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        printStream22.println(' ');
        printStream22.print(false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream22);
        java.io.PrintWriter printWriter31 = printWriter29.append(' ');
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale32.getDisplayVariant();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.lang.String str38 = locale37.getISO3Country();
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleKeys();
        java.lang.String str40 = locale35.getDisplayCountry(locale37);
        java.lang.String str41 = locale32.getDisplayName(locale37);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale[] localeArray52 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList53);
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 1, mathException47, (byte) 0, localeList55, 1225.0d };
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("de", objArray57);
        java.io.PrintWriter printWriter60 = printWriter31.printf(locale32, "zho", objArray57);
        java.io.PrintStream printStream61 = printStream14.format(locale17, "fra", objArray57);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Locale[] localeArray71 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.util.Locale>) localeList72);
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 1, mathException66, (byte) 0, localeList74, 1225.0d };
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("de", objArray76);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("French", objArray57, (java.lang.Throwable) mathException78);
        java.io.PrintStream printStream80 = printStream1.printf("\uc601\uc5b4", objArray57);
        printStream80.print('#');
        printStream80.println();
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "German" + "'", str19, "German");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "German" + "'", str36, "German");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "FRA" + "'", str38, "FRA");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "allemand" + "'", str41, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream80);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.print(false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream19 = new java.io.PrintStream("en");
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 1, mathException31, (byte) 0, localeList39, 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("de", objArray41);
        java.io.PrintStream printStream44 = printStream22.printf(locale25, "hi!", objArray41);
        java.io.PrintStream printStream45 = printStream19.printf("FR", objArray41);
        java.io.PrintWriter printWriter46 = printWriter16.format("zh-CN", objArray41);
        java.io.PrintStream printStream47 = printStream1.printf("Chinese (China)", objArray41);
        java.io.PrintStream printStream49 = printStream1.append('a');
        printStream49.println('#');
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream49);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale[] localeArray29 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList30);
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 1, mathException24, (byte) 0, localeList32, 1225.0d };
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("de", objArray34);
        java.io.PrintStream printStream37 = printStream15.printf(locale18, "hi!", objArray34);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39, (double) '#');
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        printStream37.print((java.lang.Object) doubleArray39);
        double double46 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray39);
        double double48 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray39, 0.9646641462260455d);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, (double) '#');
        double double55 = org.apache.commons.math.stat.StatUtils.product(doubleArray50);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = tTestImpl13.pairedTTest(doubleArray39, doubleArray50, 0.9646641462260455d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.9646641462260455");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 34.99999999999999d + "'", double46 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory26 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution29 = distributionFactory26.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution32 = distributionFactory26.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution35 = distributionFactory26.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory26.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        tTestImpl15.setDistribution(tDistribution37);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl15.homoscedasticTTest(statisticalSummary40, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(distributionFactory26);
        org.junit.Assert.assertNotNull(weibullDistribution29);
        org.junit.Assert.assertNotNull(cauchyDistribution32);
        org.junit.Assert.assertNotNull(gammaDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream57.print(Double.NaN);
        printStream57.print(true);
        printStream57.close();
        printStream57.print("French (France)");
        java.io.PrintStream printStream66 = printStream57.append((java.lang.CharSequence) "\u65e5\u6587");
        printStream66.print("\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(printStream66);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        printWriter5.println(false);
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        printStream35.println(' ');
        printStream35.print(false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        java.io.PrintWriter printWriter44 = printWriter42.append(' ');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale45.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = locale50.getISO3Country();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.lang.String str53 = locale48.getDisplayCountry(locale50);
        java.lang.String str54 = locale45.getDisplayName(locale50);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale[] localeArray65 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList66);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 1, mathException60, (byte) 0, localeList68, 1225.0d };
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("de", objArray70);
        java.io.PrintWriter printWriter73 = printWriter44.printf(locale45, "zho", objArray70);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Locale[] localeArray83 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.util.Locale>) localeList84);
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 1, mathException78, (byte) 0, localeList86, 1225.0d };
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("hi!", objArray88);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("");
        mathException89.addSuppressed((java.lang.Throwable) mathException91);
        java.lang.Object[] objArray93 = mathException89.getArguments();
        java.io.PrintWriter printWriter94 = printWriter5.printf(locale45, "it", objArray93);
        // The following exception was thrown during execution in test generation
        try {
            printWriter5.write("ITA", (int) (short) 0, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "German" + "'", str49, "German");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FRA" + "'", str51, "FRA");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "allemand" + "'", str54, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter94);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) '#');
        fDistribution6.setDenominatorDegreesOfFreedom((double) (byte) 1);
        double double11 = fDistribution6.getNumeratorDegreesOfFreedom();
        double double12 = fDistribution6.getDenominatorDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        printWriter5.println(false);
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        printStream35.println(' ');
        printStream35.print(false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        java.io.PrintWriter printWriter44 = printWriter42.append(' ');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale45.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = locale50.getISO3Country();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.lang.String str53 = locale48.getDisplayCountry(locale50);
        java.lang.String str54 = locale45.getDisplayName(locale50);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale[] localeArray65 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList66);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 1, mathException60, (byte) 0, localeList68, 1225.0d };
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("de", objArray70);
        java.io.PrintWriter printWriter73 = printWriter44.printf(locale45, "zho", objArray70);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Locale[] localeArray83 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.util.Locale>) localeList84);
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 1, mathException78, (byte) 0, localeList86, 1225.0d };
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("hi!", objArray88);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("");
        mathException89.addSuppressed((java.lang.Throwable) mathException91);
        java.lang.Object[] objArray93 = mathException89.getArguments();
        java.io.PrintWriter printWriter94 = printWriter5.printf(locale45, "it", objArray93);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = locale45.getUnicodeLocaleType("Vereinigtes K\366nigreich");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Vereinigtes Ko?nigreich");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "German" + "'", str49, "German");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FRA" + "'", str51, "FRA");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "allemand" + "'", str54, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter94);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution((double) (short) 1, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory0.createGammaDistribution((-1.0d), 515.7000000000007d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution14);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray10, (int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale2.getCountry();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.lang.String str9 = locale2.getDisplayName(locale7);
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = locale11.getDisplayName();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale11.getDisplayCountry(locale14);
        java.lang.String str16 = locale10.getDisplayCountry(locale14);
        java.lang.String str17 = locale7.getDisplayScript(locale10);
        java.util.Set<java.lang.String> strSet18 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale10.getDisplayCountry();
        java.lang.Object obj20 = locale10.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FRA" + "'", str12, "FRA");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "French (France)" + "'", str13, "French (France)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud504\ub791\uc2a4" + "'", str15, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str16, "\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Italy" + "'", str19, "Italy");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "it_IT");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "it_IT");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "it_IT");
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\uc774\ud0c8\ub9ac\uc544\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???????????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.print((long) ' ');
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        byte[] byteArray13 = new byte[] {};
        printStream12.write(byteArray13);
        printStream8.write(byteArray13);
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        printStream18.println(' ');
        printStream18.print(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = locale26.getDisplayLanguage(locale29);
        boolean boolean32 = locale26.hasExtensions();
        java.lang.Object[] objArray34 = null;
        java.io.PrintWriter printWriter35 = printWriter25.printf(locale26, "German", objArray34);
        java.util.Locale locale36 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter25.printf(locale36, "zh-CN", objArray52);
        java.io.PrintStream printStream56 = printStream8.format("Chinese (Taiwan)", objArray52);
        java.io.PrintWriter printWriter57 = printWriter5.printf("Franz\366sisch (Frankreich)", objArray52);
        printWriter5.println((int) (byte) 100);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory60 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution63 = distributionFactory60.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution66 = distributionFactory60.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double67 = pascalDistribution66.getProbabilityOfSuccess();
        printWriter5.print((java.lang.Object) pascalDistribution66);
        printWriter5.print((double) 1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Deutsch" + "'", str31, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(distributionFactory60);
        org.junit.Assert.assertNotNull(weibullDistribution63);
        org.junit.Assert.assertNotNull(pascalDistribution66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution9 = distributionFactory0.createFDistribution(0.0d, (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray15);
        double double22 = org.apache.commons.math.stat.StatUtils.min(doubleArray15);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, 1, 0);
        double double46 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray41);
        double double47 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray33, doubleArray41);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double50 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray25, doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = tTestImpl13.homoscedasticTTest(doubleArray15, doubleArray33, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.5553480614894135d + "'", double37 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 34.99999999999999d + "'", double46 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.5553480614894135d + "'", double48 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1225.0d);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 120, (int) (byte) -1, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("hi!", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=hi!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("und");
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getScript();
        java.lang.String str4 = locale0.getDisplayName();
        java.lang.String str5 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-CN" + "'", str2, "zh-CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese (China)" + "'", str4, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double5 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray2);
        double double8 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2);
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray2);
        double double10 = org.apache.commons.math.stat.StatUtils.min(doubleArray2);
        double double13 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2, (int) 'u', 2147483647);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale[] localeArray29 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList30);
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 1, mathException24, (byte) 0, localeList32, 1225.0d };
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("de", objArray34);
        java.io.PrintStream printStream37 = printStream15.printf(locale18, "hi!", objArray34);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39, (double) '#');
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        printStream37.print((java.lang.Object) doubleArray39);
        double[] doubleArray47 = new double[] { '#' };
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double49 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray39, doubleArray47);
        double double50 = org.apache.commons.math.stat.StatUtils.sum(doubleArray39);
        java.io.PrintStream printStream52 = new java.io.PrintStream("French (France)");
        printStream52.println((float) (short) -1);
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale[] localeArray66 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList67);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 1, mathException61, (byte) 0, localeList69, 1225.0d };
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", objArray71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("de", objArray71);
        java.io.PrintStream printStream74 = printStream52.printf(locale55, "hi!", objArray71);
        double[] doubleArray76 = new double[] { '#' };
        double double77 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray76);
        double double78 = org.apache.commons.math.stat.StatUtils.variance(doubleArray76);
        double double80 = org.apache.commons.math.stat.StatUtils.variance(doubleArray76, (double) '#');
        double double81 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray76);
        printStream74.print((java.lang.Object) doubleArray76);
        double[] doubleArray84 = new double[] { '#' };
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray84);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray76, doubleArray84);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray39, doubleArray84);
        double double88 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = tTestImpl0.pairedTTest(doubleArray2, doubleArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 34.99999999999999d + "'", double5 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.5553480614894135d + "'", double6 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1225.0d + "'", double48 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[35.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1225.0d + "'", double77 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1225.0d + "'", double81 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[35.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1225.0d + "'", double85 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1225.0d + "'", double88 == 1225.0d);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray11 = new double[] { 'u', (short) 100 };
        double double12 = tTestImpl7.tTest(10.0d, doubleArray11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl7.tTest(statisticalSummary13, statisticalSummary14, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[117.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.054800971425164935d + "'", double12 == 0.054800971425164935d);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\uc601\uc5b4", "it");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: it");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zho");
        printStream1.println((int) (byte) 0);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("French (France)");
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale16.getDisplayVariant();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale16.getDisplayLanguage(locale19);
        boolean boolean22 = locale16.hasExtensions();
        java.lang.Object[] objArray24 = null;
        java.io.PrintWriter printWriter25 = printWriter15.printf(locale16, "German", objArray24);
        java.lang.Object obj26 = null;
        printWriter25.print(obj26);
        printWriter25.println(1);
        java.io.PrintStream printStream33 = new java.io.PrintStream("French (France)");
        printStream33.println((float) (short) -1);
        printStream33.println(' ');
        printStream33.flush();
        java.util.Locale locale39 = null;
        java.io.PrintStream printStream42 = new java.io.PrintStream("French (France)");
        printStream42.println((float) (short) -1);
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream42);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.OutputStream) printStream42);
        java.io.PrintStream printStream49 = new java.io.PrintStream("French (France)");
        printStream49.println((float) (short) -1);
        printStream49.println(' ');
        printStream49.print(false);
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.OutputStream) printStream49);
        java.io.PrintWriter printWriter58 = printWriter56.append(' ');
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        boolean boolean60 = locale59.hasExtensions();
        java.lang.String str61 = locale59.getDisplayVariant();
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.lang.String str65 = locale64.getISO3Country();
        java.util.Set<java.lang.String> strSet66 = locale64.getUnicodeLocaleKeys();
        java.lang.String str67 = locale62.getDisplayCountry(locale64);
        java.lang.String str68 = locale59.getDisplayName(locale64);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.util.Locale[] localeArray79 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.util.Locale>) localeList80);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 1, mathException74, (byte) 0, localeList82, 1225.0d };
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", objArray84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("de", objArray84);
        java.io.PrintWriter printWriter87 = printWriter58.printf(locale59, "zho", objArray84);
        java.io.PrintWriter printWriter88 = printWriter46.printf("", objArray84);
        java.io.PrintStream printStream89 = printStream33.printf(locale39, "und", objArray84);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("fra", objArray84);
        java.io.PrintWriter printWriter91 = printWriter25.printf("Chinesisch (China)", objArray84);
        java.io.PrintStream printStream92 = printStream1.printf(locale5, "JPN", objArray84);
        java.lang.String str94 = locale5.getExtension('u');
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Deutsch" + "'", str21, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "German" + "'", str63, "German");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "FRA" + "'", str65, "FRA");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "allemand" + "'", str68, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(printWriter88);
        org.junit.Assert.assertNotNull(printStream89);
        org.junit.Assert.assertNotNull(printWriter91);
        org.junit.Assert.assertNotNull(printStream92);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 100L);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter14 = printWriter12.append('#');
        char[] charArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter12.write(charArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter14);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Chinese" + "'", str2, "Chinese");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) ' ', (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("France");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale4.getISO3Language();
        java.lang.String str6 = locale4.getDisplayName();
        java.lang.String str7 = locale4.getCountry();
        boolean boolean8 = languageRange1.equals((java.lang.Object) locale4);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "france" + "'", str3, "france");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (France)" + "'", str6, "French (France)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FR" + "'", str7, "FR");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = tTestImpl12.t(1.0000000000000402d, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, 1, 0);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray15, doubleArray23);
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = tTestImpl12.tTest((double) (byte) -1, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.util.Locale locale1 = new java.util.Locale("allemand");
        org.junit.Assert.assertEquals(locale1.toString(), "allemand");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1225.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (-9.992007221626409E-16d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: -9.992007221626409E-16");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("JPN");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        double double10 = pascalDistribution6.probability((int) 'x');
        double double12 = pascalDistribution6.cumulativeProbability((int) (byte) 10);
        double double13 = pascalDistribution6.getProbabilityOfSuccess();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = pascalDistribution6.inverseCumulativeProbability(117.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.close();
        printStream1.print(true);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder0.setLanguage("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setExtension('#', "zh_TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray11 = new double[] { 'u', (short) 100 };
        double double12 = tTestImpl7.tTest(10.0d, doubleArray11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14, (double) '#');
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, (double) '#');
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.sum(doubleArray23);
        double double31 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray23, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl7.homoscedasticT(doubleArray14, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[117.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.054800971425164935d + "'", double12 == 0.054800971425164935d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) 'a', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl12.tTest((double) 120, statisticalSummary14, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("ko");
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.tTest(Double.NEGATIVE_INFINITY, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        java.util.Locale locale3 = new java.util.Locale("allemand", "org.apache.commons.math.MathException: fra", "ko_KR");
        java.util.Locale locale6 = new java.util.Locale("org.apache.commons.math.MathException: de", "KOR");
        java.util.Locale locale7 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        org.junit.Assert.assertEquals(locale3.toString(), "allemand_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FRA_ko_KR");
        org.junit.Assert.assertEquals(locale6.toString(), "org.apache.commons.math.mathexception: de_KOR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.mathexception: de" + "'", str8, "org.apache.commons.math.mathexception: de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("italien", (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution15 = distributionFactory0.createWeibullDistribution((double) 100.0f, 1225.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.TDistribution tDistribution17 = distributionFactory0.createTDistribution((double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(weibullDistribution15);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.util.Locale locale3 = new java.util.Locale("tedesco", "francese (Francia)", "tedesco");
        org.junit.Assert.assertEquals(locale3.toString(), "tedesco_FRANCESE (FRANCIA)_tedesco");
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = tTestImpl14.tTest(1.0000000000000402d, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = locale2.getISO3Language();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale2.getDisplayScript(locale6);
        java.lang.String str9 = locale2.toLanguageTag();
        java.lang.String str10 = locale0.getDisplayLanguage(locale2);
        java.lang.String str11 = locale2.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "FRA" + "'", str1, "FRA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        cauchyDistribution6.setScale((double) 1.0f);
        double double10 = cauchyDistribution6.getMedian();
        double double11 = cauchyDistribution6.getScale();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter38.print(10L);
        printWriter38.println();
        java.io.PrintWriter printWriter43 = printWriter38.append('a');
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.Writer) printWriter38);
        printWriter44.println("GB");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter43);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.print((long) ' ');
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        byte[] byteArray13 = new byte[] {};
        printStream12.write(byteArray13);
        printStream8.write(byteArray13);
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        printStream18.println(' ');
        printStream18.print(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = locale26.getDisplayLanguage(locale29);
        boolean boolean32 = locale26.hasExtensions();
        java.lang.Object[] objArray34 = null;
        java.io.PrintWriter printWriter35 = printWriter25.printf(locale26, "German", objArray34);
        java.util.Locale locale36 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter25.printf(locale36, "zh-CN", objArray52);
        java.io.PrintStream printStream56 = printStream8.format("Chinese (Taiwan)", objArray52);
        java.io.PrintWriter printWriter57 = printWriter5.printf("Franz\366sisch (Frankreich)", objArray52);
        printWriter5.println((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter63 = printWriter5.append((java.lang.CharSequence) "\uc601\uc5b4", (int) (byte) 100, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Deutsch" + "'", str31, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution10 = distributionFactory0.createExponentialDistribution((double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution13 = distributionFactory0.createGammaDistribution(3.5553480614894135d, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: beta must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(exponentialDistribution10);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale2.getCountry();
        java.lang.Object obj5 = locale2.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "de");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream7 = new java.io.PrintStream("zh-CN");
        printStream7.print('a');
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.print((long) ' ');
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        byte[] byteArray16 = new byte[] {};
        printStream15.write(byteArray16);
        printStream11.write(byteArray16);
        printStream7.write(byteArray16);
        printStream5.write(byteArray16);
        printStream5.println(false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution29 = distributionFactory23.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory23.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory23.createTDistribution((double) 100L);
        tDistribution34.setDegreesOfFreedom(52.0d);
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double40 = tTestImpl1.t(515.7000000000007d, statisticalSummary39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(fDistribution29);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        java.lang.String[] strArray42 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter44 = printWriter39.format("French", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter39, false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter39);
        java.io.PrintWriter printWriter49 = printWriter47.append('a');
        printWriter47.println('#');
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printWriter49);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double36 = org.apache.commons.math.stat.StatUtils.product(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.sum(doubleArray31);
        double double39 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray31, (double) (short) 100);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double double46 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray31, doubleArray41);
        double[] doubleArray52 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray52, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = tTestImpl12.homoscedasticT(doubleArray41, doubleArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 34.99999999999999d + "'", double44 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.5553480614894135d + "'", double45 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 515.7000000000007d + "'", double55 == 515.7000000000007d);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray28, 12.2d);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, 0.36787944117144233d);
        double double40 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = tTestImpl26.homoscedasticTTest(doubleArray28, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.println((int) (short) 100);
        java.io.PrintStream printStream25 = new java.io.PrintStream("French (France)");
        printStream25.println((float) (short) -1);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream25);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream25);
        char[] charArray31 = new char[] { ' ' };
        printWriter29.write(charArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("French (France)");
        printStream34.println((float) (short) -1);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream34);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream34);
        char[] charArray40 = new char[] { ' ' };
        printWriter38.write(charArray40);
        printWriter29.println(charArray40);
        printWriter29.println((int) (short) 0);
        char[] charArray46 = new char[] { '4' };
        printWriter29.println(charArray46);
        printWriter8.print((java.lang.Object) printWriter29);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter49.println("deu");
        printWriter49.println(true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ ]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4]");
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("French");
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double28 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.sum(doubleArray23);
        double double31 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray23, (double) (short) 100);
        double double32 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray15, doubleArray23);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl13.tTest(doubleArray15, doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8, (double) '#');
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double15 = org.apache.commons.math.stat.StatUtils.min(doubleArray8);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) '4', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution29 = distributionFactory23.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory23.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory23.createTDistribution((double) 100L);
        tDistribution34.setDegreesOfFreedom(52.0d);
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = tTestImpl1.tTest(statisticalSummary38, statisticalSummary39, 0.36787944117144233d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(fDistribution29);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl20 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        tTestImpl12.setDistribution(tDistribution19);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.product(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = tTestImpl12.t(doubleArray23, doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double[] doubleArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double35 = tTestImpl15.homoscedasticT(doubleArray27, doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("French (France)");
        printStream14.println((float) (short) -1);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale[] localeArray28 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList29);
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 1, mathException23, (byte) 0, localeList31, 1225.0d };
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("de", objArray33);
        java.io.PrintStream printStream36 = printStream14.printf(locale17, "hi!", objArray33);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38, (double) '#');
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        printStream36.print((java.lang.Object) doubleArray38);
        double double45 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray38);
        double double47 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray38, 0.9646641462260455d);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38);
        double[] doubleArray49 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double50 = tTestImpl12.pairedT(doubleArray38, doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 34.99999999999999d + "'", double45 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        java.io.PrintStream printStream30 = printStream1.append((java.lang.CharSequence) "german");
        java.util.Locale.Category category31 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream33 = new java.io.PrintStream("French (France)");
        printStream33.println((float) (short) -1);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintStream printStream55 = printStream33.printf(locale36, "hi!", objArray52);
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.lang.String str57 = locale36.getDisplayLanguage(locale56);
        java.util.Locale.setDefault(category31, locale36);
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder59.setLanguage("German");
        java.util.Locale locale62 = builder59.build();
        java.util.Locale.Builder builder63 = builder59.clearExtensions();
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.lang.String str65 = locale64.getISO3Country();
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.lang.String str67 = locale66.getISO3Language();
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale66.getDisplayScript(locale68);
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.lang.String str71 = locale70.getDisplayName();
        java.lang.String str72 = locale66.getDisplayScript(locale70);
        java.lang.String str73 = locale66.toLanguageTag();
        java.lang.String str74 = locale64.getDisplayLanguage(locale66);
        java.util.Locale.Builder builder75 = builder59.setLocale(locale66);
        java.util.Locale.setDefault(category31, locale66);
        printStream30.println((java.lang.Object) locale66);
        java.lang.Class<?> wildcardClass78 = locale66.getClass();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category31.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str57, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "german");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "FRA" + "'", str65, "FRA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "und" + "'", str73, "und");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "French" + "'", str74, "French");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl12.t(statisticalSummary30, statisticalSummary31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        java.util.Locale locale3 = new java.util.Locale("KOR", "zh", "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "kor_ZH");
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory6 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory6.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double10 = weibullDistribution9.getScale();
        double double11 = weibullDistribution9.getScale();
        double double12 = weibullDistribution9.getScale();
        printWriter5.println((java.lang.Object) double12);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        printStream16.println(' ');
        printStream16.print(false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream16);
        java.io.PrintWriter printWriter25 = printWriter23.append(' ');
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = locale31.getISO3Country();
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        java.lang.String str34 = locale29.getDisplayCountry(locale31);
        java.lang.String str35 = locale26.getDisplayName(locale31);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale[] localeArray46 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList47);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 1, mathException41, (byte) 0, localeList49, 1225.0d };
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("de", objArray51);
        java.io.PrintWriter printWriter54 = printWriter25.printf(locale26, "zho", objArray51);
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale57 = java.util.Locale.PRC;
        java.lang.String str58 = locale56.getDisplayName(locale57);
        java.lang.String[] strArray60 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter61 = printWriter54.format(locale56, "de", (java.lang.Object[]) strArray60);
        java.io.PrintWriter printWriter62 = printWriter5.printf("Chinesisch (China)", (java.lang.Object[]) strArray60);
        printWriter5.println(false);
        org.junit.Assert.assertNotNull(distributionFactory6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "German" + "'", str30, "German");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "FRA" + "'", str32, "FRA");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "allemand" + "'", str35, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printWriter62);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.homoscedasticTTest(statisticalSummary14, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("ja", "fran\347ais (France)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: franc?ais (France)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution((double) 10.0f, 0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution17 = distributionFactory0.createExponentialDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution20 = distributionFactory0.createBinomialDistribution(120, 0.0d);
        double double21 = binomialDistribution20.getProbabilityOfSuccess();
        // The following exception was thrown during execution in test generation
        try {
            binomialDistribution20.setProbabilityOfSuccess((double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution15);
        org.junit.Assert.assertNotNull(exponentialDistribution17);
        org.junit.Assert.assertNotNull(binomialDistribution20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.homoscedasticTTest(statisticalSummary11, statisticalSummary12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.println((int) (short) 100);
        printWriter8.flush();
        java.util.Locale locale25 = null;
        java.lang.String[] strArray27 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter28 = printWriter8.printf(locale25, "Franz\366sisch (Frankreich)", (java.lang.Object[]) strArray27);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter32 = printWriter28.append((java.lang.CharSequence) "JPN", 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printWriter28);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet1);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "fr_FR");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: fr_FR");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = tTestImpl12.tTest(statisticalSummary30, statisticalSummary31, 0.002555130330427813d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (-1), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        java.io.PrintStream printStream30 = printStream1.append((java.lang.CharSequence) "german");
        printStream30.println('#');
        printStream30.println();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream30);
        java.io.PrintWriter printWriter36 = printWriter34.append('x');
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter34, true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(printWriter36);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, (double) '#');
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray14, doubleArray23);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, (double) '#');
        double double33 = org.apache.commons.math.stat.StatUtils.min(doubleArray23);
        double[] doubleArray35 = new double[] { '#' };
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35, 1, 0);
        double double41 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray35, (double) (byte) 100);
        double double42 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = tTestImpl12.tTest(doubleArray23, doubleArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 34.99999999999999d + "'", double42 == 34.99999999999999d);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution10 = distributionFactory0.createBinomialDistribution((int) (byte) 0, Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        printWriter5.println(charArray16);
        java.lang.Object[] objArray20 = null;
        java.io.PrintWriter printWriter21 = printWriter5.printf("allemand", objArray20);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter21, false);
        printWriter23.println(0);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(printWriter21);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) '#');
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double double24 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray16, (double) 1.0f);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = tTestImpl14.tTest(doubleArray16, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 3.5553480614894135d + "'", double25 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        double double8 = cauchyDistribution6.getScale();
        double double9 = cauchyDistribution6.getScale();
        // The following exception was thrown during execution in test generation
        try {
            cauchyDistribution6.setScale(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) 1L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 'a', 35.0d);
        double double10 = normalDistribution9.getMean();
        double double12 = normalDistribution9.cumulativeProbability((double) (-1L));
        double double13 = normalDistribution9.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 97.0d + "'", double10 == 97.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.002555130330427813d + "'", double12 == 0.002555130330427813d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 97.0d + "'", double13 == 97.0d);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double7 = pascalDistribution6.getProbabilityOfSuccess();
        pascalDistribution6.setNumberOfSuccesses((int) (byte) 0);
        pascalDistribution6.setProbabilityOfSuccess(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            pascalDistribution6.setProbabilityOfSuccess((double) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.36787944117144233d);
        poissonDistribution8.setMean(3.5553480614894135d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, (double) '#');
        double double32 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        double double44 = org.apache.commons.math.stat.StatUtils.min(doubleArray34, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = tTestImpl15.pairedTTest(doubleArray27, doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.5553480614894135d + "'", double38 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 34.99999999999999d + "'", double41 == 34.99999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("Franz\366sisch (Frankreich)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Franzo?sisch (Frankreich) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution12 = distributionFactory0.createCauchyDistribution((double) 0, 117.0d);
        double double14 = cauchyDistribution12.inverseCumulativeProbability((double) 1.0f);
        cauchyDistribution12.setScale(97.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(cauchyDistribution12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + Double.POSITIVE_INFINITY + "'", double14 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double27 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray22);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray15, doubleArray22);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = tTestImpl13.homoscedasticTTest(doubleArray22, doubleArray32, 0.9646159093607598d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.9646159093607598");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) 1L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 'a', 35.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution12 = distributionFactory0.createBinomialDistribution(100, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) '#');
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double25 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray17, (double) 1.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, 1, 0);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double[] doubleArray35 = new double[] { '#' };
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35, (double) '#');
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35);
        double double42 = org.apache.commons.math.stat.StatUtils.min(doubleArray35);
        double double43 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray28, doubleArray35);
        double[] doubleArray45 = new double[] { '#' };
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45, (double) '#');
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double51 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray45);
        double double52 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray28, doubleArray45);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = tTestImpl15.tTest(doubleArray17, doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 34.99999999999999d + "'", double51 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.5553480614894135d + "'", double53 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList9, strMap10);
        java.lang.String[] strArray19 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags(languageRangeList11, (java.util.Collection<java.lang.String>) strList20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList27, strMap28);
        java.lang.String[] strArray37 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags(languageRangeList29, (java.util.Collection<java.lang.String>) strList38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags(languageRangeList11, (java.util.Collection<java.lang.String>) strList38, filteringMode41);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strMap47);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, strMap52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList53, strMap54);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, strMap62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList63, strMap64);
        java.lang.String[] strArray73 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags(languageRangeList65, (java.util.Collection<java.lang.String>) strList74);
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList76);
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags(languageRangeList53, (java.util.Collection<java.lang.String>) strList76);
        java.util.Locale.FilteringMode filteringMode79 = null;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags(languageRangeList48, (java.util.Collection<java.lang.String>) strList78, filteringMode79);
        java.util.Locale.FilteringMode filteringMode81 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList78, filteringMode81);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap83 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList84 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap83);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode41.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(languageRangeList55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertTrue("'" + filteringMode81 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode81.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(languageRangeList84);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("US", "JPN");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: JPN");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "French" + "'", str1, "French");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14, 0.36787944117144233d);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double27 = org.apache.commons.math.stat.StatUtils.sum(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double35 = org.apache.commons.math.stat.StatUtils.product(doubleArray30);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray30);
        double double38 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray30, (double) (short) 100);
        double double39 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray22, doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = tTestImpl12.homoscedasticT(doubleArray14, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.5553480614894135d + "'", double28 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.5553480614894135d + "'", double34 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        printStream1.print((int) ' ');
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        printStream7.println(' ');
        printStream7.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        printStream15.print((long) (short) 0);
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream22);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream22);
        char[] charArray28 = new char[] { ' ' };
        printWriter26.write(charArray28);
        printStream15.print(charArray28);
        printStream7.println(charArray28);
        printStream1.println(charArray28);
        java.io.PrintStream printStream36 = printStream1.append((java.lang.CharSequence) "English (United Kingdom)", 0, (int) (short) 1);
        printStream36.print("US");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ ]");
        org.junit.Assert.assertNotNull(printStream36);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.homoscedasticT(statisticalSummary14, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (int) 'a', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl15.t(statisticalSummary16, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("zho", "\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: ?????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale6.getDisplayLanguage(locale7);
        java.lang.String str10 = locale7.getScript();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale7);
        java.util.Locale locale12 = locale7.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = locale12.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Italienisch" + "'", str9, "Italienisch");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl20 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        tTestImpl12.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double24 = tTestImpl12.tTest(statisticalSummary22, statisticalSummary23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale12.getISO3Country();
        java.lang.String str14 = locale12.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        java.lang.String str17 = locale11.getDisplayCountry(locale15);
        java.lang.String str18 = locale15.getDisplayVariant();
        java.util.Locale.Builder builder19 = builder10.setLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder10.addUnicodeLocaleAttribute("GB");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: GB [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FRA" + "'", str13, "FRA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French (France)" + "'", str14, "French (France)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud504\ub791\uc2a4" + "'", str16, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str17, "\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        double[] doubleArray5 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5, (double) (byte) 100);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray5);
        double double10 = org.apache.commons.math.stat.StatUtils.mean(doubleArray5);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5, (double) 0.0f);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.max(doubleArray14);
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray5, doubleArray14, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 515.7000000000007d + "'", double8 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 61.0d + "'", double9 == 61.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 12.2d + "'", double10 == 12.2d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 515.7d + "'", double12 == 515.7d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getVariant();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = locale1.getDisplayCountry(locale4);
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(charSet6);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("france", "Franz\366sisch (Frankreich)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Franzo?sisch (Frankreich)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 100L);
        org.apache.commons.math.distribution.FDistribution fDistribution18 = distributionFactory0.createFDistribution(0.9646641462260455d, (double) 120);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.WeibullDistribution weibullDistribution21 = distributionFactory0.createWeibullDistribution((-1.0d), 12.2d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertNotNull(fDistribution18);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        weibullDistribution3.setScale((double) 100);
        double double7 = weibullDistribution3.getScale();
        double double8 = weibullDistribution3.getShape();
        double double9 = weibullDistribution3.getShape();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = tTestImpl14.t(statisticalSummary15, statisticalSummary16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution8 = distributionFactory0.createExponentialDistribution(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory30 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution33 = distributionFactory30.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution36 = distributionFactory30.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory30.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory30.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tTestImpl12.setDistribution(tDistribution41);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) '#');
        double double51 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, (double) (byte) -1);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46, 1, (int) (byte) 0);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray58);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double63 = org.apache.commons.math.stat.StatUtils.sum(doubleArray58);
        double double64 = org.apache.commons.math.stat.StatUtils.max(doubleArray58);
        double double65 = org.apache.commons.math.stat.StatUtils.min(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = tTestImpl12.homoscedasticTTest(doubleArray46, doubleArray58, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory30);
        org.junit.Assert.assertNotNull(weibullDistribution33);
        org.junit.Assert.assertNotNull(fDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 34.99999999999999d + "'", double61 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.5553480614894135d + "'", double62 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 35.0d + "'", double65 == 35.0d);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getUnicodeLocaleType("Italian");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Italian");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.List<java.util.Locale> localeList6 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap7);
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange languageRange12 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] { languageRange10, languageRange12 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale19 = new java.util.Locale("allemand", "allemand", "");
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet20, filteringMode21);
        java.lang.String str23 = java.util.Locale.lookupTag(languageRangeList8, (java.util.Collection<java.lang.String>) strSet20);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localeList6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals(locale19.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode21.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 100L);
        org.apache.commons.math.distribution.FDistribution fDistribution18 = distributionFactory0.createFDistribution(0.9646641462260455d, (double) 120);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory0.createChiSquareDistribution((double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution23 = distributionFactory0.createGammaDistribution((-13.607141222220143d), 0.24999999999999964d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertNotNull(fDistribution18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale7.getDisplayVariant();
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = locale10.getISO3Country();
        java.lang.String str12 = locale10.getDisplayName();
        java.lang.String str13 = locale7.getDisplayVariant(locale10);
        java.lang.String str14 = locale5.getDisplayVariant(locale7);
        java.lang.String str15 = locale1.getDisplayLanguage(locale7);
        java.lang.String str17 = locale7.getExtension('a');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FRA" + "'", str11, "FRA");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str12, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinesisch" + "'", str15, "Chinesisch");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        normalDistribution4.setStandardDeviation(35.0d);
        double double7 = normalDistribution4.getStandardDeviation();
        normalDistribution4.setMean(0.0d);
        normalDistribution4.setMean((double) (byte) 0);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.print((int) (byte) 10);
        printWriter5.print(false);
        printWriter5.println((double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            printWriter5.write("Franz\366sisch", (int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 132");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) 100);
        exponentialDistribution11.setMean(34.99999999999999d);
        double double14 = exponentialDistribution11.getMean();
        exponentialDistribution11.setMean((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            exponentialDistribution11.setMean((double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.print(false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream19 = new java.io.PrintStream("en");
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 1, mathException31, (byte) 0, localeList39, 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("de", objArray41);
        java.io.PrintStream printStream44 = printStream22.printf(locale25, "hi!", objArray41);
        java.io.PrintStream printStream45 = printStream19.printf("FR", objArray41);
        java.io.PrintWriter printWriter46 = printWriter16.format("zh-CN", objArray41);
        java.io.PrintStream printStream47 = printStream1.printf("Chinese (China)", objArray41);
        java.io.PrintStream printStream49 = printStream1.append('a');
        printStream1.println((float) 'a');
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream49);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        weibullDistribution3.setScale(1.0d);
        double double6 = weibullDistribution3.getShape();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale[] localeArray9 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 1, mathException4, (byte) 0, localeList12, 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("");
        mathException15.addSuppressed((java.lang.Throwable) mathException17);
        java.lang.Object[] objArray19 = mathException15.getArguments();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("ko_KR", objArray19);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("Chinesisch (China)", (java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale[] localeArray35 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList36);
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 1, mathException30, (byte) 0, localeList38, 1225.0d };
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("");
        mathException41.addSuppressed((java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException43);
        java.lang.String[] strArray48 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("allemand", (java.lang.Object[]) strArray48);
        mathException45.addSuppressed((java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException50);
        mathException23.addSuppressed((java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        mathException20.addSuppressed((java.lang.Throwable) mathException54);
        java.lang.String str56 = mathException54.toString();
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str56, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getScale();
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution3.setShape((double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl20 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        tTestImpl12.setDistribution(tDistribution19);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = tTestImpl12.tTest((double) '#', doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.5553480614894135d + "'", double28 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        printStream2.println(' ');
        printStream2.flush();
        java.util.Locale locale8 = null;
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        printStream18.println(' ');
        printStream18.print(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        java.io.PrintWriter printWriter27 = printWriter25.append(' ');
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getDisplayVariant();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.lang.String str36 = locale31.getDisplayCountry(locale33);
        java.lang.String str37 = locale28.getDisplayName(locale33);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale[] localeArray48 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList49);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 1, mathException43, (byte) 0, localeList51, 1225.0d };
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("de", objArray53);
        java.io.PrintWriter printWriter56 = printWriter27.printf(locale28, "zho", objArray53);
        java.io.PrintWriter printWriter57 = printWriter15.printf("", objArray53);
        java.io.PrintStream printStream58 = printStream2.printf(locale8, "und", objArray53);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("fra", objArray53);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("KOR");
        mathException59.addSuppressed((java.lang.Throwable) mathException61);
        java.lang.String str63 = mathException61.toString();
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "German" + "'", str32, "German");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FRA" + "'", str34, "FRA");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "allemand" + "'", str37, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.apache.commons.math.MathException: KOR" + "'", str63, "org.apache.commons.math.MathException: KOR");
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution((double) 10.0f, 0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution17 = distributionFactory0.createExponentialDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution20 = distributionFactory0.createBinomialDistribution(120, 0.0d);
        double double21 = binomialDistribution20.getProbabilityOfSuccess();
        // The following exception was thrown during execution in test generation
        try {
            binomialDistribution20.setProbabilityOfSuccess(3.5553480614894135d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution15);
        org.junit.Assert.assertNotNull(exponentialDistribution17);
        org.junit.Assert.assertNotNull(binomialDistribution20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (byte) 100);
        double double8 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, (int) '4', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.t(0.308537538725987d, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl12.homoscedasticT(statisticalSummary30, statisticalSummary31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "ko");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ko");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.36787944117144233d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution11 = distributionFactory0.createPascalDistribution(97, (double) 120);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.print('x');
        printWriter8.print((long) (short) 1);
        printWriter8.println((float) (short) 10);
        printWriter8.println((double) 97);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl15.t((double) '4', statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.Object obj2 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ITA" + "'", str1, "ITA");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "it_IT");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "it_IT");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "it_IT");
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.println((int) (short) 100);
        java.io.PrintStream printStream25 = new java.io.PrintStream("French (France)");
        printStream25.println((float) (short) -1);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream25);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream25);
        char[] charArray31 = new char[] { ' ' };
        printWriter29.write(charArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("French (France)");
        printStream34.println((float) (short) -1);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream34);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream34);
        char[] charArray40 = new char[] { ' ' };
        printWriter38.write(charArray40);
        printWriter29.println(charArray40);
        printWriter29.println((int) (short) 0);
        char[] charArray46 = new char[] { '4' };
        printWriter29.println(charArray46);
        printWriter8.print((java.lang.Object) printWriter29);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter49.print((float) 1);
        printWriter49.print('#');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ ]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4]");
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14, 1, 0);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21, (double) '#');
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double28 = org.apache.commons.math.stat.StatUtils.min(doubleArray21);
        double double29 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray14, doubleArray21);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31, (double) '#');
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double38 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray14, doubleArray31);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40);
        double double43 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double double45 = org.apache.commons.math.stat.StatUtils.sum(doubleArray40);
        double double46 = org.apache.commons.math.stat.StatUtils.max(doubleArray40);
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = tTestImpl12.tTest(doubleArray31, doubleArray40, (-13.607141222220143d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -13.607141222220143");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 34.99999999999999d + "'", double43 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 3.5553480614894135d + "'", double44 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale4.getDisplayScript(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale4.getDisplayScript(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder0.setUnicodeLocaleKeyword("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", "italien");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: org.apache.commons.math.MathException: org.apache.commons.math.MathException:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = tTestImpl7.tTest((double) 0, statisticalSummary9, (double) 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 2.147483647E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray13 = null;
        double[] doubleArray19 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double20 = org.apache.commons.math.stat.StatUtils.max(doubleArray19);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl12.tTest(doubleArray13, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 515.7000000000007d + "'", double22 == 515.7000000000007d);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=?????????(???????)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 100L);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.close();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "French");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: French");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        byte[] byteArray6 = new byte[] {};
        printStream5.write(byteArray6);
        printStream1.write(byteArray6);
        printStream1.println();
        printStream1.print(false);
        printStream1.print(true);
        printStream1.println((double) ' ');
        printStream1.println(97);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(12.2d, 10.0d);
        gammaDistribution15.setBeta(0.6321205588285574d);
        double double19 = gammaDistribution15.cumulativeProbability(117.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.println("zh");
        printStream4.print("hi!");
        printStream4.close();
        java.io.PrintStream printStream11 = printStream4.append((java.lang.CharSequence) "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        java.io.PrintStream printStream13 = new java.io.PrintStream("French (France)");
        printStream13.println((float) (short) -1);
        printStream13.println(' ');
        printStream13.print(false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream13);
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale21.getDisplayVariant();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale21.getDisplayLanguage(locale24);
        boolean boolean27 = locale21.hasExtensions();
        java.lang.Object[] objArray29 = null;
        java.io.PrintWriter printWriter30 = printWriter20.printf(locale21, "German", objArray29);
        printWriter20.print((double) 100.0f);
        printWriter20.print((long) 1);
        java.io.PrintStream printStream36 = new java.io.PrintStream("French (France)");
        printStream36.println((float) (short) -1);
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.println((float) (short) -1);
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream40);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.OutputStream) printStream40);
        java.lang.Object obj45 = null;
        printWriter44.println(obj45);
        printWriter44.write((int) (short) 1);
        java.io.PrintStream printStream50 = new java.io.PrintStream("French (France)");
        printStream50.println((float) (short) -1);
        java.io.PrintStream printStream53 = new java.io.PrintStream((java.io.OutputStream) printStream50);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.OutputStream) printStream50);
        char[] charArray56 = new char[] { ' ' };
        printWriter54.write(charArray56);
        java.io.PrintStream printStream59 = new java.io.PrintStream("French (France)");
        printStream59.println((float) (short) -1);
        java.io.PrintStream printStream62 = new java.io.PrintStream((java.io.OutputStream) printStream59);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.OutputStream) printStream59);
        char[] charArray65 = new char[] { ' ' };
        printWriter63.write(charArray65);
        printWriter54.println(charArray65);
        printWriter44.write(charArray65, (int) (byte) 0, 1);
        printStream36.print(charArray65);
        printWriter20.write(charArray65);
        printStream4.print(charArray65);
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Deutsch" + "'", str26, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ ]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ ]");
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream8.print((long) 0);
        printStream8.print((double) 0L);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray10, (-1), (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double35 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray27, (double) (short) 100);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double39 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray27, (double) 100.0f);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray41);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, 1225.0d, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = tTestImpl15.homoscedasticTTest(doubleArray27, doubleArray41, 8.999999999999998d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 8.999999999999998");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 34.99999999999999d + "'", double44 == 34.99999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double double18 = org.apache.commons.math.stat.StatUtils.sum(doubleArray13);
        double double19 = org.apache.commons.math.stat.StatUtils.max(doubleArray13);
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray13);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double28 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.sum(doubleArray23);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31, 1, 0);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray23, doubleArray31);
        double double38 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray13, doubleArray31);
        double double40 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray13, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = tTestImpl1.t(0.9646641462260455d, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.5553480614894135d + "'", double17 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "JPN");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: JPN");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.sum(doubleArray28);
        double double36 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray28, (double) (short) 100);
        double double37 = org.apache.commons.math.stat.StatUtils.sum(doubleArray28);
        double double38 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double40 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray28, (double) 100.0f);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution44 = distributionFactory41.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution45 = distributionFactory41.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution47 = distributionFactory41.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl48 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution47);
        double[] doubleArray52 = new double[] { 'u', (short) 100 };
        double double53 = tTestImpl48.tTest(10.0d, doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = tTestImpl26.pairedTTest(doubleArray28, doubleArray52, 35.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 35.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 34.99999999999999d + "'", double38 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(weibullDistribution44);
        org.junit.Assert.assertNotNull(normalDistribution45);
        org.junit.Assert.assertNotNull(tDistribution47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[117.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.054800971425164935d + "'", double53 == 0.054800971425164935d);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 100L);
        double double16 = gammaDistribution15.getAlpha();
        gammaDistribution15.setAlpha(1225.0d);
        double double19 = gammaDistribution15.getBeta();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution14 = distributionFactory0.createExponentialDistribution((double) (short) 10);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution17 = distributionFactory0.createWeibullDistribution((double) (byte) 10, (double) '4');
        double double18 = weibullDistribution17.getShape();
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution17.setShape((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(exponentialDistribution14);
        org.junit.Assert.assertNotNull(weibullDistribution17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        char[] charArray14 = new char[] { ' ' };
        printWriter12.write(charArray14);
        printStream1.print(charArray14);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream23 = new java.io.PrintStream("French (France)");
        printStream23.println((float) (short) -1);
        printStream23.println(' ');
        printStream23.flush();
        java.util.Locale locale29 = null;
        java.io.PrintStream printStream32 = new java.io.PrintStream("French (France)");
        printStream32.println((float) (short) -1);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream32);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream32);
        java.io.PrintStream printStream39 = new java.io.PrintStream("French (France)");
        printStream39.println((float) (short) -1);
        printStream39.println(' ');
        printStream39.print(false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        java.io.PrintWriter printWriter48 = printWriter46.append(' ');
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        boolean boolean50 = locale49.hasExtensions();
        java.lang.String str51 = locale49.getDisplayVariant();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale52.getDisplayName();
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = locale54.getISO3Country();
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleKeys();
        java.lang.String str57 = locale52.getDisplayCountry(locale54);
        java.lang.String str58 = locale49.getDisplayName(locale54);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale[] localeArray69 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 1, mathException64, (byte) 0, localeList72, 1225.0d };
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("de", objArray74);
        java.io.PrintWriter printWriter77 = printWriter48.printf(locale49, "zho", objArray74);
        java.io.PrintWriter printWriter78 = printWriter36.printf("", objArray74);
        java.io.PrintStream printStream79 = printStream23.printf(locale29, "und", objArray74);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("fra", objArray74);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("", objArray74);
        java.io.PrintStream printStream82 = printStream1.format("\uc774\ud0c8\ub9ac\uc544\uc5b4", objArray74);
        double[] doubleArray84 = new double[] { '#' };
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray84);
        double double86 = org.apache.commons.math.stat.StatUtils.variance(doubleArray84);
        double double87 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray84);
        double double88 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray84);
        double double89 = org.apache.commons.math.stat.StatUtils.product(doubleArray84);
        double double90 = org.apache.commons.math.stat.StatUtils.sum(doubleArray84);
        double double91 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray84);
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray84, 0, 1);
        double double96 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray84, (double) 10.0f);
        printStream82.print((java.lang.Object) double96);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ]");
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "allemand" + "'", str53, "allemand");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "FRA" + "'", str55, "FRA");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "allemand" + "'", str58, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[35.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1225.0d + "'", double85 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 34.99999999999999d + "'", double87 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 3.5553480614894135d + "'", double88 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 35.0d + "'", double89 == 35.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 35.0d + "'", double90 == 35.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 34.99999999999999d + "'", double91 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 35.0d + "'", double94 == 35.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 35.0d + "'", double96 == 35.0d);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double double23 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray15, (double) (short) 100);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double30 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray15, doubleArray25);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double37 = org.apache.commons.math.stat.StatUtils.product(doubleArray32);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray32);
        double double39 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double double40 = org.apache.commons.math.stat.StatUtils.product(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = tTestImpl13.homoscedasticT(doubleArray25, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 34.99999999999999d + "'", double39 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale3.getDisplayCountry(locale5);
        java.lang.String str9 = locale0.getDisplayName(locale5);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale12.getISO3Country();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.lang.String str15 = locale10.getDisplayCountry(locale12);
        java.lang.String str16 = locale0.getDisplayScript(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = locale0.getUnicodeLocaleType("zho");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: zho");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "allemand" + "'", str4, "allemand");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "allemand" + "'", str9, "allemand");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "allemand" + "'", str11, "allemand");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FRA" + "'", str13, "FRA");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("fra");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setUnicodeLocaleKeyword("US", "\uc601\uc5b4\uc601\uad6d)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: ????? (??????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize((int) (byte) 10);
        int int14 = hypergeometricDistribution10.getSampleSize();
        // The following exception was thrown during execution in test generation
        try {
            hypergeometricDistribution10.setPopulationSize(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: population size must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.print('x');
        java.io.PrintWriter printWriter42 = printWriter8.append('a');
        printWriter8.println();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter42);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayScript(locale9);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale7.getDisplayScript(locale11);
        java.lang.String str14 = locale7.toLanguageTag();
        java.lang.String str15 = locale5.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder16 = builder0.setLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder0.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "French" + "'", str15, "French");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        weibullDistribution3.setScale((double) 100);
        double double7 = weibullDistribution3.getScale();
        weibullDistribution3.setShape(0.24999999999999964d);
        double double10 = weibullDistribution3.getScale();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = weibullDistribution3.cumulativeProbability((double) 10, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("ko", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl20 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        tTestImpl12.setDistribution(tDistribution19);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray24);
        double double31 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double33 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray24, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = tTestImpl12.t((double) 'u', doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.5553480614894135d + "'", double28 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.print((long) 'u');
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale[] localeArray35 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList36);
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 1, mathException30, (byte) 0, localeList38, 1225.0d };
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("de", objArray40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("Chinesisch (China)", objArray40);
        java.io.PrintWriter printWriter44 = printWriter8.format("French", objArray40);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.Writer) printWriter44);
        printWriter44.write("zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter44);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.io.PrintStream printStream6 = new java.io.PrintStream("French (France)");
        printStream6.println((float) (short) -1);
        printStream6.println(' ');
        printStream6.print(false);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream6);
        java.io.PrintWriter printWriter15 = printWriter13.append(' ');
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale16.getDisplayVariant();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = locale21.getISO3Country();
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleKeys();
        java.lang.String str24 = locale19.getDisplayCountry(locale21);
        java.lang.String str25 = locale16.getDisplayName(locale21);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 1, mathException31, (byte) 0, localeList39, 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("de", objArray41);
        java.io.PrintWriter printWriter44 = printWriter15.printf(locale16, "zho", objArray41);
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale45.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = locale50.getISO3Country();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.lang.String str53 = locale48.getDisplayCountry(locale50);
        java.lang.String str54 = locale45.getDisplayName(locale50);
        java.lang.String str55 = locale45.getDisplayScript();
        java.lang.String str56 = locale16.getDisplayScript(locale45);
        java.util.Locale locale58 = new java.util.Locale("org.apache.commons.math.MathException: de");
        java.lang.String str59 = locale58.getISO3Country();
        java.lang.String str60 = locale16.getDisplayLanguage(locale58);
        boolean boolean61 = locale0.equals((java.lang.Object) str60);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-CN" + "'", str2, "zh-CN");
        org.junit.Assert.assertNotNull(strSet3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chine" + "'", str4, "Chine");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "allemand" + "'", str20, "allemand");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "FRA" + "'", str22, "FRA");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "allemand" + "'", str25, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "allemand" + "'", str49, "allemand");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FRA" + "'", str51, "FRA");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "allemand" + "'", str54, "allemand");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals(locale58.toString(), "org.apache.commons.math.mathexception: de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "German" + "'", str60, "German");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 52, 2147483647, 515.7000000000007d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: 515.7000000000007");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strMap16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList17, strMap18);
        java.lang.String[] strArray27 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strList28);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList30);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strList30, filteringMode32);
        java.lang.String str34 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap37);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale[] localeArray42 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList43);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strMap46);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.parse("USA", strMap49);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, strMap54);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, strMap62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList63, strMap64);
        java.lang.String[] strArray73 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags(languageRangeList65, (java.util.Collection<java.lang.String>) strList74);
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList76);
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags(languageRangeList55, (java.util.Collection<java.lang.String>) strList76, filteringMode78);
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Locale[] localeArray83 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.util.Locale>) localeList84);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter(languageRangeList55, (java.util.Collection<java.util.Locale>) localeList84);
        java.util.Locale locale88 = java.util.Locale.lookup(languageRangeList50, (java.util.Collection<java.util.Locale>) localeList84);
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter(languageRangeList47, (java.util.Collection<java.util.Locale>) localeList84, filteringMode89);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter(languageRangeList38, (java.util.Collection<java.util.Locale>) localeList90);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(languageRangeList55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode78.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertNull(locale88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode89.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertNotNull(localeList91);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        printWriter1.write("fra");
        printWriter1.write("Chinese");
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        java.io.PrintStream printStream29 = new java.io.PrintStream("French (France)");
        printStream29.println((float) (short) -1);
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream29);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream29);
        char[] charArray35 = new char[] { ' ' };
        printWriter33.write(charArray35);
        printWriter24.println(charArray35);
        printWriter24.println((int) (short) 0);
        char[] charArray41 = new char[] { '4' };
        printWriter24.println(charArray41);
        printWriter18.print(charArray41);
        printWriter18.println("English (United States)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ ]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4]");
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = locale2.getISO3Language();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getISO3Language();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Locale locale8 = locale0.stripExtensions();
        java.lang.String str9 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de" + "'", str1, "de");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "German" + "'", str7, "German");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "allemand" + "'", str9, "allemand");
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, 1, 0);
        double double38 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double42 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray17, doubleArray25);
        java.io.PrintStream printStream44 = new java.io.PrintStream("French (France)");
        printStream44.println((float) (short) -1);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale[] localeArray58 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.util.Locale>) localeList59);
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 1, mathException53, (byte) 0, localeList61, 1225.0d };
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("hi!", objArray63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("de", objArray63);
        java.io.PrintStream printStream66 = printStream44.printf(locale47, "hi!", objArray63);
        double[] doubleArray68 = new double[] { '#' };
        double double69 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68);
        double double72 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68, (double) '#');
        double double73 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        printStream66.print((java.lang.Object) doubleArray68);
        double double75 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray68);
        double double77 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray68, 0.9646641462260455d);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = tTestImpl15.pairedTTest(doubleArray17, doubleArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 34.99999999999999d + "'", double38 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1225.0d + "'", double69 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1225.0d + "'", double73 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 34.99999999999999d + "'", double75 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 35.0d + "'", double77 == 35.0d);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("English (United States)", (double) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=97.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        java.io.PrintStream printStream27 = new java.io.PrintStream("French (France)");
        printStream27.println((float) (short) -1);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale[] localeArray41 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.List<java.util.Locale> localeList44 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList42);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 1, mathException36, (byte) 0, localeList44, 1225.0d };
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", objArray46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("de", objArray46);
        java.io.PrintStream printStream49 = printStream27.printf(locale30, "hi!", objArray46);
        double[] doubleArray51 = new double[] { '#' };
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) '#');
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        printStream49.print((java.lang.Object) doubleArray51);
        double[] doubleArray59 = new double[] { '#' };
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray59);
        double double61 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray51, doubleArray59);
        double[] doubleArray63 = new double[] { '#' };
        double double64 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray63);
        double double65 = org.apache.commons.math.stat.StatUtils.variance(doubleArray63);
        double double67 = org.apache.commons.math.stat.StatUtils.variance(doubleArray63, (double) '#');
        double double68 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray63);
        double double69 = org.apache.commons.math.stat.StatUtils.variance(doubleArray63);
        double double70 = org.apache.commons.math.stat.StatUtils.mean(doubleArray63);
        double double71 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = tTestImpl15.pairedTTest(doubleArray59, doubleArray63, (double) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 97.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localeList44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1225.0d + "'", double60 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1225.0d + "'", double64 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1225.0d + "'", double68 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 35.0d + "'", double70 == 35.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1225.0d + "'", double71 == 1225.0d);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayScript(locale9);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale7.getDisplayScript(locale11);
        java.lang.String str14 = locale7.toLanguageTag();
        java.lang.String str15 = locale5.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder16 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.setRegion("italien");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: italien [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "French" + "'", str15, "French");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = tTestImpl0.tTest((double) 100.0f, statisticalSummary2, 0.6321205588285574d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.6321205588285574");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double[] doubleArray7 = new double[] { '#' };
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray7);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray7);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray7, (double) '#');
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray7);
        double double13 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray7, (int) 'x', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl20 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        tTestImpl12.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double24 = tTestImpl12.t(statisticalSummary22, statisticalSummary23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution11 = distributionFactory0.createGammaDistribution(0.0d, 0.6321205588285574d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.distribution.TDistribution tDistribution27 = null;
        tTestImpl26.setDistribution(tDistribution27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double31 = tTestImpl26.tTest(statisticalSummary29, statisticalSummary30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl12.tTest(statisticalSummary13, statisticalSummary14, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.println("zh");
        printStream4.print((float) (short) -1);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.println("zh");
        printStream4.print("hi!");
        printStream4.close();
        java.util.Locale locale10 = null;
        java.lang.String[] strArray12 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream13 = printStream4.format(locale10, "France", (java.lang.Object[]) strArray12);
        printStream4.print(false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(printStream13);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter38.print(10L);
        printWriter38.println();
        java.io.PrintWriter printWriter43 = printWriter38.append('a');
        java.io.PrintStream printStream45 = new java.io.PrintStream("French (France)");
        printStream45.println((float) (short) -1);
        printStream45.println(' ');
        printStream45.print(false);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream45);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        boolean boolean54 = locale53.hasExtensions();
        java.lang.String str55 = locale53.getDisplayVariant();
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        boolean boolean57 = locale56.hasExtensions();
        java.lang.String str58 = locale53.getDisplayLanguage(locale56);
        boolean boolean59 = locale53.hasExtensions();
        java.lang.Object[] objArray61 = null;
        java.io.PrintWriter printWriter62 = printWriter52.printf(locale53, "German", objArray61);
        printWriter52.print((long) (byte) 10);
        printWriter52.print("");
        java.io.PrintStream printStream68 = new java.io.PrintStream("French (France)");
        printStream68.println((float) (short) -1);
        java.io.PrintStream printStream71 = new java.io.PrintStream((java.io.OutputStream) printStream68);
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.OutputStream) printStream68);
        char[] charArray74 = new char[] { ' ' };
        printWriter72.write(charArray74);
        java.io.PrintStream printStream77 = new java.io.PrintStream("French (France)");
        printStream77.println((float) (short) -1);
        java.io.PrintStream printStream80 = new java.io.PrintStream((java.io.OutputStream) printStream77);
        java.io.PrintWriter printWriter81 = new java.io.PrintWriter((java.io.OutputStream) printStream77);
        char[] charArray83 = new char[] { ' ' };
        printWriter81.write(charArray83);
        printWriter72.println(charArray83);
        printWriter52.print(charArray83);
        // The following exception was thrown during execution in test generation
        try {
            printWriter38.write(charArray83, 120, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Deutsch" + "'", str58, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[ ]");
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[ ]");
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        printWriter5.println(charArray16);
        printWriter5.println((int) (short) 0);
        printWriter5.println('#');
        printWriter5.close();
        printWriter5.print(Double.NaN);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.homoscedasticT(statisticalSummary11, statisticalSummary12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 515.7000000000007d);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = org.apache.commons.math.stat.StatUtils.min(doubleArray25, 52, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        char[] charArray14 = new char[] { ' ' };
        printWriter12.write(charArray14);
        printStream1.print(charArray14);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream23 = new java.io.PrintStream("French (France)");
        printStream23.println((float) (short) -1);
        printStream23.println(' ');
        printStream23.flush();
        java.util.Locale locale29 = null;
        java.io.PrintStream printStream32 = new java.io.PrintStream("French (France)");
        printStream32.println((float) (short) -1);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream32);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream32);
        java.io.PrintStream printStream39 = new java.io.PrintStream("French (France)");
        printStream39.println((float) (short) -1);
        printStream39.println(' ');
        printStream39.print(false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        java.io.PrintWriter printWriter48 = printWriter46.append(' ');
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        boolean boolean50 = locale49.hasExtensions();
        java.lang.String str51 = locale49.getDisplayVariant();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale52.getDisplayName();
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = locale54.getISO3Country();
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleKeys();
        java.lang.String str57 = locale52.getDisplayCountry(locale54);
        java.lang.String str58 = locale49.getDisplayName(locale54);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale[] localeArray69 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 1, mathException64, (byte) 0, localeList72, 1225.0d };
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("de", objArray74);
        java.io.PrintWriter printWriter77 = printWriter48.printf(locale49, "zho", objArray74);
        java.io.PrintWriter printWriter78 = printWriter36.printf("", objArray74);
        java.io.PrintStream printStream79 = printStream23.printf(locale29, "und", objArray74);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("fra", objArray74);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("", objArray74);
        java.io.PrintStream printStream82 = printStream1.format("\uc774\ud0c8\ub9ac\uc544\uc5b4", objArray74);
        printStream82.print('x');
        java.util.Locale locale85 = java.util.Locale.GERMAN;
        java.lang.String str86 = locale85.getDisplayName();
        java.lang.String str87 = locale85.getLanguage();
        java.util.Locale locale88 = locale85.stripExtensions();
        java.lang.String str89 = locale88.getVariant();
        printStream82.println((java.lang.Object) locale88);
        printStream82.close();
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ]");
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "allemand" + "'", str53, "allemand");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "FRA" + "'", str55, "FRA");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "allemand" + "'", str58, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "allemand" + "'", str86, "allemand");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "de" + "'", str87, "de");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray15, 12.2d);
        double[] doubleArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = tTestImpl13.tTest(doubleArray15, doubleArray19, 4.560969057281146E-69d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 120, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 120");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.println(true);
        java.io.PrintStream printStream44 = new java.io.PrintStream("French (France)");
        printStream44.println((float) (short) -1);
        java.io.PrintStream printStream47 = new java.io.PrintStream((java.io.OutputStream) printStream44);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream44);
        char[] charArray50 = new char[] { ' ' };
        printWriter48.write(charArray50);
        java.io.PrintStream printStream53 = new java.io.PrintStream("French (France)");
        printStream53.println((float) (short) -1);
        java.io.PrintStream printStream56 = new java.io.PrintStream((java.io.OutputStream) printStream53);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.OutputStream) printStream53);
        char[] charArray59 = new char[] { ' ' };
        printWriter57.write(charArray59);
        printWriter48.println(charArray59);
        printWriter48.println((int) (short) 0);
        char[] charArray65 = new char[] { '4' };
        printWriter48.println(charArray65);
        printWriter8.println(charArray65);
        printWriter8.println((int) 'u');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ ]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[4]");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        byte[] byteArray6 = new byte[] {};
        printStream5.write(byteArray6);
        printStream1.write(byteArray6);
        printStream1.println();
        printStream1.print(false);
        printStream1.print(true);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        printStream15.println(' ');
        printStream15.flush();
        java.util.Locale locale21 = null;
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        java.io.PrintStream printStream31 = new java.io.PrintStream("French (France)");
        printStream31.println((float) (short) -1);
        printStream31.println(' ');
        printStream31.print(false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream31);
        java.io.PrintWriter printWriter40 = printWriter38.append(' ');
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        boolean boolean42 = locale41.hasExtensions();
        java.lang.String str43 = locale41.getDisplayVariant();
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = locale46.getISO3Country();
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleKeys();
        java.lang.String str49 = locale44.getDisplayCountry(locale46);
        java.lang.String str50 = locale41.getDisplayName(locale46);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale[] localeArray61 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 1, mathException56, (byte) 0, localeList64, 1225.0d };
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("de", objArray66);
        java.io.PrintWriter printWriter69 = printWriter40.printf(locale41, "zho", objArray66);
        java.io.PrintWriter printWriter70 = printWriter28.printf("", objArray66);
        java.io.PrintStream printStream71 = printStream15.printf(locale21, "und", objArray66);
        printStream1.println((java.lang.Object) printStream15);
        printStream15.print((int) (short) -1);
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream78 = new java.io.PrintStream("French (France)");
        printStream78.println((float) (short) -1);
        java.io.PrintStream printStream81 = new java.io.PrintStream((java.io.OutputStream) printStream78);
        printStream78.print((long) (short) 0);
        java.io.PrintStream printStream85 = new java.io.PrintStream("French (France)");
        printStream85.println((float) (short) -1);
        java.io.PrintStream printStream88 = new java.io.PrintStream((java.io.OutputStream) printStream85);
        java.io.PrintWriter printWriter89 = new java.io.PrintWriter((java.io.OutputStream) printStream85);
        char[] charArray91 = new char[] { ' ' };
        printWriter89.write(charArray91);
        printStream78.print(charArray91);
        printWriter76.print(charArray91);
        printStream15.println(charArray91);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "allemand" + "'", str45, "allemand");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "FRA" + "'", str47, "FRA");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "allemand" + "'", str50, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[ ]");
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double10 = poissonDistribution8.cumulativeProbability((int) '#');
        double double12 = poissonDistribution8.cumulativeProbability(0.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.3678794411714425d + "'", double12 == 0.3678794411714425d);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        printStream20.println(' ');
        printStream20.print(false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getDisplayVariant();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale28.getDisplayLanguage(locale31);
        boolean boolean34 = locale28.hasExtensions();
        java.lang.Object[] objArray36 = null;
        java.io.PrintWriter printWriter37 = printWriter27.printf(locale28, "German", objArray36);
        java.io.PrintStream printStream39 = new java.io.PrintStream("French (France)");
        printStream39.println((float) (short) -1);
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream39);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        char[] charArray45 = new char[] { ' ' };
        printWriter43.write(charArray45);
        java.io.PrintStream printStream48 = new java.io.PrintStream("French (France)");
        printStream48.println((float) (short) -1);
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream48);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream48);
        char[] charArray54 = new char[] { ' ' };
        printWriter52.write(charArray54);
        printWriter43.println(charArray54);
        printWriter43.println((int) (short) 0);
        char[] charArray60 = new char[] { '4' };
        printWriter43.println(charArray60);
        printWriter37.print(charArray60);
        printWriter8.println(charArray60);
        printWriter8.flush();
        printWriter8.write((int) ' ');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Deutsch" + "'", str33, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ ]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ ]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[4]");
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution16 = distributionFactory0.createHypergeometricDistribution(0, 52, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.sum(doubleArray18);
        double double26 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray18, (double) (short) 100);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray18, doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = tTestImpl15.tTest(0.691462461274013d, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 34.99999999999999d + "'", double21 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        hypergeometricDistribution10.setSampleSize((int) (short) 1);
        hypergeometricDistribution10.setNumberOfSuccesses((int) '4');
        hypergeometricDistribution10.setPopulationSize(120);
        // The following exception was thrown during execution in test generation
        try {
            hypergeometricDistribution10.setSampleSize((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: sample size must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 1, 0);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray17, doubleArray25);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36, 1, 0);
        double double42 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray36, (double) (byte) 100);
        double double43 = org.apache.commons.math.stat.StatUtils.mean(doubleArray36);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double45 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray17, doubleArray36);
        double[] doubleArray47 = new double[] { '#' };
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47);
        double double50 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray47);
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double double53 = org.apache.commons.math.stat.StatUtils.sum(doubleArray47);
        double[] doubleArray55 = new double[] { '#' };
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray55);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray55, 1, 0);
        double double60 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray55);
        double double61 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray47, doubleArray55);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double63 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray47);
        double double64 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = tTestImpl15.homoscedasticTTest(doubleArray17, doubleArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1225.0d + "'", double48 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 34.99999999999999d + "'", double50 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.5553480614894135d + "'", double51 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 34.99999999999999d + "'", double60 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.5553480614894135d + "'", double62 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 34.99999999999999d + "'", double63 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1225.0d + "'", double64 == 1225.0d);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        printWriter18.println(1);
        printWriter18.flush();
        java.io.PrintStream printStream25 = new java.io.PrintStream("French (France)");
        printStream25.println((float) (short) -1);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream25);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream25);
        char[] charArray31 = new char[] { ' ' };
        printWriter29.write(charArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("French (France)");
        printStream34.println((float) (short) -1);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream34);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream34);
        char[] charArray40 = new char[] { ' ' };
        printWriter38.write(charArray40);
        printWriter29.println(charArray40);
        printWriter29.println((long) 'u');
        java.io.PrintStream printStream46 = new java.io.PrintStream("French (France)");
        printStream46.println((float) (short) -1);
        java.io.PrintStream printStream49 = new java.io.PrintStream((java.io.OutputStream) printStream46);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream46);
        char[] charArray52 = new char[] { ' ' };
        printWriter50.write(charArray52);
        printWriter29.write(charArray52);
        printWriter18.println(charArray52);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ ]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ ]");
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setRegion("de");
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale9.getDisplayCountry(locale11);
        java.lang.String str15 = locale6.getDisplayName(locale11);
        java.util.Locale.Builder builder16 = builder5.setLocale(locale11);
        java.util.Locale locale17 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder5.setUnicodeLocaleKeyword("fr_FR", "inglese (Stati Uniti)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: fr_FR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "allemand" + "'", str10, "allemand");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FRA" + "'", str12, "FRA");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "allemand" + "'", str15, "allemand");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4" + "'", str2, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1225.0d);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        java.io.PrintStream printStream13 = new java.io.PrintStream("French (France)");
        printStream13.println((float) (short) -1);
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale[] localeArray27 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.List<java.util.Locale> localeList30 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList28);
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 1, mathException22, (byte) 0, localeList30, 1225.0d };
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("hi!", objArray32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("de", objArray32);
        java.io.PrintStream printStream35 = printStream13.printf(locale16, "hi!", objArray32);
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37, (double) '#');
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        printStream35.print((java.lang.Object) doubleArray37);
        double[] doubleArray45 = new double[] { '#' };
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray37, doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.sum(doubleArray37);
        java.io.PrintStream printStream50 = new java.io.PrintStream("French (France)");
        printStream50.println((float) (short) -1);
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale[] localeArray64 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList65);
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 1, mathException59, (byte) 0, localeList67, 1225.0d };
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("de", objArray69);
        java.io.PrintStream printStream72 = printStream50.printf(locale53, "hi!", objArray69);
        double[] doubleArray74 = new double[] { '#' };
        double double75 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray74);
        double double76 = org.apache.commons.math.stat.StatUtils.variance(doubleArray74);
        double double78 = org.apache.commons.math.stat.StatUtils.variance(doubleArray74, (double) '#');
        double double79 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray74);
        printStream72.print((java.lang.Object) doubleArray74);
        double[] doubleArray82 = new double[] { '#' };
        double double83 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray74, doubleArray82);
        double double85 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray37, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (int) (short) -1, (int) 'u', (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeList30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1225.0d + "'", double75 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1225.0d + "'", double79 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[35.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1225.0d + "'", double83 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 35.0d + "'", double87 == 35.0d);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream57.print(Double.NaN);
        printStream57.print(true);
        printStream57.close();
        printStream57.print("French (France)");
        java.io.PrintStream printStream66 = printStream57.append((java.lang.CharSequence) "\u65e5\u6587");
        printStream57.println(true);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "allemand" + "'", str31, "allemand");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(printStream66);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.mean(doubleArray10, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution29 = distributionFactory23.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory23.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory23.createTDistribution((double) 100L);
        tDistribution34.setDegreesOfFreedom(52.0d);
        tTestImpl1.setDistribution(tDistribution34);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double double42 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double44 = org.apache.commons.math.stat.StatUtils.sum(doubleArray39);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        double double46 = org.apache.commons.math.stat.StatUtils.min(doubleArray39);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39, 0.36787944117144233d);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = tTestImpl1.homoscedasticTTest(doubleArray39, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(fDistribution29);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 34.99999999999999d + "'", double42 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 3.5553480614894135d + "'", double43 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayLanguage(locale3);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setVariant("\uc911\uad6d");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Italienisch" + "'", str5, "Italienisch");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.println(true);
        java.io.PrintWriter printWriter44 = printWriter8.append((java.lang.CharSequence) "de");
        printWriter44.print(false);
        printWriter44.print((int) (short) 100);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter44);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, (double) '#');
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.mean(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.sum(doubleArray19);
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray19);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, (double) '#');
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray19, doubleArray28);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, (double) '#');
        double double38 = org.apache.commons.math.stat.StatUtils.min(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = tTestImpl7.homoscedasticTTest(doubleArray9, doubleArray28, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.lang.String str3 = locale0.getDisplayName();
        java.lang.String str4 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de" + "'", str1, "de");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "German" + "'", str3, "German");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Vereinigtes K\366nigreich", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=vereinigtesko?nigreich");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setVariant("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: org.apache.commons.math.MathException: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        printStream1.println(8.999999999999998d);
        printStream1.print(false);
        printStream1.println((double) 97);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory28 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution31 = distributionFactory28.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double32 = weibullDistribution31.getShape();
        weibullDistribution31.setScale((double) 100);
        double double35 = weibullDistribution31.getScale();
        weibullDistribution31.setShape(0.24999999999999964d);
        weibullDistribution31.setScale(0.5199388058383725d);
        printWriter27.print((java.lang.Object) 0.5199388058383725d);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(distributionFactory28);
        org.junit.Assert.assertNotNull(weibullDistribution31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        cauchyDistribution6.setScale((double) 1.0f);
        double double10 = cauchyDistribution6.getScale();
        double double11 = cauchyDistribution6.getMedian();
        double double12 = cauchyDistribution6.getScale();
        double double13 = cauchyDistribution6.getScale();
        double double14 = cauchyDistribution6.getScale();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(12.2d, 10.0d);
        gammaDistribution15.setBeta(8.999999999999998d);
        double double18 = gammaDistribution15.getBeta();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 8.999999999999998d + "'", double18 == 8.999999999999998d);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        tDistribution6.setDegreesOfFreedom(100.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl9 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        java.io.PrintStream printStream33 = printStream11.printf(locale14, "hi!", objArray30);
        double[] doubleArray35 = new double[] { '#' };
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35, (double) '#');
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        printStream33.print((java.lang.Object) doubleArray35);
        double[] doubleArray43 = new double[] { '#' };
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray35, doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sum(doubleArray35);
        double[] doubleArray48 = new double[] { '#' };
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double53 = org.apache.commons.math.stat.StatUtils.sum(doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.max(doubleArray48);
        double double55 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48, 0.36787944117144233d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = tTestImpl9.homoscedasticTTest(doubleArray35, doubleArray48, (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 32.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 34.99999999999999d + "'", double51 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.5553480614894135d + "'", double52 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getLanguage();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale0.getISO3Language();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.setLanguage("German");
        java.util.Locale locale10 = builder7.build();
        java.util.Locale.Builder builder11 = builder7.clearExtensions();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale12.getISO3Country();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayScript(locale16);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayName();
        java.lang.String str20 = locale14.getDisplayScript(locale18);
        java.lang.String str21 = locale14.toLanguageTag();
        java.lang.String str22 = locale12.getDisplayLanguage(locale14);
        java.util.Locale.Builder builder23 = builder7.setLocale(locale14);
        java.lang.String str24 = locale6.getDisplayScript(locale14);
        boolean boolean25 = locale0.equals((java.lang.Object) str24);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "German" + "'", str1, "German");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "german");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FRA" + "'", str13, "FRA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "French" + "'", str22, "French");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale[] localeArray24 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList25);
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 1, mathException19, (byte) 0, localeList27, 1225.0d };
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("de", objArray29);
        java.io.PrintStream printStream32 = printStream10.printf(locale13, "hi!", objArray29);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34, (double) '#');
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        printStream32.print((java.lang.Object) doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.mean(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl7.tTest((double) 1, doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl12.tTest(statisticalSummary13, statisticalSummary14, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.t((-9.992007221626409E-16d), statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        // The following exception was thrown during execution in test generation
        try {
            tDistribution8.setDegreesOfFreedom((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh-CN");
        printStream1.print('a');
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((double) 0.0f);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory6 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory6.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double10 = weibullDistribution9.getScale();
        double double11 = weibullDistribution9.getScale();
        double double12 = weibullDistribution9.getScale();
        printWriter5.println((java.lang.Object) double12);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter16 = printWriter5.printf("FR", objArray15);
        printWriter16.print(true);
        org.junit.Assert.assertNotNull(distributionFactory6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter16);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale4.getISO3Language();
        java.lang.String str6 = locale4.getDisplayName();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str8 = locale1.getDisplayLanguage(locale4);
        java.util.Set<java.lang.Character> charSet9 = locale4.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italienisch" + "'", str3, "Italienisch");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (France)" + "'", str6, "French (France)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "allemand" + "'", str8, "allemand");
        org.junit.Assert.assertNotNull(charSet9);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double) 10.0f);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) 'x');
        chiSquaredDistribution8.setDegreesOfFreedom(0.36787944117144233d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream2);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getISO3Language();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale6.getDisplayScript(locale8);
        java.lang.String str10 = locale8.getDisplayLanguage();
        java.io.PrintStream printStream13 = new java.io.PrintStream("French (France)");
        printStream13.println((float) (short) -1);
        printStream13.println(' ');
        printStream13.print(false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream13);
        java.io.PrintWriter printWriter22 = printWriter20.append(' ');
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getDisplayVariant();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = locale28.getISO3Country();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleKeys();
        java.lang.String str31 = locale26.getDisplayCountry(locale28);
        java.lang.String str32 = locale23.getDisplayName(locale28);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale[] localeArray43 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList44);
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 1, mathException38, (byte) 0, localeList46, 1225.0d };
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("de", objArray48);
        java.io.PrintWriter printWriter51 = printWriter22.printf(locale23, "zho", objArray48);
        java.io.PrintStream printStream52 = printStream5.format(locale8, "fra", objArray48);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Locale[] localeArray62 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList63 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList63, localeArray62);
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.util.Locale>) localeList63);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 1, mathException57, (byte) 0, localeList65, 1225.0d };
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", objArray67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("de", objArray67);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("French", objArray48, (java.lang.Throwable) mathException69);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray77 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList78 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList78, languageRangeArray77);
        java.util.Locale[] localeArray80 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList81 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList81, localeArray80);
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList78, (java.util.Collection<java.util.Locale>) localeList81);
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 1, mathException75, (byte) 0, localeList83, 1225.0d };
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("hi!", objArray85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("de", objArray85);
        mathException70.addSuppressed((java.lang.Throwable) mathException87);
        java.lang.String str89 = mathException70.toString();
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "German" + "'", str10, "German");
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "German" + "'", str27, "German");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "FRA" + "'", str29, "FRA");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "allemand" + "'", str32, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(languageRangeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org.apache.commons.math.MathException: French" + "'", str89, "org.apache.commons.math.MathException: French");
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray3);
        double double10 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray3, 0, 1);
        double double15 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray3, (double) 10.0f);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 1, 0);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray17, doubleArray25);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = tTestImpl1.pairedTTest(doubleArray3, doubleArray17, 0.3678794411714425d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 34.99999999999999d + "'", double10 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("allemand", (double) 0L);
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        printStream4.println(' ');
        printStream4.print(false);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale12.getDisplayVariant();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String str17 = locale12.getDisplayLanguage(locale15);
        boolean boolean18 = locale12.hasExtensions();
        java.lang.Object[] objArray20 = null;
        java.io.PrintWriter printWriter21 = printWriter11.printf(locale12, "German", objArray20);
        java.io.PrintStream printStream23 = new java.io.PrintStream("French (France)");
        printStream23.println((float) (short) -1);
        java.io.PrintStream printStream26 = new java.io.PrintStream((java.io.OutputStream) printStream23);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream23);
        char[] charArray29 = new char[] { ' ' };
        printWriter27.write(charArray29);
        java.io.PrintStream printStream32 = new java.io.PrintStream("French (France)");
        printStream32.println((float) (short) -1);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream32);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream32);
        char[] charArray38 = new char[] { ' ' };
        printWriter36.write(charArray38);
        printWriter27.println(charArray38);
        printWriter27.println((int) (short) 0);
        char[] charArray44 = new char[] { '4' };
        printWriter27.println(charArray44);
        printWriter21.print(charArray44);
        boolean boolean47 = languageRange2.equals((java.lang.Object) charArray44);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Deutsch" + "'", str17, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ ]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        printStream20.println(' ');
        printStream20.print(false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getDisplayVariant();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale28.getDisplayLanguage(locale31);
        boolean boolean34 = locale28.hasExtensions();
        java.lang.Object[] objArray36 = null;
        java.io.PrintWriter printWriter37 = printWriter27.printf(locale28, "German", objArray36);
        java.io.PrintStream printStream39 = new java.io.PrintStream("French (France)");
        printStream39.println((float) (short) -1);
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream39);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        char[] charArray45 = new char[] { ' ' };
        printWriter43.write(charArray45);
        java.io.PrintStream printStream48 = new java.io.PrintStream("French (France)");
        printStream48.println((float) (short) -1);
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream48);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream48);
        char[] charArray54 = new char[] { ' ' };
        printWriter52.write(charArray54);
        printWriter43.println(charArray54);
        printWriter43.println((int) (short) 0);
        char[] charArray60 = new char[] { '4' };
        printWriter43.println(charArray60);
        printWriter37.print(charArray60);
        printWriter8.println(charArray60);
        boolean boolean64 = printWriter8.checkError();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Deutsch" + "'", str33, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ ]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ ]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[4]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.homoscedasticTTest(statisticalSummary13, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution((double) (short) 1, (double) (short) 1);
        double double15 = normalDistribution14.getStandardDeviation();
        double double16 = normalDistribution14.getMean();
        double double17 = normalDistribution14.getStandardDeviation();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = normalDistribution14.inverseCumulativeProbability((-13.607141222220143d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("anglais", "\uc601\uc5b4\ubbf8\uad6d)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ????? (?????)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, (int) (short) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "und");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: und");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        printStream1.println(8.999999999999998d);
        printStream1.write((int) (byte) 100);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tDistribution11.inverseCumulativeProbability((double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1225.0d, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 100L);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution18 = distributionFactory0.createGammaDistribution(10.0d, (double) 10);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory0.createChiSquareDistribution(Double.POSITIVE_INFINITY);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution22 = distributionFactory0.createExponentialDistribution(0.9646159093607598d);
        // The following exception was thrown during execution in test generation
        try {
            exponentialDistribution22.setMean(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertNotNull(gammaDistribution18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
        org.junit.Assert.assertNotNull(exponentialDistribution22);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "anglais");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: anglais");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setLanguage("German");
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale15.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder19 = builder13.setLocale(locale15);
        java.util.Locale.Builder builder20 = builder10.setLocale(locale15);
        java.util.Locale locale21 = builder20.build();
        java.util.Locale.Builder builder23 = builder20.setLanguage("zho");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder23.addUnicodeLocaleAttribute("it");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: it [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italienisch" + "'", str18, "Italienisch");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        printWriter5.println((-1.0d));
        printWriter5.print((int) (short) -1);
        printWriter5.println((double) '#');
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream17);
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        printStream22.println(' ');
        printStream22.print(false);
        printStream22.println((float) '#');
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream22, true);
        java.io.PrintStream printStream34 = new java.io.PrintStream("French (France)");
        printStream34.println((float) (short) -1);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream34);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream34);
        java.lang.Object obj39 = null;
        printWriter38.println(obj39);
        printWriter38.write((int) (short) 1);
        java.io.PrintStream printStream44 = new java.io.PrintStream("French (France)");
        printStream44.println((float) (short) -1);
        java.io.PrintStream printStream47 = new java.io.PrintStream((java.io.OutputStream) printStream44);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream44);
        char[] charArray50 = new char[] { ' ' };
        printWriter48.write(charArray50);
        java.io.PrintStream printStream53 = new java.io.PrintStream("French (France)");
        printStream53.println((float) (short) -1);
        java.io.PrintStream printStream56 = new java.io.PrintStream((java.io.OutputStream) printStream53);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.OutputStream) printStream53);
        char[] charArray59 = new char[] { ' ' };
        printWriter57.write(charArray59);
        printWriter48.println(charArray59);
        printWriter38.write(charArray59, (int) (byte) 0, 1);
        printWriter32.print(charArray59);
        printStream17.println(charArray59);
        printWriter5.print(charArray59);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ ]");
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray0, 52, (int) (byte) 10, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.lang.String str9 = locale7.getDisplayLanguage();
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        printStream12.println((float) (short) -1);
        printStream12.println(' ');
        printStream12.print(false);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream12);
        java.io.PrintWriter printWriter21 = printWriter19.append(' ');
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.getDisplayVariant();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale25.getDisplayName();
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = locale27.getISO3Country();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.lang.String str30 = locale25.getDisplayCountry(locale27);
        java.lang.String str31 = locale22.getDisplayName(locale27);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale[] localeArray42 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList43);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 1, mathException37, (byte) 0, localeList45, 1225.0d };
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", objArray47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("de", objArray47);
        java.io.PrintWriter printWriter50 = printWriter21.printf(locale22, "zho", objArray47);
        java.io.PrintStream printStream51 = printStream4.format(locale7, "fra", objArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream55 = printStream4.append((java.lang.CharSequence) "FR_FR", (int) (short) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "German" + "'", str9, "German");
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "German" + "'", str26, "German");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "FRA" + "'", str28, "FRA");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "allemand" + "'", str31, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printStream51);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getISO3Country();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.lang.String str10 = java.util.Locale.lookupTag(languageRangeList6, (java.util.Collection<java.lang.String>) strSet9);
        java.util.Collection<java.util.Locale> localeCollection11 = null;
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter(languageRangeList6, localeCollection11);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FRA" + "'", str8, "FRA");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(localeList12);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, (double) '#');
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double18 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11, (double) '#');
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray11);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11, (double) (short) 100);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double21 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 1L, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Standard deviation must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl7.tTest((-1.0d), statisticalSummary22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "");
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        java.io.PrintStream printStream1 = new java.io.PrintStream("FR");
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        byte[] byteArray6 = new byte[] {};
        printStream5.write(byteArray6);
        printStream1.write(byteArray6);
        printStream1.println();
        printStream1.print(false);
        printStream1.print(true);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        printStream15.println(' ');
        printStream15.flush();
        java.util.Locale locale21 = null;
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        java.io.PrintStream printStream31 = new java.io.PrintStream("French (France)");
        printStream31.println((float) (short) -1);
        printStream31.println(' ');
        printStream31.print(false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream31);
        java.io.PrintWriter printWriter40 = printWriter38.append(' ');
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        boolean boolean42 = locale41.hasExtensions();
        java.lang.String str43 = locale41.getDisplayVariant();
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = locale46.getISO3Country();
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleKeys();
        java.lang.String str49 = locale44.getDisplayCountry(locale46);
        java.lang.String str50 = locale41.getDisplayName(locale46);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale[] localeArray61 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 1, mathException56, (byte) 0, localeList64, 1225.0d };
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("de", objArray66);
        java.io.PrintWriter printWriter69 = printWriter40.printf(locale41, "zho", objArray66);
        java.io.PrintWriter printWriter70 = printWriter28.printf("", objArray66);
        java.io.PrintStream printStream71 = printStream15.printf(locale21, "und", objArray66);
        printStream1.println((java.lang.Object) printStream15);
        printStream15.print((int) (short) -1);
        printStream15.close();
        printStream15.write(0);
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.OutputStream) printStream15, true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "German" + "'", str45, "German");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "FRA" + "'", str47, "FRA");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "allemand" + "'", str50, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printStream71);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setLanguageTag("chinois (Chine)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: chinois (Chine) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24, 1, 0);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray16, doubleArray24);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double32 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double35 = org.apache.commons.math.stat.StatUtils.min(doubleArray16);
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray37);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double42 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double double43 = org.apache.commons.math.stat.StatUtils.sum(doubleArray37);
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double double46 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray37, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = tTestImpl14.homoscedasticT(doubleArray16, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 34.99999999999999d + "'", double32 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.5553480614894135d + "'", double34 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 34.99999999999999d + "'", double40 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.5553480614894135d + "'", double41 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("Chine");
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            hypergeometricDistribution10.setPopulationSize(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: population size must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.print((long) 'u');
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale[] localeArray35 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList36);
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 1, mathException30, (byte) 0, localeList38, 1225.0d };
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("de", objArray40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("Chinesisch (China)", objArray40);
        java.io.PrintWriter printWriter44 = printWriter8.format("French", objArray40);
        printWriter8.write((int) 'x');
        java.io.PrintStream printStream48 = new java.io.PrintStream("French (France)");
        printStream48.println((float) (short) -1);
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream48);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream48);
        char[] charArray54 = new char[] { ' ' };
        printWriter52.write(charArray54);
        java.io.PrintStream printStream57 = new java.io.PrintStream("French (France)");
        printStream57.println((float) (short) -1);
        java.io.PrintStream printStream60 = new java.io.PrintStream((java.io.OutputStream) printStream57);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.OutputStream) printStream57);
        char[] charArray63 = new char[] { ' ' };
        printWriter61.write(charArray63);
        printWriter52.println(charArray63);
        printWriter8.print(charArray63);
        printWriter8.println((float) (byte) 100);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ ]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ ]");
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution44 = distributionFactory41.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double45 = weibullDistribution44.getShape();
        weibullDistribution44.setScale((double) 100);
        printWriter8.println((java.lang.Object) weibullDistribution44);
        java.io.PrintWriter printWriter50 = printWriter8.append((java.lang.CharSequence) "French");
        printWriter8.print((float) 'a');
        java.io.PrintStream printStream54 = new java.io.PrintStream("French (France)");
        printStream54.println((float) (short) -1);
        java.io.PrintStream printStream57 = new java.io.PrintStream((java.io.OutputStream) printStream54);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.OutputStream) printStream54);
        char[] charArray60 = new char[] { ' ' };
        printWriter58.write(charArray60);
        java.io.PrintStream printStream63 = new java.io.PrintStream("French (France)");
        printStream63.println((float) (short) -1);
        java.io.PrintStream printStream66 = new java.io.PrintStream((java.io.OutputStream) printStream63);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream63);
        char[] charArray69 = new char[] { ' ' };
        printWriter67.write(charArray69);
        printWriter58.println(charArray69);
        printWriter58.println((int) (short) 0);
        char[] charArray75 = new char[] { '4' };
        printWriter58.println(charArray75);
        // The following exception was thrown during execution in test generation
        try {
            printWriter8.write(charArray75, 97, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(weibullDistribution44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ ]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ ]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[4]");
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        java.io.PrintStream printStream25 = new java.io.PrintStream("French (France)");
        printStream25.println((float) (short) -1);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Locale[] localeArray39 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList40);
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 1, mathException34, (byte) 0, localeList42, 1225.0d };
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("de", objArray44);
        java.io.PrintStream printStream47 = printStream25.printf(locale28, "hi!", objArray44);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49, (double) '#');
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        printStream47.print((java.lang.Object) doubleArray49);
        double[] doubleArray57 = new double[] { '#' };
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray49, doubleArray57);
        double double60 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray17, doubleArray57);
        double double61 = org.apache.commons.math.stat.StatUtils.min(doubleArray17);
        double[] doubleArray67 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double68 = org.apache.commons.math.stat.StatUtils.max(doubleArray67);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray67, (double) (byte) 100);
        double double71 = org.apache.commons.math.stat.StatUtils.sum(doubleArray67);
        double double72 = org.apache.commons.math.stat.StatUtils.mean(doubleArray67);
        double double74 = org.apache.commons.math.stat.StatUtils.variance(doubleArray67, (double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = tTestImpl15.pairedT(doubleArray17, doubleArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1225.0d + "'", double58 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 52.0d + "'", double68 == 52.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 515.7000000000007d + "'", double70 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 61.0d + "'", double71 == 61.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 12.2d + "'", double72 == 12.2d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 515.7d + "'", double74 == 515.7d);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.max(doubleArray15);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double25 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = tTestImpl13.pairedTTest(doubleArray15, doubleArray20, 52.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 52.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayName();
        java.lang.String str3 = locale0.getCountry();
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        printStream5.println();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale[] localeArray24 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList25);
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 1, mathException19, (byte) 0, localeList27, 1225.0d };
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("");
        mathException30.addSuppressed((java.lang.Throwable) mathException32);
        java.lang.Object[] objArray34 = mathException30.getArguments();
        java.io.PrintStream printStream35 = printStream5.printf(locale9, "fran\347ais (France)", objArray34);
        java.lang.String str36 = locale0.getDisplayVariant(locale9);
        java.util.Locale locale37 = locale9.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fra" + "'", str1, "fra");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "French (France)" + "'", str2, "French (France)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FR" + "'", str3, "FR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double8 = org.apache.commons.math.stat.StatUtils.sum(doubleArray3);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double18 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray10, (double) 1.0f);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = tTestImpl1.t(doubleArray3, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        java.io.PrintWriter printWriter49 = printWriter5.append('#');
        printWriter5.println((int) (short) 0);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(printWriter49);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double double24 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray16, (double) (short) 100);
        double double25 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double28 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray16, (double) 100.0f);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double35 = org.apache.commons.math.stat.StatUtils.sum(doubleArray30);
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray37);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double42 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double double43 = org.apache.commons.math.stat.StatUtils.sum(doubleArray37);
        double double44 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray37);
        double double45 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray30, doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = tTestImpl14.pairedTTest(doubleArray16, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.5553480614894135d + "'", double34 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 34.99999999999999d + "'", double40 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.5553480614894135d + "'", double41 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 34.99999999999999d + "'", double44 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        double[] doubleArray5 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5, (double) (byte) 100);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray5);
        double double10 = org.apache.commons.math.stat.StatUtils.mean(doubleArray5);
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double double18 = org.apache.commons.math.stat.StatUtils.sum(doubleArray13);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double double27 = org.apache.commons.math.stat.StatUtils.sum(doubleArray21);
        double double29 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray21, (double) (short) 100);
        double double30 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray13, doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray5, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 515.7000000000007d + "'", double8 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 61.0d + "'", double9 == 61.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 12.2d + "'", double10 == 12.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.5553480614894135d + "'", double17 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 3.5553480614894135d + "'", double25 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) 1L);
        org.apache.commons.math.distribution.FDistribution fDistribution9 = distributionFactory0.createFDistribution(2.147483647E9d, 0.6321205588285574d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(fDistribution9);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder0.setLanguage("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setScript("Chinesisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Chinesisch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(true);
        printStream1.print((double) (-1L));
        printStream1.println((float) (-1L));
        printStream1.flush();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream15 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "English (United States)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: English (United States)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.lang.Object obj10 = null;
        printWriter9.println(obj10);
        printWriter9.write((int) (short) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        char[] charArray21 = new char[] { ' ' };
        printWriter19.write(charArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printWriter19.println(charArray30);
        printWriter9.write(charArray30, (int) (byte) 0, 1);
        printStream1.print(charArray30);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter42 = printWriter38.append((java.lang.CharSequence) "ko", 1, 2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 2147483646");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = builder0.build();
        java.lang.String str5 = locale4.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale4.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for german");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "german");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (int) (byte) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh-CN");
        printStream1.print('a');
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.close();
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31, 1, 0);
        double double37 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray31, (double) (byte) 100);
        double double38 = org.apache.commons.math.stat.StatUtils.mean(doubleArray31);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray40, 0, 0);
        double[] doubleArray47 = new double[] { '#' };
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47);
        double double50 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray47);
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double double53 = org.apache.commons.math.stat.StatUtils.sum(doubleArray47);
        double double55 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray47, (double) (short) 100);
        double double56 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray40, doubleArray47);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = tTestImpl12.pairedT(doubleArray31, doubleArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1225.0d + "'", double48 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 34.99999999999999d + "'", double50 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.5553480614894135d + "'", double51 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 3.5553480614894135d + "'", double57 == 3.5553480614894135d);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) 'x', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.t((double) (-1L), statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "FRA");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: FRA");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zh", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap8);
        java.lang.String[] strArray17 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strList18);
        java.lang.String str21 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList18);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.max(doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double39 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.product(doubleArray36);
        double double42 = org.apache.commons.math.stat.StatUtils.sum(doubleArray36);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44, 1, 0);
        double double49 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray44);
        double double50 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray36, doubleArray44);
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double52 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray36);
        double double53 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double[] doubleArray55 = new double[] { '#' };
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray55);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray55, 1, 0);
        double double61 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray55, (double) (byte) 100);
        double double62 = org.apache.commons.math.stat.StatUtils.mean(doubleArray55);
        double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray55);
        double double64 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray36, doubleArray55);
        double double65 = org.apache.commons.math.stat.StatUtils.sum(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl15.t(doubleArray27, doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 34.99999999999999d + "'", double39 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 34.99999999999999d + "'", double49 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.5553480614894135d + "'", double51 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 34.99999999999999d + "'", double52 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1225.0d + "'", double53 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 35.0d + "'", double62 == 35.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 35.0d + "'", double65 == 35.0d);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double9 = poissonDistribution8.getMean();
        double double11 = poissonDistribution8.normalApproximateProbability((int) (byte) 100);
        double double13 = poissonDistribution8.normalApproximateProbability((int) (short) 1);
        double double15 = poissonDistribution8.probability((double) (short) 0);
        double double16 = poissonDistribution8.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.691462461274013d + "'", double13 == 0.691462461274013d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.36787944117144233d + "'", double15 == 0.36787944117144233d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Franz\366sisch (Frankreich)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=franzo?sisch(frankreich)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getScale();
        weibullDistribution3.setScale((double) 'x');
        double double7 = weibullDistribution3.getScale();
        weibullDistribution3.setScale(1.0d);
        weibullDistribution3.setShape((double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = weibullDistribution3.inverseCumulativeProbability((double) 2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability argument must be between 0 and 1 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 120.0d + "'", double7 == 120.0d);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale4.getDisplayScript(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale4.getDisplayScript(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.lang.String str12 = locale8.getDisplayVariant();
        boolean boolean13 = locale8.hasExtensions();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FRA");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception: fra");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.print((double) (byte) 100);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        printStream15.println(' ');
        printStream15.print(false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter24 = printWriter22.append(' ');
        java.io.PrintWriter printWriter26 = printWriter24.append('u');
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Locale[] localeArray39 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList40);
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 1, mathException34, (byte) 0, localeList42, 1225.0d };
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("de", objArray44);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", objArray44, (java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("und", objArray44, (java.lang.Throwable) mathException51);
        java.io.PrintWriter printWriter53 = printWriter24.printf("Deutsch", objArray44);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray56);
        java.io.PrintWriter printWriter58 = printWriter53.format("French", (java.lang.Object[]) strArray56);
        java.io.PrintStream printStream59 = printStream12.format("ja", (java.lang.Object[]) strArray56);
        java.io.PrintStream printStream61 = printStream12.append('#');
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertNotNull(printStream61);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList12, strMap13);
        java.lang.String[] strArray22 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strList23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList25, filteringMode27);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale[] localeArray32 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strMap40);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList41, strMap42);
        java.lang.String[] strArray51 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags(languageRangeList43, (java.util.Collection<java.lang.String>) strList52);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap58 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, strMap58);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Locale[] localeArray63 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList64 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList64, localeArray63);
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.util.Locale>) localeList64);
        java.util.Locale locale67 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.util.Locale>) localeList64);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter(languageRangeList43, (java.util.Collection<java.util.Locale>) localeList64);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList64);
        java.util.Collection<java.util.Locale> localeCollection70 = null;
        java.util.Locale locale71 = java.util.Locale.lookup(languageRangeList4, localeCollection70);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode27.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(languageRangeList59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNull(locale67);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNull(locale71);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29);
        double double32 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double34 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = tTestImpl26.t(0.003594758625082406d, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 34.99999999999999d + "'", double32 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 3.5553480614894135d + "'", double33 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        java.lang.String[] strArray42 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter44 = printWriter39.format("French", (java.lang.Object[]) strArray42);
        java.io.PrintStream printStream46 = new java.io.PrintStream("French (France)");
        printStream46.println((float) (short) -1);
        java.io.PrintStream printStream49 = new java.io.PrintStream((java.io.OutputStream) printStream46);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream46);
        char[] charArray52 = new char[] { ' ' };
        printWriter50.write(charArray52);
        printWriter44.write(charArray52);
        printWriter44.close();
        printWriter44.print('a');
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ ]");
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory32 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution35 = distributionFactory32.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution36 = distributionFactory32.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution38 = distributionFactory32.createTDistribution((double) 1L);
        double double39 = tDistribution38.getDegreesOfFreedom();
        tTestImpl31.setDistribution(tDistribution38);
        double double41 = tDistribution38.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution38);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double double50 = org.apache.commons.math.stat.StatUtils.sum(doubleArray44);
        double double51 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray44);
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray54 = new double[] { '#' };
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54, (double) '#');
        double double59 = org.apache.commons.math.stat.StatUtils.min(doubleArray54);
        double double61 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray54, 12.2d);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = tTestImpl12.pairedTTest(doubleArray44, doubleArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory32);
        org.junit.Assert.assertNotNull(weibullDistribution35);
        org.junit.Assert.assertNotNull(normalDistribution36);
        org.junit.Assert.assertNotNull(tDistribution38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 34.99999999999999d + "'", double47 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.5553480614894135d + "'", double48 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 34.99999999999999d + "'", double51 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 35.0d + "'", double59 == 35.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("deu", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.max(doubleArray25);
        double double32 = org.apache.commons.math.stat.StatUtils.min(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = tTestImpl1.tTest((double) 10L, doubleArray25, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        printWriter5.println(charArray16);
        java.lang.Object[] objArray20 = null;
        java.io.PrintWriter printWriter21 = printWriter5.printf("allemand", objArray20);
        printWriter21.print("de");
        java.io.PrintWriter printWriter25 = printWriter21.append('u');
        printWriter25.write("KOR");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(printWriter25);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        // The following exception was thrown during execution in test generation
        try {
            double double15 = weibullDistribution12.cumulativeProbability((double) 10, 8.999999999999998d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution8 = distributionFactory0.createCauchyDistribution((-1.0d), 1225.0d);
        cauchyDistribution8.setScale(10.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(cauchyDistribution8);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream23.println(true);
        printStream23.println((float) '#');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double37 = org.apache.commons.math.stat.StatUtils.sum(doubleArray32);
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray32);
        double double39 = org.apache.commons.math.stat.StatUtils.mean(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = tTestImpl15.homoscedasticTTest(doubleArray27, doubleArray32, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double) 10.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(1.0000000000000402d);
        poissonDistribution8.setMean((double) 10L);
        double double12 = poissonDistribution8.normalApproximateProbability((int) (short) 1);
        double double13 = poissonDistribution8.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.003594758625082406d + "'", double12 == 0.003594758625082406d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "Italian");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Italian");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale4.getISO3Language();
        java.lang.String str6 = locale4.getDisplayName();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str8 = locale1.getDisplayLanguage(locale4);
        java.util.Set<java.lang.Character> charSet9 = locale1.getExtensionKeys();
        java.lang.String str10 = locale1.toLanguageTag();
        java.lang.String str11 = locale1.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italienisch" + "'", str3, "Italienisch");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (France)" + "'", str6, "French (France)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "allemand" + "'", str8, "allemand");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "de" + "'", str10, "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution13 = distributionFactory0.createChiSquareDistribution((double) 1.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution16 = distributionFactory0.createGammaDistribution(0.9646159093607598d, 0.24999999999999964d);
        double double17 = gammaDistribution16.getAlpha();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertNotNull(chiSquaredDistribution13);
        org.junit.Assert.assertNotNull(gammaDistribution16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9646159093607598d + "'", double17 == 0.9646159093607598d);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution12 = distributionFactory0.createCauchyDistribution((double) 0, 117.0d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution15 = distributionFactory0.createWeibullDistribution((double) (byte) 10, (double) ' ');
        org.apache.commons.math.distribution.FDistribution fDistribution18 = distributionFactory0.createFDistribution((double) 'u', 0.5199388058383725d);
        fDistribution18.setNumeratorDegreesOfFreedom(97.0d);
        // The following exception was thrown during execution in test generation
        try {
            fDistribution18.setNumeratorDegreesOfFreedom(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(cauchyDistribution12);
        org.junit.Assert.assertNotNull(weibullDistribution15);
        org.junit.Assert.assertNotNull(fDistribution18);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.println((int) (byte) 1);
        java.lang.Class<?> wildcardClass11 = printStream1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory32 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution35 = distributionFactory32.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution36 = distributionFactory32.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution38 = distributionFactory32.createTDistribution((double) 1L);
        double double39 = tDistribution38.getDegreesOfFreedom();
        tTestImpl31.setDistribution(tDistribution38);
        double double41 = tDistribution38.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution38);
        double[] doubleArray48 = new double[] { 32.0d, Double.NEGATIVE_INFINITY, (-13.607141222220143d), 0.24999999999999964d, 32.0d };
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double double55 = org.apache.commons.math.stat.StatUtils.max(doubleArray50, 0, 0);
        double[] doubleArray57 = new double[] { '#' };
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray57);
        double double60 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray57);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray57);
        double double62 = org.apache.commons.math.stat.StatUtils.product(doubleArray57);
        double double63 = org.apache.commons.math.stat.StatUtils.sum(doubleArray57);
        double double65 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray57, (double) (short) 100);
        double double66 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray50, doubleArray57);
        double double69 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray57, (int) (short) 10, 2147483647);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = tTestImpl12.pairedTTest(doubleArray48, doubleArray57, 0.003594758625082406d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory32);
        org.junit.Assert.assertNotNull(weibullDistribution35);
        org.junit.Assert.assertNotNull(normalDistribution36);
        org.junit.Assert.assertNotNull(tDistribution38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[32.0, -Infinity, -13.607141222220143, 0.24999999999999964, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1225.0d + "'", double58 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 34.99999999999999d + "'", double60 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 3.5553480614894135d + "'", double61 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 35.0d + "'", double62 == 35.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 35.0d + "'", double65 == 35.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.distribution.TDistribution tDistribution27 = null;
        tTestImpl26.setDistribution(tDistribution27);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double35 = org.apache.commons.math.stat.StatUtils.sum(doubleArray30);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30, 1225.0d);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray30);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, (double) '#');
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double48 = org.apache.commons.math.stat.StatUtils.mean(doubleArray41);
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = tTestImpl26.t(doubleArray30, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.5553480614894135d + "'", double34 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.distribution.FDistribution fDistribution14 = distributionFactory0.createFDistribution((double) '#', (double) 1.0f);
        double double15 = fDistribution14.getNumeratorDegreesOfFreedom();
        double double16 = fDistribution14.getDenominatorDegreesOfFreedom();
        // The following exception was thrown during execution in test generation
        try {
            fDistribution14.setDenominatorDegreesOfFreedom(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(fDistribution14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale[] localeArray24 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList25);
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 1, mathException19, (byte) 0, localeList27, 1225.0d };
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("de", objArray29);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", objArray29, (java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("und", objArray29, (java.lang.Throwable) mathException36);
        java.io.PrintStream printStream38 = printStream11.printf("org.apache.commons.math.MathException: ", objArray29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.parse("USA", strMap40);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale[] localeArray45 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.List<java.util.Locale> localeList48 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList46);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale[] localeArray52 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.Locale locale57 = java.util.Locale.lookup(languageRangeList41, (java.util.Collection<java.util.Locale>) localeList55);
        printStream38.print((java.lang.Object) languageRangeList41);
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Locale[] localeArray62 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList63 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList63, localeArray62);
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.util.Locale>) localeList63);
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter(languageRangeList41, (java.util.Collection<java.util.Locale>) localeList63);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(localeList56);
        org.junit.Assert.assertNull(locale57);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNotNull(localeList66);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        double double10 = pascalDistribution6.probability((int) 'x');
        double double12 = pascalDistribution6.cumulativeProbability((int) (byte) 10);
        int int14 = pascalDistribution6.inverseCumulativeProbability((double) 1L);
        double double15 = pascalDistribution6.getProbabilityOfSuccess();
        double double16 = pascalDistribution6.getProbabilityOfSuccess();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale[] localeArray24 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList25);
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 1, mathException19, (byte) 0, localeList27, 1225.0d };
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("de", objArray29);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", objArray29, (java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("und", objArray29, (java.lang.Throwable) mathException36);
        java.io.PrintStream printStream38 = printStream11.printf("org.apache.commons.math.MathException: ", objArray29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.parse("USA", strMap40);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale[] localeArray45 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.List<java.util.Locale> localeList48 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList46);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale[] localeArray52 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.Locale locale57 = java.util.Locale.lookup(languageRangeList41, (java.util.Collection<java.util.Locale>) localeList55);
        printStream38.print((java.lang.Object) languageRangeList41);
        printStream38.println((long) 10);
        printStream38.print(32.0d);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(localeList56);
        org.junit.Assert.assertNull(locale57);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.print((long) 'u');
        java.lang.Object[] objArray25 = null;
        java.io.PrintWriter printWriter26 = printWriter8.printf("\ud504\ub791\uc2a4", objArray25);
        printWriter8.print("Chinese (China)");
        printWriter8.flush();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter26);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        java.io.PrintStream printStream30 = printStream1.append((java.lang.CharSequence) "german");
        java.io.PrintStream printStream32 = printStream30.append('#');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream36 = printStream32.append((java.lang.CharSequence) "fr_FR", (int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(printStream32);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.distribution.TDistribution tDistribution27 = null;
        tTestImpl26.setDistribution(tDistribution27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = tTestImpl26.tTest(statisticalSummary29, statisticalSummary30, 0.9425673807323827d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.9425673807323827");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = tTestImpl14.tTest(statisticalSummary15, statisticalSummary16, 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        java.io.PrintStream printStream3 = new java.io.PrintStream("French (France)");
        printStream3.println((float) (short) -1);
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale[] localeArray17 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList18);
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 1, mathException12, (byte) 0, localeList20, 1225.0d };
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("de", objArray22);
        java.io.PrintStream printStream25 = printStream3.printf(locale6, "hi!", objArray22);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("und", objArray22);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("\ud504\ub791\uc2a4", (java.lang.Throwable) mathException26);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream25);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution((double) (short) 1, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution17 = distributionFactory0.createPascalDistribution((int) (short) -1, (double) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution14);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        hypergeometricDistribution10.setSampleSize((int) (short) 1);
        hypergeometricDistribution10.setNumberOfSuccesses((int) '4');
        int int15 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize((int) '#');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, (double) '#');
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray15);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray23);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double35 = org.apache.commons.math.stat.StatUtils.product(doubleArray30);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray30);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        double double38 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray23, doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = tTestImpl13.pairedTTest(doubleArray15, doubleArray23, 0.035086649709077655d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.5553480614894135d + "'", double34 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution14 = distributionFactory0.createWeibullDistribution(35.0d, 0.24999999999999964d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution17 = distributionFactory0.createCauchyDistribution(35.0d, 12.2d);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution19 = distributionFactory0.createPoissonDistribution(0.3678794411714425d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(weibullDistribution14);
        org.junit.Assert.assertNotNull(cauchyDistribution17);
        org.junit.Assert.assertNotNull(poissonDistribution19);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.print((double) (byte) 100);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        printStream15.println(' ');
        printStream15.print(false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter24 = printWriter22.append(' ');
        java.io.PrintWriter printWriter26 = printWriter24.append('u');
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Locale[] localeArray39 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList40);
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 1, mathException34, (byte) 0, localeList42, 1225.0d };
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("de", objArray44);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", objArray44, (java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("und", objArray44, (java.lang.Throwable) mathException51);
        java.io.PrintWriter printWriter53 = printWriter24.printf("Deutsch", objArray44);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray56);
        java.io.PrintWriter printWriter58 = printWriter53.format("French", (java.lang.Object[]) strArray56);
        java.io.PrintStream printStream59 = printStream12.format("ja", (java.lang.Object[]) strArray56);
        printStream59.flush();
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(printStream59);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution8 = distributionFactory0.createCauchyDistribution((-1.0d), 1225.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution((double) 0.0f, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Standard deviation must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(cauchyDistribution8);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 97.0d, (int) (byte) -1, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        weibullDistribution9.setShape((double) 'x');
        double double12 = weibullDistribution9.getShape();
        double double13 = weibullDistribution9.getScale();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 120.0d + "'", double12 == 120.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder11 = builder6.setExtension('x', "FRA");
        java.util.Locale.Builder builder14 = builder6.setExtension('x', "german");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder6.addUnicodeLocaleAttribute("English (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: English (United Kingdom) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList9, strMap10);
        java.lang.String[] strArray19 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags(languageRangeList11, (java.util.Collection<java.lang.String>) strList20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList27, strMap28);
        java.lang.String[] strArray37 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags(languageRangeList29, (java.util.Collection<java.lang.String>) strList38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags(languageRangeList11, (java.util.Collection<java.lang.String>) strList38, filteringMode41);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strMap47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList48, strMap49);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, strMap57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList58, strMap59);
        java.lang.String[] strArray68 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags(languageRangeList60, (java.util.Collection<java.lang.String>) strList69);
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strList71);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags(languageRangeList48, (java.util.Collection<java.lang.String>) strList71);
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList73);
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        boolean boolean77 = locale76.hasExtensions();
        java.lang.String str78 = locale75.getDisplayLanguage(locale76);
        java.util.Locale locale79 = java.util.Locale.FRANCE;
        java.lang.String str80 = locale79.getISO3Language();
        java.lang.String str81 = locale79.getDisplayName();
        boolean boolean82 = locale79.hasExtensions();
        java.lang.String str83 = locale76.getDisplayLanguage(locale79);
        java.util.Set<java.lang.Character> charSet84 = locale76.getExtensionKeys();
        java.lang.String str85 = locale76.toLanguageTag();
        java.util.Set<java.lang.String> strSet86 = locale76.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet86);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode41.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(languageRangeList58);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Italienisch" + "'", str78, "Italienisch");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "fra" + "'", str80, "fra");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "French (France)" + "'", str81, "French (France)");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "allemand" + "'", str83, "allemand");
        org.junit.Assert.assertNotNull(charSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "de" + "'", str85, "de");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strList87);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double5 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray2);
        double double8 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, 1, 0);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray2, doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20, 1, 0);
        double double26 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray20, (double) (byte) 100);
        double double27 = org.apache.commons.math.stat.StatUtils.mean(doubleArray20);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = tTestImpl0.pairedT(doubleArray2, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 34.99999999999999d + "'", double5 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.5553480614894135d + "'", double6 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.5553480614894135d + "'", double17 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("FRA");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.util.Locale locale1 = new java.util.Locale("Chinese");
        org.junit.Assert.assertEquals(locale1.toString(), "chinese");
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getVariant();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale0.getDisplayLanguage(locale2);
        java.lang.String str6 = locale2.getExtension('a');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "German" + "'", str3, "German");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Deutsch" + "'", str4, "Deutsch");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale4.getISO3Language();
        java.lang.String str6 = locale4.getDisplayName();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str8 = locale1.getDisplayLanguage(locale4);
        java.util.Set<java.lang.Character> charSet9 = locale1.getExtensionKeys();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getISO3Language();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale10.getDisplayScript(locale12);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale10.getDisplayScript(locale14);
        java.lang.String str17 = locale10.toLanguageTag();
        java.lang.String str18 = locale1.getDisplayLanguage(locale10);
        java.lang.String str19 = locale10.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italienisch" + "'", str3, "Italienisch");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (France)" + "'", str6, "French (France)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "allemand" + "'", str8, "allemand");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "und" + "'", str17, "und");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "German" + "'", str18, "German");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 515.7000000000007d);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 2147483647, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution3 = distributionFactory0.createPascalDistribution((int) (short) 0, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.36787944117144233d);
        poissonDistribution8.setMean((double) (byte) 100);
        double double11 = poissonDistribution8.getMean();
        double double13 = poissonDistribution8.normalApproximateProbability((int) (short) 100);
        poissonDistribution8.setMean(0.9924226248244282d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5199388058383725d + "'", double13 == 0.5199388058383725d);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale4.getDisplayScript(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale4.getDisplayScript(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder0.addUnicodeLocaleAttribute("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????????? (???????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayLanguage(locale3);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder8 = builder0.setLanguageTag("ja");
        java.util.Locale locale9 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder0.setLanguageTag("\ub3c5\uc77c\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Italienisch" + "'", str5, "Italienisch");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        char[] charArray14 = new char[] { ' ' };
        printWriter12.write(charArray14);
        printStream1.print(charArray14);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream23 = new java.io.PrintStream("French (France)");
        printStream23.println((float) (short) -1);
        printStream23.println(' ');
        printStream23.flush();
        java.util.Locale locale29 = null;
        java.io.PrintStream printStream32 = new java.io.PrintStream("French (France)");
        printStream32.println((float) (short) -1);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream32);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream32);
        java.io.PrintStream printStream39 = new java.io.PrintStream("French (France)");
        printStream39.println((float) (short) -1);
        printStream39.println(' ');
        printStream39.print(false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        java.io.PrintWriter printWriter48 = printWriter46.append(' ');
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        boolean boolean50 = locale49.hasExtensions();
        java.lang.String str51 = locale49.getDisplayVariant();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale52.getDisplayName();
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = locale54.getISO3Country();
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleKeys();
        java.lang.String str57 = locale52.getDisplayCountry(locale54);
        java.lang.String str58 = locale49.getDisplayName(locale54);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale[] localeArray69 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 1, mathException64, (byte) 0, localeList72, 1225.0d };
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("de", objArray74);
        java.io.PrintWriter printWriter77 = printWriter48.printf(locale49, "zho", objArray74);
        java.io.PrintWriter printWriter78 = printWriter36.printf("", objArray74);
        java.io.PrintStream printStream79 = printStream23.printf(locale29, "und", objArray74);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("fra", objArray74);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("", objArray74);
        java.io.PrintStream printStream82 = printStream1.format("\uc774\ud0c8\ub9ac\uc544\uc5b4", objArray74);
        printStream82.print('x');
        java.util.Locale locale85 = java.util.Locale.GERMAN;
        java.lang.String str86 = locale85.getDisplayName();
        java.lang.String str87 = locale85.getLanguage();
        java.util.Locale locale88 = locale85.stripExtensions();
        java.lang.String str89 = locale88.getVariant();
        printStream82.println((java.lang.Object) locale88);
        printStream82.println(false);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ]");
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "German" + "'", str53, "German");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "FRA" + "'", str55, "FRA");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "allemand" + "'", str58, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "German" + "'", str86, "German");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "de" + "'", str87, "de");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution((double) (short) 100, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution7 = distributionFactory0.createChiSquareDistribution(Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(normalDistribution5);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory30 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution33 = distributionFactory30.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution36 = distributionFactory30.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory30.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory30.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tTestImpl12.setDistribution(tDistribution41);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double49 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray46);
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double51 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double double52 = org.apache.commons.math.stat.StatUtils.sum(doubleArray46);
        double[] doubleArray54 = new double[] { '#' };
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54, 1, 0);
        double double59 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray54);
        double double60 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray46, doubleArray54);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double[] doubleArray63 = new double[] { '#' };
        double double64 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray63);
        double double65 = org.apache.commons.math.stat.StatUtils.variance(doubleArray63);
        double double66 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray63);
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double68 = org.apache.commons.math.stat.StatUtils.sum(doubleArray63);
        double double69 = org.apache.commons.math.stat.StatUtils.product(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = tTestImpl12.homoscedasticTTest(doubleArray46, doubleArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory30);
        org.junit.Assert.assertNotNull(weibullDistribution33);
        org.junit.Assert.assertNotNull(fDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 34.99999999999999d + "'", double49 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 3.5553480614894135d + "'", double50 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 34.99999999999999d + "'", double59 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 3.5553480614894135d + "'", double61 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1225.0d + "'", double64 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 34.99999999999999d + "'", double66 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 3.5553480614894135d + "'", double67 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 35.0d + "'", double68 == 35.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 35.0d + "'", double69 == 35.0d);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getDisplayVariant();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Country();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale14.getDisplayCountry(locale16);
        java.lang.String str20 = locale11.getDisplayName(locale16);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 1, mathException26, (byte) 0, localeList34, 1225.0d };
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("de", objArray36);
        java.io.PrintWriter printWriter39 = printWriter10.printf(locale11, "zho", objArray36);
        java.io.PrintStream printStream41 = new java.io.PrintStream("French (France)");
        printStream41.println((float) (short) -1);
        printStream41.println(' ');
        printStream41.print(false);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream41);
        java.io.PrintWriter printWriter50 = printWriter48.append(' ');
        java.io.PrintWriter printWriter52 = printWriter50.append('u');
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale[] localeArray65 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList66);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 1, mathException60, (byte) 0, localeList68, 1225.0d };
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("de", objArray70);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("", objArray70, (java.lang.Throwable) mathException74);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("und", objArray70, (java.lang.Throwable) mathException77);
        java.io.PrintWriter printWriter79 = printWriter50.printf("Deutsch", objArray70);
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray82);
        java.io.PrintWriter printWriter84 = printWriter79.format("French", (java.lang.Object[]) strArray82);
        java.io.PrintStream printStream86 = new java.io.PrintStream("French (France)");
        printStream86.println((float) (short) -1);
        java.io.PrintStream printStream89 = new java.io.PrintStream((java.io.OutputStream) printStream86);
        java.io.PrintWriter printWriter90 = new java.io.PrintWriter((java.io.OutputStream) printStream86);
        char[] charArray92 = new char[] { ' ' };
        printWriter90.write(charArray92);
        printWriter84.write(charArray92);
        printWriter39.write(charArray92);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "German" + "'", str15, "German");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FRA" + "'", str17, "FRA");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "allemand" + "'", str20, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(printWriter84);
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[ ]");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution13 = distributionFactory0.createHypergeometricDistribution((int) (short) 1, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.TDistribution tDistribution15 = distributionFactory0.createTDistribution((double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(hypergeometricDistribution13);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder0.setScript("United Kingdom");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: United Kingdom [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize(0);
        hypergeometricDistribution10.setSampleSize((int) (short) 100);
        hypergeometricDistribution10.setPopulationSize(2147483647);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        printStream2.println(' ');
        printStream2.print(false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream2);
        java.io.PrintWriter printWriter11 = printWriter9.append(' ');
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale12.getDisplayVariant();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getDisplayName();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale17.getISO3Country();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        java.lang.String str20 = locale15.getDisplayCountry(locale17);
        java.lang.String str21 = locale12.getDisplayName(locale17);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale[] localeArray32 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList33);
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 1, mathException27, (byte) 0, localeList35, 1225.0d };
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("de", objArray37);
        java.io.PrintWriter printWriter40 = printWriter11.printf(locale12, "zho", objArray37);
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale43 = java.util.Locale.PRC;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter47 = printWriter40.format(locale42, "de", (java.lang.Object[]) strArray46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("German", (java.lang.Object[]) strArray46);
        java.lang.String str49 = mathException48.toString();
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "German" + "'", str16, "German");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "FRA" + "'", str18, "FRA");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "allemand" + "'", str21, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org.apache.commons.math.MathException: German" + "'", str49, "org.apache.commons.math.MathException: German");
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale[] localeArray23 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList24);
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 1, mathException18, (byte) 0, localeList26, 1225.0d };
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("de", objArray28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("Chinesisch (China)", objArray28);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray28);
        java.io.PrintWriter printWriter33 = printWriter10.format("USA", objArray28);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        // The following exception was thrown during execution in test generation
        try {
            printWriter34.write("Chinese (China)", 120, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 152");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter33);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8, (double) '#');
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double15 = org.apache.commons.math.stat.StatUtils.min(doubleArray8);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8, (int) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.max(doubleArray18);
        double double25 = org.apache.commons.math.stat.StatUtils.min(doubleArray18);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.sum(doubleArray28);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36, 1, 0);
        double double41 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray36);
        double double42 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray28, doubleArray36);
        double double43 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray18, doubleArray36);
        double double45 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray18, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray10, doubleArray18, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 34.99999999999999d + "'", double21 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 34.99999999999999d + "'", double41 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31, (double) '#');
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double40 = org.apache.commons.math.stat.StatUtils.mean(doubleArray31, (int) (short) 0, (int) (byte) 0);
        java.io.PrintStream printStream42 = new java.io.PrintStream("French (France)");
        printStream42.println((float) (short) -1);
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Locale[] localeArray56 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList57);
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 1, mathException51, (byte) 0, localeList59, 1225.0d };
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", objArray61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("de", objArray61);
        java.io.PrintStream printStream64 = printStream42.printf(locale45, "hi!", objArray61);
        double[] doubleArray66 = new double[] { '#' };
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        double double68 = org.apache.commons.math.stat.StatUtils.variance(doubleArray66);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray66, (double) '#');
        double double71 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        printStream64.print((java.lang.Object) doubleArray66);
        double[] doubleArray74 = new double[] { '#' };
        double double75 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray74);
        double double76 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray66, doubleArray74);
        double[] doubleArray78 = new double[] { '#' };
        double double79 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray78);
        double double80 = org.apache.commons.math.stat.StatUtils.variance(doubleArray78);
        double double81 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray78);
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray78);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray78);
        double double84 = org.apache.commons.math.stat.StatUtils.sum(doubleArray78);
        double double85 = org.apache.commons.math.stat.StatUtils.product(doubleArray78);
        double[] doubleArray87 = new double[] { '#' };
        double double88 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray87);
        double double89 = org.apache.commons.math.stat.StatUtils.variance(doubleArray87);
        double double91 = org.apache.commons.math.stat.StatUtils.variance(doubleArray87, (double) '#');
        double double92 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray87);
        double double93 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray78, doubleArray87);
        double double94 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray74, doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = tTestImpl12.homoscedasticTTest(doubleArray31, doubleArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1225.0d + "'", double67 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1225.0d + "'", double71 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1225.0d + "'", double75 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[35.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1225.0d + "'", double79 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 34.99999999999999d + "'", double81 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3.5553480614894135d + "'", double82 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 35.0d + "'", double83 == 35.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 35.0d + "'", double84 == 35.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 35.0d + "'", double85 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[35.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1225.0d + "'", double88 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1225.0d + "'", double92 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray11 = null;
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, 1, 0);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray13);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20, (double) '#');
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double27 = org.apache.commons.math.stat.StatUtils.min(doubleArray20);
        double double28 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray13, doubleArray20);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30, (double) '#');
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        double double37 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray13, doubleArray30);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl1.pairedT(doubleArray11, doubleArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.5553480614894135d + "'", double38 == 3.5553480614894135d);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("GB");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "german");
        org.junit.Assert.assertNotNull(builder6);
    }
}

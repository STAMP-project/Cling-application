import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: hi!");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream1 = new java.io.PrintStream(outputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream1 = new java.io.PrintStream(file0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.tTest(statisticalSummary2, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray2 = null;
        double[] doubleArray8 = new double[] { (short) 10, (byte) -1, (-1L), (-1.0d), (-1.0f) };
        // The following exception was thrown during execution in test generation
        try {
            double double9 = tTestImpl1.pairedT(doubleArray2, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, -1.0, -1.0, -1.0]");
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        double[] doubleArray6 = new double[] { (short) 0, 10.0f, 1L, '4', (byte) 0, ' ' };
        double[] doubleArray12 = new double[] { 0L, (byte) 1, 0L, (byte) 10, 0 };
        // The following exception was thrown during execution in test generation
        try {
            double double13 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray6, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 1.0, 52.0, 0.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0, 0.0, 10.0, 0.0]");
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) '4', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter1 = new java.io.PrintWriter(writer0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        double[] doubleArray3 = new double[] { (byte) 10, (byte) 1, 100.0f };
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray3, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 1.0, 100.0]");
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.lang.Class<?> wildcardClass5 = languageRangeList4.getClass();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray8 = new double[] { 10.0f, (byte) 1, 1.0d, (-1.0f), (-1L), 100L };
        double[] doubleArray14 = new double[] { 10L, 10.0f, (-1.0f), 0.0d, '#' };
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl1.pairedTTest(doubleArray8, doubleArray14, 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 1.0, 1.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 10.0, -1.0, 0.0, 35.0]");
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t((double) 100, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        double[] doubleArray1 = new double[] { ' ' };
        // The following exception was thrown during execution in test generation
        try {
            double double4 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[32.0]");
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale0.getUnicodeLocaleType("FRA");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: FRA");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fra" + "'", str1, "fra");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "French (France)" + "'", str2, "French (France)");
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.mean(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t(statisticalSummary2, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        char char0 = java.util.Locale.UNICODE_LOCALE_EXTENSION;
        org.junit.Assert.assertTrue("'" + char0 + "' != '" + 'u' + "'", char0 == 'u');
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Italienisch");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=italienisch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t((double) 0.0f, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("hi!", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setVariant("de");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: de [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("FRA", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        double[] doubleArray6 = new double[] { 1L, 'a', '#', 'a', (byte) -1, (byte) 0 };
        double[] doubleArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray7, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 97.0, 35.0, 97.0, -1.0, 0.0]");
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setLanguageTag("Italienisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: Italienisch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray6 = new double[] { '#' };
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = tTestImpl1.tTest(doubleArray3, doubleArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1225.0d + "'", double7 == 1225.0d);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.tTest(statisticalSummary2, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.setRegion("German");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: German [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = tTestImpl1.tTest((double) (byte) 100, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("German", "France");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: France");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray6 = new double[] { '#' };
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = tTestImpl1.tTest(doubleArray3, doubleArray6, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1225.0d + "'", double7 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray5 = new double[] { (short) 1, 100L };
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = tTestImpl1.tTest((double) 10, doubleArray5, 1225.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1225.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl1.t(doubleArray3, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter1 = new java.io.PrintWriter(outputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.homoscedasticTTest(statisticalSummary2, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray5 = new double[] { (short) 10, (-1.0d), (short) 0 };
        double[] doubleArray6 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = tTestImpl1.homoscedasticTTest(doubleArray5, doubleArray6, 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.homoscedasticTTest(statisticalSummary2, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = tTestImpl1.homoscedasticTTest(doubleArray3, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (short) 1, 0L, 10.0f, 100L };
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = tTestImpl1.tTest((double) (byte) 100, doubleArray7, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0, 10.0, 100.0]");
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("", "de");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        double double0 = java.util.Locale.LanguageRange.MAX_WEIGHT;
        org.junit.Assert.assertTrue("'" + double0 + "' != '" + 1.0d + "'", double0 == 1.0d);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setUnicodeLocaleKeyword("France", "hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: France [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.homoscedasticT(statisticalSummary2, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = tTestImpl1.tTest((double) 0.0f, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("", "FRA");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: FRA");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest((double) 1.0f, statisticalSummary3, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray6 = new double[] { '#' };
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray6);
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl1.pairedTTest(doubleArray3, doubleArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1225.0d + "'", double7 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 34.99999999999999d + "'", double9 == 34.99999999999999d);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("FRA", "hi!");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: hi!");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = tTestImpl1.t(doubleArray3, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { 'a' };
        // The following exception was thrown during execution in test generation
        try {
            double double5 = tTestImpl1.tTest(0.0d, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[97.0]");
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        double double0 = java.util.Locale.LanguageRange.MIN_WEIGHT;
        org.junit.Assert.assertTrue("'" + double0 + "' != '" + 0.0d + "'", double0 == 0.0d);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter1 = new java.io.PrintWriter(file0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.tTest((double) (-1), statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) '4', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t(statisticalSummary2, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray8 = new double[] { (short) -1, 1225.0d, (short) 100, 100.0d, (byte) 100, 100 };
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl1.homoscedasticTTest(doubleArray8, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1225.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.tTest(100.0d, doubleArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(writer0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, (int) (short) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = tTestImpl1.tTest((double) (-1.0f), doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray9 = new double[] { 1, 0L, 0, 0L };
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = tTestImpl1.homoscedasticTTest(doubleArray3, doubleArray9, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        double[] doubleArray6 = new double[] { 100.0d, (-1.0d), ' ', 0.0f, 100, 100 };
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, -1.0, 32.0, 0.0, 100.0, 100.0]");
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setRegion("zh-CN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: zh-CN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray0, (-1), (int) (short) 0, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("", "fra");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: fra");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution6 = distributionFactory0.createGammaDistribution((double) '4', (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: beta must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest((double) 1.0f, statisticalSummary3, (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 35.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("Italienisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Italienisch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double[] doubleArray7 = new double[] { '#' };
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray7);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray7);
        double double10 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = tTestImpl1.pairedTTest(doubleArray3, doubleArray7, (double) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 117.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 34.99999999999999d + "'", double10 == 34.99999999999999d);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) (short) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.tTest((double) (short) 10, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, (double) '#');
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.pairedT(doubleArray3, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.apache.commons.math.MathException mathException0 = new org.apache.commons.math.MathException();
        java.lang.String str1 = mathException0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "org.apache.commons.math.MathException" + "'", str1, "org.apache.commons.math.MathException");
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.setScript("France");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: France [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = tTestImpl1.t((double) 'u', doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(outputStream0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray5 = new double[] { 10, (-1.0d), (short) 0 };
        double[] doubleArray7 = new double[] { '#' };
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = tTestImpl1.pairedTTest(doubleArray5, doubleArray7, (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 35.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = tTestImpl1.t((double) 10L, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setLanguage("hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = tTestImpl1.tTest((double) 1L, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray8 = new double[] { 0, (byte) 1, (-1.0d), (byte) -1, 100L, '#' };
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl1.tTest(doubleArray8, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0, -1.0, -1.0, 100.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = tTestImpl1.tTest((-1.0d), doubleArray4, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, (double) '#');
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.homoscedasticTTest(doubleArray3, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        java.lang.String[] strArray2 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray2);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("allemand", (java.lang.Object[]) strArray2);
        java.lang.String str5 = mathException4.toString();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.MathException: allemand" + "'", str5, "org.apache.commons.math.MathException: allemand");
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, (int) '#', (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double[] doubleArray10 = new double[] { 1225.0d, 'u', 0 };
        // The following exception was thrown during execution in test generation
        try {
            double double11 = tTestImpl1.t(doubleArray3, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1225.0, 117.0, 0.0]");
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.Object obj2 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "French" + "'", str1, "French");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "fr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "fr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "fr");
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t(35.0d, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "zh-CN");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zh-CN");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, (double) '#');
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl1.tTest(doubleArray3, doubleArray10, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t((double) 'u', statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (int) (byte) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(statisticalSummary2, statisticalSummary3, 1225.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1225.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getUnicodeLocaleType("Italienisch");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Italienisch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t((double) 10, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution7 = distributionFactory0.createGammaDistribution((double) (byte) 100, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: beta must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = weibullDistribution3.inverseCumulativeProbability((double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability argument must be between 0 and 1 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = tTestImpl1.tTest((double) 1L, doubleArray4, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.lang.String str3 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "de" + "'", str3, "de");
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(writer0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream3 = new java.io.PrintStream(outputStream0, true, "Italienisch");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(0.0d, statisticalSummary3, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double[] doubleArray7 = new double[] { '#' };
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray7);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray7);
        double double10 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray7);
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = tTestImpl1.pairedTTest(doubleArray3, doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 34.99999999999999d + "'", double10 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.5553480614894135d + "'", double11 == 3.5553480614894135d);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray3);
        double[] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double9 = tTestImpl1.homoscedasticTTest(doubleArray3, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = tTestImpl1.tTest((double) 0, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("FR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: FR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4, (double) '#');
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl1.t((-1.0d), doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution8 = distributionFactory0.createExponentialDistribution((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 1, mathException5, (byte) 0, localeList13, 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("de", objArray15);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray15, (java.lang.Throwable) mathException19);
        java.lang.String str21 = mathException20.toString();
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.MathException: " + "'", str21, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("zho", "French (France)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: French (France)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale3.getDisplayCountry(locale5);
        java.lang.String str9 = locale0.getDisplayName(locale5);
        java.lang.Object obj10 = locale5.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "allemand" + "'", str9, "allemand");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "fr_FR");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "fr_FR");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "fr_FR");
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "Italienisch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Italienisch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale[] localeArray9 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 1, mathException4, (byte) 0, localeList12, 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("de", objArray14);
        java.lang.String str17 = mathException16.toString();
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.MathException: de" + "'", str17, "org.apache.commons.math.MathException: de");
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.homoscedasticT(statisticalSummary2, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double[] doubleArray7 = new double[] { 1.0d, (short) 10, (-1.0d) };
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 10.0, -1.0]");
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) (byte) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, (double) '#');
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = tTestImpl1.pairedTTest(doubleArray3, doubleArray11, 34.99999999999999d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 34.99999999999999");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = tTestImpl1.t(1225.0d, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double[] doubleArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double8 = tTestImpl1.homoscedasticT(doubleArray3, doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t((double) 1, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, (double) '#');
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray11 = new double[] { 10, '4' };
        // The following exception was thrown during execution in test generation
        try {
            double double12 = tTestImpl1.homoscedasticT(doubleArray3, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0]");
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        byte[] byteArray2 = new byte[] {};
        printStream1.write(byteArray2);
        printStream1.write((int) (byte) 100);
        byte[] byteArray7 = new byte[] { (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray7, 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10]");
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(statisticalSummary2, statisticalSummary3, (double) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 117.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, 1, 0);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl1.pairedTTest(doubleArray3, doubleArray10, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4, 1, 0);
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = tTestImpl1.tTest((double) 10, doubleArray4, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 34.99999999999999d + "'", double9 == 34.99999999999999d);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        char char0 = java.util.Locale.PRIVATE_USE_EXTENSION;
        org.junit.Assert.assertTrue("'" + char0 + "' != '" + 'x' + "'", char0 == 'x');
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "en" + "'", str1, "en");
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream11 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: allemand", (int) ' ', (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4, (double) '#');
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = tTestImpl1.tTest(0.0d, doubleArray4, (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution9 = distributionFactory0.createFDistribution((double) (short) -1, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, (double) '#');
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = tTestImpl1.tTest(doubleArray3, doubleArray10, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest((double) (-1.0f), doubleArray3, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(statisticalSummary2, statisticalSummary3, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution15 = distributionFactory0.createHypergeometricDistribution(0, (int) 'a', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setScript("en");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: en [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "german");
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t((double) (-1), statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl7.tTest(Double.NaN, statisticalSummary9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        char[] charArray44 = new char[] { 'a', '#', 'a', 'u', '#' };
        // The following exception was thrown during execution in test generation
        try {
            printWriter38.write(charArray44, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "a#au#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "a#au#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[a, #, a, u, #]");
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        double double7 = tDistribution6.getDegreesOfFreedom();
        // The following exception was thrown during execution in test generation
        try {
            tDistribution6.setDegreesOfFreedom((double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        // The following exception was thrown during execution in test generation
        try {
            cauchyDistribution6.setScale((double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setLanguageTag("French (France)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: French (France) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (int) ' ', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = tDistribution6.inverseCumulativeProbability((double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl7.homoscedasticT(statisticalSummary8, statisticalSummary9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double8 = org.apache.commons.math.stat.StatUtils.sum(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.max(doubleArray3);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray11);
        double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray11);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19, 1, 0);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray11, doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl1.t(doubleArray3, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.5553480614894135d + "'", double15 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, 1, 0);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl1.pairedTTest(doubleArray3, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) 0.0f, (int) 'x', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t((double) ' ', statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) (byte) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray2 = null;
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl1.pairedTTest(doubleArray2, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double[] doubleArray16 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double double17 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        printWriter8.print("");
        char[] charArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter8.write(charArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, 1, 0);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl1.tTest(doubleArray3, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = tTestImpl7.tTest(doubleArray9, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        double double8 = cauchyDistribution6.getMedian();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = cauchyDistribution6.cumulativeProbability(100.0d, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setUnicodeLocaleKeyword("org.apache.commons.math.MathException", "France");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: org.apache.commons.math.MathException [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl1.t((double) 100.0f, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter5.print('4');
        char[] charArray14 = new char[] { ' ', 'a', 'a', 'x', '4', 'x' };
        // The following exception was thrown during execution in test generation
        try {
            printWriter5.write(charArray14, 10, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " aax4x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " aax4x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ , a, a, x, 4, x]");
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setVariant("FRA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: FRA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale2.getCountry();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.lang.String str9 = locale2.getDisplayName(locale7);
        java.util.Locale.setDefault(locale7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.print((int) 'u');
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("hi!", "en");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: en");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayLanguage(locale1);
        java.lang.String str4 = locale1.getScript();
        java.lang.Object obj5 = locale1.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italienisch" + "'", str3, "Italienisch");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "de");
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = tTestImpl1.tTest((double) 1.0f, doubleArray4, 35.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 35.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution9 = distributionFactory0.createPascalDistribution(0, 35.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4, 1, 0);
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl1.t((-1.0d), doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 34.99999999999999d + "'", double9 == 34.99999999999999d);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = tTestImpl7.homoscedasticT(doubleArray9, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double double10 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = tTestImpl1.t(0.24999999999999964d, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution9 = distributionFactory0.createPascalDistribution(0, 34.99999999999999d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (int) (byte) 100, (int) 'u', (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fra");
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: fra (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution13 = distributionFactory0.createHypergeometricDistribution(10, 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution13 = distributionFactory0.createHypergeometricDistribution((int) (short) -1, (int) (short) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: sample size must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("fra", "org.apache.commons.math.MathException: ");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = tTestImpl7.tTest((double) 0L, doubleArray10, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = tTestImpl1.tTest((double) 0.0f, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray8 = null;
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, 1, 0);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray10, doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl7.pairedT(doubleArray8, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.5553480614894135d + "'", double14 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.tTest((double) (short) 10, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, (double) '#');
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double22 = org.apache.commons.math.stat.StatUtils.mean(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl7.homoscedasticT(doubleArray9, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl7.t(10.0d, statisticalSummary9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (int) 'x', (int) (short) -1, 0.24999999999999964d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl7.t(doubleArray9, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution15 = distributionFactory0.createHypergeometricDistribution((int) (byte) 0, (int) '#', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream27 = printStream23.append((java.lang.CharSequence) "org.apache.commons.math.MathException: de", (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setScript("German");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: German [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.variance(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4, 1, 0);
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = tTestImpl1.tTest(3.5553480614894135d, doubleArray4, (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 52.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 34.99999999999999d + "'", double9 == 34.99999999999999d);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution9 = distributionFactory0.createFDistribution((double) 0.0f, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, (int) '#', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        java.lang.String[] strArray1 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray1);
        java.lang.String str3 = mathException2.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.apache.commons.math.MathException: " + "'", str3, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        double[] doubleArray0 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.product(doubleArray0, (int) ' ', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = tTestImpl1.tTest(statisticalSummary11, statisticalSummary12, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = tTestImpl1.tTest(doubleArray12, doubleArray20, Double.NaN);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray3);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, (double) '#');
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl1.pairedTTest(doubleArray3, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.MathException: ", "Deutsch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Deutsch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        double double5 = normalDistribution4.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution((double) (short) 1, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            normalDistribution14.setStandardDeviation(Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Standard deviation must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution14);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setVariant("zho");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: zho [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, (double) '#');
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, (double) '#');
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = tTestImpl1.tTest(doubleArray3, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 34.99999999999999d + "'", double9 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 3.5553480614894135d + "'", double10 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, (-1), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.t(34.99999999999999d, statisticalSummary12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder4 = builder1.setScript("");
        boolean boolean5 = locale0.equals((java.lang.Object) "");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, (int) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory2.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution13 = distributionFactory2.createExponentialDistribution((double) 100);
        boolean boolean14 = locale0.equals((java.lang.Object) exponentialDistribution13);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(exponentialDistribution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.MathException", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, 1, 0);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray10, doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = tTestImpl7.tTest((double) 10.0f, doubleArray18, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.5553480614894135d + "'", double14 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "France");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: France");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray3);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11, 1, 0);
        double double16 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray11);
        double double17 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray3, doubleArray11);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double25 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double double26 = org.apache.commons.math.stat.StatUtils.sum(doubleArray20);
        double double28 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray20, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = tTestImpl1.homoscedasticTTest(doubleArray3, doubleArray20, (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 35.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, (double) '#');
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21, (double) '#');
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double28 = org.apache.commons.math.stat.StatUtils.mean(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = tTestImpl1.homoscedasticT(doubleArray12, doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution((double) (short) 1, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution17 = distributionFactory0.createPascalDistribution((int) (short) 10, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution14);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution10 = distributionFactory0.createExponentialDistribution(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution9 = distributionFactory0.createBinomialDistribution((-1), (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of trials must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.println((int) (short) 100);
        java.io.PrintStream printStream25 = new java.io.PrintStream("French (France)");
        printStream25.println((float) (short) -1);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream25);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream25);
        java.lang.Object obj30 = null;
        printWriter29.println(obj30);
        printWriter29.write((int) (short) 1);
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream35);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        char[] charArray41 = new char[] { ' ' };
        printWriter39.write(charArray41);
        java.io.PrintStream printStream44 = new java.io.PrintStream("French (France)");
        printStream44.println((float) (short) -1);
        java.io.PrintStream printStream47 = new java.io.PrintStream((java.io.OutputStream) printStream44);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream44);
        char[] charArray50 = new char[] { ' ' };
        printWriter48.write(charArray50);
        printWriter39.println(charArray50);
        printWriter29.write(charArray50, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            printWriter8.write(charArray50, (-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ ]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale[] localeArray69 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 1, mathException64, (byte) 0, localeList72, 1225.0d };
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("de", objArray74);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", objArray74, (java.lang.Throwable) mathException78);
        java.io.PrintStream printStream80 = printStream57.format("", objArray74);
        printStream57.println((int) '4');
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Deutsch" + "'", str31, "Deutsch");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream80);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution9.setShape((double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.t((double) (short) 0, statisticalSummary12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = tTestImpl7.tTest(34.99999999999999d, doubleArray10, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.t(statisticalSummary11, statisticalSummary12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = tTestImpl7.pairedTTest(doubleArray9, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("USA", (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "hi!");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: hi!");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl7.tTest((double) (byte) 1, statisticalSummary9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        double double7 = fDistribution6.getDenominatorDegreesOfFreedom();
        // The following exception was thrown during execution in test generation
        try {
            fDistribution6.setDenominatorDegreesOfFreedom(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale0.getDisplayScript(locale4);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale[] localeArray22 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList23);
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 1, mathException17, (byte) 0, localeList25, 1225.0d };
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", objArray27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("de", objArray27);
        java.io.PrintStream printStream30 = printStream8.printf(locale11, "hi!", objArray27);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 1, (byte) 0, (byte) 10, (byte) -1 };
        printStream30.write(byteArray36);
        boolean boolean38 = locale0.equals((java.lang.Object) printStream30);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("French (France)", (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("de");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: de [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl7.tTest((double) 1.0f, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.5553480614894135d + "'", double14 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        double[] doubleArray3 = new double[] { (-1.0f), (byte) 1, '4' };
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray3, 0, (int) (byte) -1, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 1.0, 52.0]");
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.MathException", "France");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: France");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution5 = distributionFactory0.createPascalDistribution((int) (short) -1, (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (int) (short) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.sum(doubleArray12);
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl1.pairedT(doubleArray12, doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) (short) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("org.apache.commons.math.MathException: ", "FRA");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: FRA");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale2.getCountry();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.lang.String str9 = locale2.getDisplayName(locale7);
        java.lang.String str10 = locale7.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest((double) 100, statisticalSummary3, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, 1, 0);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl13.t(doubleArray15, doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.tTest(100.0d, statisticalSummary12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder2.build();
        java.lang.String str4 = locale3.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "german" + "'", str4, "german");
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream1 = new java.io.PrintStream("fra");
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: fra (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.max(doubleArray15);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21, (double) '#');
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double27 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray15, doubleArray21);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29, (double) '#');
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = tTestImpl13.t(doubleArray15, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) '#');
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray10, doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = tTestImpl7.tTest((double) (byte) 1, doubleArray16, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, (double) '#');
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) '#');
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = tTestImpl7.homoscedasticT(doubleArray9, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.t(statisticalSummary11, statisticalSummary12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, 1, 0);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19, (double) '#');
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl1.homoscedasticTTest(doubleArray12, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.print((int) (byte) 10);
        printWriter5.print(false);
        printWriter5.print(100.0d);
        java.io.PrintWriter printWriter15 = printWriter5.append((java.lang.CharSequence) "zho");
        printWriter5.write("allemand", (int) (byte) 100, (int) (byte) -1);
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)", "USA");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: USA");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, (int) 'u', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.List<java.util.Locale> localeList6 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList11);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNull(locale14);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        // The following exception was thrown during execution in test generation
        try {
            fDistribution6.setNumeratorDegreesOfFreedom(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double25 = org.apache.commons.math.stat.StatUtils.sum(doubleArray20);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = tTestImpl14.pairedTTest(doubleArray16, doubleArray20, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        normalDistribution4.setStandardDeviation(35.0d);
        normalDistribution4.setMean((double) 10L);
        double double9 = normalDistribution4.getStandardDeviation();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, (double) '#');
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl7.homoscedasticTTest(doubleArray9, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 34.99999999999999d + "'", double21 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        double double9 = chiSquaredDistribution8.getDegreesOfFreedom();
        double double10 = chiSquaredDistribution8.getDegreesOfFreedom();
        double double12 = chiSquaredDistribution8.inverseCumulativeProbability((double) (byte) 0);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1225.0d, (int) (short) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.println((float) (short) -1);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale[] localeArray23 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList24);
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 1, mathException18, (byte) 0, localeList26, 1225.0d };
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("de", objArray28);
        java.io.PrintStream printStream31 = printStream9.printf(locale12, "hi!", objArray28);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, (double) '#');
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        printStream31.print((java.lang.Object) doubleArray33);
        double[] doubleArray43 = new double[] { 1, 0.0f, '4' };
        // The following exception was thrown during execution in test generation
        try {
            double double44 = tTestImpl7.t(doubleArray33, doubleArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0, 52.0]");
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.max(doubleArray15);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21, (double) '#');
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double27 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray15, doubleArray21);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29);
        double double32 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = tTestImpl13.tTest(doubleArray15, doubleArray29, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 34.99999999999999d + "'", double32 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 3.5553480614894135d + "'", double33 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = tTestImpl14.pairedTTest(doubleArray16, doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) (byte) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.tTest(statisticalSummary14, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        java.util.Locale locale1 = new java.util.Locale("und");
        org.junit.Assert.assertEquals(locale1.toString(), "und");
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution9 = distributionFactory0.createBinomialDistribution((int) 'u', (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (int) 'u', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        cauchyDistribution6.setScale((double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            cauchyDistribution6.setScale((double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) 'x', (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale[] localeArray9 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 1, mathException4, (byte) 0, localeList12, 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("");
        mathException15.addSuppressed((java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException17);
        java.lang.String str20 = mathException19.toString();
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.MathException: fra" + "'", str20, "org.apache.commons.math.MathException: fra");
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("org.apache.commons.math.MathException", (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        char[] charArray14 = new char[] { ' ' };
        printWriter12.write(charArray14);
        printStream1.print(charArray14);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream20 = printStream1.append((java.lang.CharSequence) "French (France)", 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ]");
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("org.apache.commons.math.mathexception: de");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception: de");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        // The following exception was thrown during execution in test generation
        try {
            printWriter18.write("French", 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 11");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, 1, 0);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray3, (double) (byte) 100);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray11);
        double double17 = org.apache.commons.math.stat.StatUtils.max(doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.tTest(doubleArray3, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.5553480614894135d + "'", double15 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (byte) 10, 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getDisplayVariant();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Country();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale14.getDisplayCountry(locale16);
        java.lang.String str20 = locale11.getDisplayName(locale16);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 1, mathException26, (byte) 0, localeList34, 1225.0d };
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("de", objArray36);
        java.io.PrintWriter printWriter39 = printWriter10.printf(locale11, "zho", objArray36);
        java.io.PrintStream printStream41 = new java.io.PrintStream("French (France)");
        printStream41.println((float) (short) -1);
        java.io.PrintStream printStream44 = new java.io.PrintStream((java.io.OutputStream) printStream41);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream41);
        char[] charArray47 = new char[] { ' ' };
        printWriter45.write(charArray47);
        java.io.PrintStream printStream50 = new java.io.PrintStream("French (France)");
        printStream50.println((float) (short) -1);
        java.io.PrintStream printStream53 = new java.io.PrintStream((java.io.OutputStream) printStream50);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.OutputStream) printStream50);
        char[] charArray56 = new char[] { ' ' };
        printWriter54.write(charArray56);
        printWriter45.println(charArray56);
        printWriter45.println((int) (short) 0);
        char[] charArray62 = new char[] { '4' };
        printWriter45.println(charArray62);
        printWriter39.write(charArray62);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "German" + "'", str15, "German");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FRA" + "'", str17, "FRA");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "allemand" + "'", str20, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[ ]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ ]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[4]");
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(1.0d, statisticalSummary3, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder6.setVariant("zh");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: zh [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.t(statisticalSummary14, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            exponentialDistribution11.setMean(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.tTest(35.0d, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayLanguage(locale1);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory4 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution7 = distributionFactory4.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution8 = distributionFactory4.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution10 = distributionFactory4.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl11 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution10);
        tDistribution10.setDegreesOfFreedom((double) (byte) 10);
        boolean boolean14 = locale0.equals((java.lang.Object) (byte) 10);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italienisch" + "'", str3, "Italienisch");
        org.junit.Assert.assertNotNull(distributionFactory4);
        org.junit.Assert.assertNotNull(weibullDistribution7);
        org.junit.Assert.assertNotNull(normalDistribution8);
        org.junit.Assert.assertNotNull(tDistribution10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        // The following exception was thrown during execution in test generation
        try {
            printWriter5.write("French (France)", (int) (byte) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Deutsch" + "'", str22, "Deutsch");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = tTestImpl1.tTest((double) (-1.0f), statisticalSummary12, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 97.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        boolean boolean6 = locale5.hasExtensions();
        java.lang.String str7 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder8 = builder2.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder2.setVariant("Franz\366sisch (Frankreich)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Franzo?sisch (Frankreich) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italienisch" + "'", str7, "Italienisch");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getScale();
        double double5 = weibullDistribution3.getScale();
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution3.setScale((double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("ITA", "Franz\366sisch (Frankreich)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Franzo?sisch (Frankreich)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = tTestImpl14.tTest((-1.0d), statisticalSummary16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale3.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for german");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, (double) '#');
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray12, doubleArray18);
        java.io.PrintStream printStream26 = new java.io.PrintStream("French (France)");
        printStream26.println((float) (short) -1);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 1, mathException35, (byte) 0, localeList43, 1225.0d };
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("de", objArray45);
        java.io.PrintStream printStream48 = printStream26.printf(locale29, "hi!", objArray45);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, (double) '#');
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        printStream48.print((java.lang.Object) doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = tTestImpl1.tTest(doubleArray12, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double8 = org.apache.commons.math.stat.StatUtils.sum(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl0.t(0.24999999999999964d, doubleArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 3.5553480614894135d + "'", double9 == 3.5553480614894135d);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest((double) (byte) -1, statisticalSummary3, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t(34.99999999999999d, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = tTestImpl7.t((double) (short) 0, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) '#');
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl14.pairedTTest(doubleArray16, doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.5553480614894135d + "'", double30 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, 1, 0);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray17);
        java.io.PrintStream printStream25 = new java.io.PrintStream("French (France)");
        printStream25.println((float) (short) -1);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Locale[] localeArray39 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList40);
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 1, mathException34, (byte) 0, localeList42, 1225.0d };
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("de", objArray44);
        java.io.PrintStream printStream47 = printStream25.printf(locale28, "hi!", objArray44);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49, (double) '#');
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        printStream47.print((java.lang.Object) doubleArray49);
        double[] doubleArray57 = new double[] { '#' };
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray49, doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = tTestImpl7.t(doubleArray9, doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1225.0d + "'", double58 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { 0L, 3.5553480614894135d };
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.max(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = tTestImpl14.tTest(doubleArray17, doubleArray19, (double) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 120.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 3.5553480614894135]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(statisticalSummary2, statisticalSummary3, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.List<java.util.Locale> localeList14 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 1, mathException6, (byte) 0, localeList14, 1225.0d };
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("de", objArray16);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", objArray16, (java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("und", objArray16, (java.lang.Throwable) mathException23);
        java.lang.Class<?> wildcardClass25 = objArray16.getClass();
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localeList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33, (int) (byte) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setScript("French (France)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: French (France) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) '#', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.sum(doubleArray12);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double[] doubleArray21 = new double[] { '#' };
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray21);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double26 = org.apache.commons.math.stat.StatUtils.sum(doubleArray21);
        double double27 = org.apache.commons.math.stat.StatUtils.max(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = tTestImpl1.homoscedasticTTest(doubleArray12, doubleArray21, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 3.5553480614894135d + "'", double25 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution9 = distributionFactory0.createFDistribution((double) (byte) 100, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, (double) '#');
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray13);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = tTestImpl1.t((double) 1, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24, 1, 0);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray16, doubleArray24);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double32 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl14.t(doubleArray16, doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 34.99999999999999d + "'", double32 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.5553480614894135d + "'", double38 == 3.5553480614894135d);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setNumeratorDegreesOfFreedom(10.0d);
        double double10 = fDistribution6.inverseCumulativeProbability((double) 0);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        java.util.Locale locale1 = new java.util.Locale("German");
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "german");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.t((double) (short) 100, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, 1, 0);
        double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray12);
        double[] doubleArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double19 = tTestImpl1.pairedTTest(doubleArray12, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray3);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11, 1, 0);
        double double16 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray11);
        double double17 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray3, doubleArray11);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19, (double) '#');
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = tTestImpl1.t(doubleArray11, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = tTestImpl14.homoscedasticTTest(statisticalSummary15, statisticalSummary16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintStream printStream38 = printStream16.printf(locale19, "hi!", objArray35);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40, (double) '#');
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        printStream38.print((java.lang.Object) doubleArray40);
        double[] doubleArray48 = new double[] { '#' };
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = tTestImpl14.homoscedasticTTest(doubleArray40, doubleArray48, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 34.99999999999999d + "'", double51 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.5553480614894135d + "'", double52 == 3.5553480614894135d);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double8 = org.apache.commons.math.stat.StatUtils.sum(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, 1225.0d);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double double18 = org.apache.commons.math.stat.StatUtils.product(doubleArray13);
        double double19 = org.apache.commons.math.stat.StatUtils.sum(doubleArray13);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray13);
        double double21 = org.apache.commons.math.stat.StatUtils.min(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = tTestImpl1.pairedTTest(doubleArray3, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 3.5553480614894135d + "'", double9 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.5553480614894135d + "'", double17 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        weibullDistribution3.setScale((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution3.setScale((double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayName();
        java.lang.String str3 = locale0.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale0.getUnicodeLocaleType("org.apache.commons.math.mathexception: de");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.mathexception: de");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fra" + "'", str1, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais (France)" + "'", str2, "fran\347ais (France)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FR" + "'", str3, "FR");
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray16, 0, 1);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, (double) '#');
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = tTestImpl14.tTest(doubleArray16, doubleArray28, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("France", "zh");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zh");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        java.io.PrintStream printStream25 = new java.io.PrintStream("French (France)");
        byte[] byteArray26 = new byte[] {};
        printStream25.write(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray26, (int) (short) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution5 = distributionFactory0.createExponentialDistribution((double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution(0.24999999999999964d, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Standard deviation must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.println((int) (short) 100);
        printWriter8.print((-1));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = tTestImpl0.tTest((double) (short) 1, statisticalSummary2, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        printWriter18.println((int) (short) 1);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24, 1, 0);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray16, doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = tTestImpl13.tTest((double) (short) -1, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) 10.0f, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale0.getUnicodeLocaleType("\uc774\ud0c8\ub9ac\uc544");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ?????????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution9 = distributionFactory0.createBinomialDistribution(1, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        // The following exception was thrown during execution in test generation
        try {
            tDistribution8.setDegreesOfFreedom(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution12 = distributionFactory0.createFDistribution((-1.0d), (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setLanguage("org.apache.commons.math.MathException: allemand");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: org.apache.commons.math.MathException: allemand [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("de");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: de [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray18 = new double[] { (byte) 1, ' ', 10 };
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double25 = org.apache.commons.math.stat.StatUtils.sum(doubleArray20);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = tTestImpl14.t(doubleArray18, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl7.tTest((double) (-1L), statisticalSummary9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double5 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2);
        double[] doubleArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = tTestImpl0.tTest(doubleArray2, doubleArray9, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 34.99999999999999d + "'", double5 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.5553480614894135d + "'", double6 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution3 = distributionFactory0.createBinomialDistribution(1, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (int) 'x', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = tTestImpl1.homoscedasticT(statisticalSummary11, statisticalSummary12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, 1225.0d);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double32 = org.apache.commons.math.stat.StatUtils.mean(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = tTestImpl13.homoscedasticTTest(doubleArray15, doubleArray25, Double.POSITIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: Infinity");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(0.0d, statisticalSummary3, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl7.t(statisticalSummary8, statisticalSummary9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution12 = distributionFactory0.createGammaDistribution((double) (-1.0f), (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        java.io.PrintStream printStream23 = new java.io.PrintStream("French (France)");
        printStream23.println((float) (short) -1);
        printStream23.println(' ');
        printStream23.print(false);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream23);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale31.getDisplayVariant();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        boolean boolean35 = locale34.hasExtensions();
        java.lang.String str36 = locale31.getDisplayLanguage(locale34);
        boolean boolean37 = locale31.hasExtensions();
        java.lang.Object[] objArray39 = null;
        java.io.PrintWriter printWriter40 = printWriter30.printf(locale31, "German", objArray39);
        java.io.PrintStream printStream42 = new java.io.PrintStream("French (France)");
        printStream42.println((float) (short) -1);
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream42);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.OutputStream) printStream42);
        char[] charArray48 = new char[] { ' ' };
        printWriter46.write(charArray48);
        java.io.PrintStream printStream51 = new java.io.PrintStream("French (France)");
        printStream51.println((float) (short) -1);
        java.io.PrintStream printStream54 = new java.io.PrintStream((java.io.OutputStream) printStream51);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.OutputStream) printStream51);
        char[] charArray57 = new char[] { ' ' };
        printWriter55.write(charArray57);
        printWriter46.println(charArray57);
        printWriter46.println((int) (short) 0);
        char[] charArray63 = new char[] { '4' };
        printWriter46.println(charArray63);
        printWriter40.print(charArray63);
        // The following exception was thrown during execution in test generation
        try {
            printWriter8.write(charArray63, 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Deutsch" + "'", str36, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ ]");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ ]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[4]");
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl1.tTest(statisticalSummary23, statisticalSummary24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray3);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11, 1, 0);
        double double16 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray11);
        double double17 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray3, doubleArray11);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double27 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray22);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30, 1, 0);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        double double36 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray22, doubleArray30);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double38 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl1.t(doubleArray3, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.5553480614894135d + "'", double37 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 34.99999999999999d + "'", double38 == 34.99999999999999d);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, (double) '#');
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double27 = org.apache.commons.math.stat.StatUtils.sum(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.max(doubleArray22);
        double double29 = org.apache.commons.math.stat.StatUtils.max(doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = tTestImpl1.tTest(doubleArray12, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.print((long) 1);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream28 = new java.io.PrintStream("French (France)");
        printStream28.println((float) (short) -1);
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream28);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream28);
        java.lang.Object obj33 = null;
        printWriter32.println(obj33);
        printWriter32.write((int) (short) 1);
        java.io.PrintStream printStream38 = new java.io.PrintStream("French (France)");
        printStream38.println((float) (short) -1);
        java.io.PrintStream printStream41 = new java.io.PrintStream((java.io.OutputStream) printStream38);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream38);
        char[] charArray44 = new char[] { ' ' };
        printWriter42.write(charArray44);
        java.io.PrintStream printStream47 = new java.io.PrintStream("French (France)");
        printStream47.println((float) (short) -1);
        java.io.PrintStream printStream50 = new java.io.PrintStream((java.io.OutputStream) printStream47);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream47);
        char[] charArray53 = new char[] { ' ' };
        printWriter51.write(charArray53);
        printWriter42.println(charArray53);
        printWriter32.write(charArray53, (int) (byte) 0, 1);
        printStream24.print(charArray53);
        printWriter8.write(charArray53);
        // The following exception was thrown during execution in test generation
        try {
            printWriter8.write("Chinesisch (China)", (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 110");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ ]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[ ]");
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) '#');
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintStream printStream46 = printStream24.printf(locale27, "hi!", objArray43);
        double[] doubleArray48 = new double[] { '#' };
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48, (double) '#');
        double double53 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        printStream46.print((java.lang.Object) doubleArray48);
        double[] doubleArray56 = new double[] { '#' };
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray56);
        double double58 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray48, doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = tTestImpl14.homoscedasticT(doubleArray16, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1225.0d + "'", double53 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1225.0d + "'", double57 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) (byte) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = tTestImpl0.homoscedasticT(statisticalSummary1, statisticalSummary2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = tTestImpl0.t(statisticalSummary1, statisticalSummary2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale[] localeArray69 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 1, mathException64, (byte) 0, localeList72, 1225.0d };
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("de", objArray74);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", objArray74, (java.lang.Throwable) mathException78);
        java.io.PrintStream printStream80 = printStream57.format("", objArray74);
        boolean boolean81 = printStream57.checkError();
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str31, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("de", objArray23);
        java.io.PrintStream printStream26 = printStream4.printf(locale7, "hi!", objArray23);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, (double) '#');
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        printStream26.print((java.lang.Object) doubleArray28);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray28, doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl1.tTest((double) 10, doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("France");
        double double2 = languageRange1.getWeight();
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.lang.String str4 = locale3.getVariant();
        boolean boolean5 = languageRange1.equals((java.lang.Object) locale3);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.print('x');
        printWriter8.print(0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray20 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray20);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.max(doubleArray23);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = tTestImpl14.homoscedasticTTest(doubleArray20, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        printStream10.println(' ');
        printStream10.flush();
        java.util.Locale locale16 = null;
        java.io.PrintStream printStream19 = new java.io.PrintStream("French (France)");
        printStream19.println((float) (short) -1);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream19);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        java.io.PrintStream printStream26 = new java.io.PrintStream("French (France)");
        printStream26.println((float) (short) -1);
        printStream26.println(' ');
        printStream26.print(false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream26);
        java.io.PrintWriter printWriter35 = printWriter33.append(' ');
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        boolean boolean37 = locale36.hasExtensions();
        java.lang.String str38 = locale36.getDisplayVariant();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = locale41.getISO3Country();
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.lang.String str44 = locale39.getDisplayCountry(locale41);
        java.lang.String str45 = locale36.getDisplayName(locale41);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Locale[] localeArray56 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList57);
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 1, mathException51, (byte) 0, localeList59, 1225.0d };
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", objArray61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("de", objArray61);
        java.io.PrintWriter printWriter64 = printWriter35.printf(locale36, "zho", objArray61);
        java.io.PrintWriter printWriter65 = printWriter23.printf("", objArray61);
        java.io.PrintStream printStream66 = printStream10.printf(locale16, "und", objArray61);
        java.io.PrintWriter printWriter67 = printWriter5.format("und", objArray61);
        // The following exception was thrown during execution in test generation
        try {
            printWriter67.write("allemand", 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 152");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str40, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "FRA" + "'", str42, "FRA");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "allemand" + "'", str45, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(printWriter67);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale4.getISO3Country();
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale4.getDisplayCountry(locale7);
        java.util.Locale.Builder builder9 = builder0.setLocale(locale4);
        java.lang.Object obj10 = locale4.clone();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FRA" + "'", str5, "FRA");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str6, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud504\ub791\uc2a4" + "'", str8, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "fr_FR");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "fr_FR");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "fr_FR");
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.t(3.5553480614894135d, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, (double) '#');
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray24);
        double double31 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, (double) '#');
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray24, doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = tTestImpl13.pairedT(doubleArray15, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.5553480614894135d + "'", double28 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, 1, 0);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray1, doubleArray10, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("France");
        double double2 = languageRange1.getWeight();
        boolean boolean4 = languageRange1.equals((java.lang.Object) "zh");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution5 = distributionFactory0.createPascalDistribution((int) '4', (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray3);
        double double10 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3);
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray3, 0, 1);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl1.t(doubleArray3, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 34.99999999999999d + "'", double10 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2, (double) '#');
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray2);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, 1, 0);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray10, doubleArray18);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl0.t(doubleArray2, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1225.0d + "'", double7 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.5553480614894135d + "'", double14 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 3.5553480614894135d + "'", double25 == 3.5553480614894135d);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = tTestImpl0.tTest(statisticalSummary1, statisticalSummary2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setNumeratorDegreesOfFreedom((double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            fDistribution6.setDenominatorDegreesOfFreedom((double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        java.io.PrintStream printStream3 = new java.io.PrintStream("French (France)");
        printStream3.println((float) (short) -1);
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale[] localeArray17 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList18);
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 1, mathException12, (byte) 0, localeList20, 1225.0d };
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("de", objArray22);
        java.io.PrintStream printStream25 = printStream3.printf(locale6, "hi!", objArray22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, (double) '#');
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        printStream25.print((java.lang.Object) doubleArray27);
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale[] localeArray49 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList50);
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 1, mathException44, (byte) 0, localeList52, 1225.0d };
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("de", objArray54);
        java.io.PrintStream printStream57 = printStream35.printf(locale38, "hi!", objArray54);
        double[] doubleArray59 = new double[] { '#' };
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray59);
        double double61 = org.apache.commons.math.stat.StatUtils.variance(doubleArray59);
        double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray59, (double) '#');
        double double64 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray59);
        printStream57.print((java.lang.Object) doubleArray59);
        double[] doubleArray67 = new double[] { '#' };
        double double68 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double69 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray59, doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = tTestImpl1.homoscedasticT(doubleArray27, doubleArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1225.0d + "'", double60 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1225.0d + "'", double64 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1225.0d + "'", double68 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.t(1225.0d, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale3.getDisplayCountry(locale5);
        java.lang.String str9 = locale0.getDisplayName(locale5);
        java.lang.String str10 = locale0.getDisplayScript();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getDisplayVariant();
        java.lang.String str14 = locale0.getDisplayLanguage(locale11);
        java.lang.String str15 = locale11.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str4, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "allemand" + "'", str9, "allemand");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "de" + "'", str15, "de");
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl1.homoscedasticT(statisticalSummary23, statisticalSummary24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double double10 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, 1, 0);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = tTestImpl1.t((double) (short) 0, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl7.t((double) (byte) 10, statisticalSummary9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.sum(doubleArray12);
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray12);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double27 = org.apache.commons.math.stat.StatUtils.sum(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.max(doubleArray22);
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = tTestImpl1.t(doubleArray12, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 34.99999999999999d + "'", double25 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.5553480614894135d + "'", double26 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "KOR" + "'", str1, "KOR");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ko_KR" + "'", str2, "ko_KR");
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl1.tTest(statisticalSummary23, statisticalSummary24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setRegion("de");
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale9.getDisplayCountry(locale11);
        java.lang.String str15 = locale6.getDisplayName(locale11);
        java.util.Locale.Builder builder16 = builder5.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.setRegion("FRA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: FRA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str10, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FRA" + "'", str12, "FRA");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "allemand" + "'", str15, "allemand");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, 10, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.min(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl7.t((double) 'a', doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\uc601\uc5b4", (int) 'x', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, (double) '#');
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) '#');
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = tTestImpl7.pairedT(doubleArray9, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) '#');
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double28 = org.apache.commons.math.stat.StatUtils.sum(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.max(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = tTestImpl14.homoscedasticT(doubleArray16, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 34.99999999999999d + "'", double26 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        normalDistribution4.setMean(0.0d);
        double double7 = normalDistribution4.getStandardDeviation();
        double double8 = normalDistribution4.getStandardDeviation();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = normalDistribution4.inverseCumulativeProbability(100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream8 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: ", (int) (short) 100, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 2147483647");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setScript("org.apache.commons.math.MathException: ");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: org.apache.commons.math.MathException:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) (short) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = tTestImpl14.homoscedasticT(statisticalSummary15, statisticalSummary16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "org.apache.commons.math.MathException: ");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) '#');
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double23 = org.apache.commons.math.stat.StatUtils.mean(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = tTestImpl13.tTest((double) 100, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = tTestImpl14.homoscedasticT(statisticalSummary15, statisticalSummary16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution14 = distributionFactory0.createPascalDistribution(1, (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        printWriter5.println((-1.0d));
        java.io.PrintStream printStream13 = new java.io.PrintStream("French (France)");
        printStream13.println((float) (short) -1);
        printStream13.println(' ');
        printStream13.print(false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream13);
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale21.getDisplayVariant();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale21.getDisplayLanguage(locale24);
        boolean boolean27 = locale21.hasExtensions();
        java.lang.Object[] objArray29 = null;
        java.io.PrintWriter printWriter30 = printWriter20.printf(locale21, "German", objArray29);
        printWriter20.print((long) (byte) 10);
        printWriter20.print("");
        java.io.PrintStream printStream36 = new java.io.PrintStream("French (France)");
        printStream36.println((float) (short) -1);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream36);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream36);
        char[] charArray42 = new char[] { ' ' };
        printWriter40.write(charArray42);
        java.io.PrintStream printStream45 = new java.io.PrintStream("French (France)");
        printStream45.println((float) (short) -1);
        java.io.PrintStream printStream48 = new java.io.PrintStream((java.io.OutputStream) printStream45);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.OutputStream) printStream45);
        char[] charArray51 = new char[] { ' ' };
        printWriter49.write(charArray51);
        printWriter40.println(charArray51);
        printWriter20.print(charArray51);
        // The following exception was thrown during execution in test generation
        try {
            printWriter5.write(charArray51, (int) 'a', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Deutsch" + "'", str26, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ ]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[ ]");
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("ITA", "org.apache.commons.math.MathException: fra");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: fra");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\ub3c5\uc77c\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setExtension(' ', "French (France)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.util.Locale locale2 = new java.util.Locale("\u7fa9\u5927\u5229\u6587", "France");
        java.lang.Object obj3 = locale2.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "\u7fa9\u5927\u5229\u6587_FRANCE");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "\u7fa9\u5927\u5229\u6587_FRANCE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "\u7fa9\u5927\u5229\u6587_FRANCE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "\u7fa9\u5927\u5229\u6587_FRANCE");
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, 1225.0d);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = tTestImpl13.tTest(doubleArray15, doubleArray25, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = tTestImpl14.t(statisticalSummary15, statisticalSummary16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        java.util.Locale locale3 = new java.util.Locale("allemand", "allemand", "");
        boolean boolean4 = locale3.hasExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getLanguage();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getVariant();
        java.lang.String str5 = locale3.getScript();
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale3.getDisplayLanguage(locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "German" + "'", str1, "German");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, (double) '#');
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3);
        double double10 = org.apache.commons.math.stat.StatUtils.mean(doubleArray3);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, (double) '#');
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = tTestImpl1.homoscedasticTTest(doubleArray3, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        printStream1.print((int) ' ');
        printStream1.print((float) (-1L));
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.product(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, 1, 0);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray17);
        double[] doubleArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = tTestImpl7.homoscedasticTTest(doubleArray9, doubleArray24, (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.setLanguage("Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Chinese (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 515.7000000000007d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: 515.7000000000007");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = tTestImpl13.t(statisticalSummary14, statisticalSummary15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution((double) (byte) 100, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: beta must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale0.getUnicodeLocaleType("France");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: France");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream57.print(Double.NaN);
        printStream57.print(true);
        printStream57.close();
        printStream57.print("French (France)");
        java.io.PrintStream printStream66 = new java.io.PrintStream("de");
        boolean boolean67 = printStream66.checkError();
        java.io.PrintStream printStream69 = new java.io.PrintStream("French (France)");
        printStream69.println((float) (short) -1);
        java.io.PrintStream printStream73 = new java.io.PrintStream((java.io.OutputStream) printStream69, false);
        java.io.PrintStream printStream75 = new java.io.PrintStream("zh-CN");
        printStream75.print('a');
        java.io.PrintStream printStream79 = new java.io.PrintStream("French (France)");
        printStream79.print((long) ' ');
        java.io.PrintStream printStream83 = new java.io.PrintStream("French (France)");
        byte[] byteArray84 = new byte[] {};
        printStream83.write(byteArray84);
        printStream79.write(byteArray84);
        printStream75.write(byteArray84);
        printStream73.write(byteArray84);
        printStream66.write(byteArray84);
        printStream57.write(byteArray84, 2147483647, 0);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (int) 'a', (int) (byte) 10, (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", 117.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=117.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale5.toLanguageTag();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strMap17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList18, strMap19);
        java.lang.String[] strArray28 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags(languageRangeList20, (java.util.Collection<java.lang.String>) strList29);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList36, strMap37);
        java.lang.String[] strArray46 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags(languageRangeList38, (java.util.Collection<java.lang.String>) strList47);
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags(languageRangeList20, (java.util.Collection<java.lang.String>) strList47, filteringMode50);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags(languageRangeList13, (java.util.Collection<java.lang.String>) strList51);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, strMap56);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, strMap61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap63 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList62, strMap63);
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap71 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList72 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, strMap71);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap73 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList74 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList72, strMap73);
        java.lang.String[] strArray82 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags(languageRangeList74, (java.util.Collection<java.lang.String>) strList83);
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.lang.String>) strList85);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags(languageRangeList62, (java.util.Collection<java.lang.String>) strList85);
        java.util.Locale.FilteringMode filteringMode88 = null;
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags(languageRangeList57, (java.util.Collection<java.lang.String>) strList87, filteringMode88);
        java.util.Locale.FilteringMode filteringMode90 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList91 = java.util.Locale.filterTags(languageRangeList13, (java.util.Collection<java.lang.String>) strList87, filteringMode90);
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet8, filteringMode90);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + filteringMode50 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode50.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(languageRangeList57);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(languageRangeList62);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(languageRangeList72);
        org.junit.Assert.assertNotNull(languageRangeList74);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + filteringMode90 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode90.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNotNull(strList92);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) 'a', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        printWriter5.println(charArray16);
        java.io.PrintWriter printWriter20 = printWriter5.append((java.lang.CharSequence) "FRA");
        // The following exception was thrown during execution in test generation
        try {
            printWriter20.write("\uc774\ud0c8\ub9ac\uc544\uc5b4", (int) (short) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 101");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
        double[] doubleArray22 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double23 = org.apache.commons.math.stat.StatUtils.max(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22, (double) (byte) 100);
        double double26 = org.apache.commons.math.stat.StatUtils.sum(doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 515.7000000000007d + "'", double25 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 61.0d + "'", double26 == 61.0d);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20, (double) '#');
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double27 = org.apache.commons.math.stat.StatUtils.min(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray1, doubleArray20, 34.99999999999999d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "FRA" + "'", str1, "FRA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr_FR" + "'", str3, "fr_FR");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        weibullDistribution3.setScale(1.0d);
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution3.setShape(Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray13 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, (double) (byte) 100);
        double[] doubleArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl7.pairedTTest(doubleArray13, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 515.7000000000007d + "'", double16 == 515.7000000000007d);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15, (double) '#');
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double[] doubleArray26 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double27 = org.apache.commons.math.stat.StatUtils.max(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = tTestImpl13.pairedTTest(doubleArray15, doubleArray26, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#', (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("org.apache.commons.math.MathException: de");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception: de");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        normalDistribution4.setStandardDeviation(35.0d);
        normalDistribution4.setMean((double) 10L);
        normalDistribution4.setMean((double) '4');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setRegion("de");
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale9.getDisplayCountry(locale11);
        java.lang.String str15 = locale6.getDisplayName(locale11);
        java.util.Locale.Builder builder16 = builder5.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder5.removeUnicodeLocaleAttribute("zh");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: zh [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "German" + "'", str10, "German");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FRA" + "'", str12, "FRA");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "allemand" + "'", str15, "allemand");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setScript("JPN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: JPN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        java.util.Locale locale2 = new java.util.Locale("zh", "zh-CN");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getUnicodeLocaleType("Italienisch");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Italienisch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "zh_ZH-CN");
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.Object obj1 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "ja_JP");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "ja_JP");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "ja_JP");
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setVariant("ITA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ITA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setScript("\uc774\ud0c8\ub9ac\uc544");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ????????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        printWriter18.print("org.apache.commons.math.MathException: de");
        printWriter18.println((float) 100);
        printWriter18.print("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        // The following exception was thrown during execution in test generation
        try {
            printWriter18.write("FR", (int) (byte) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 135");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14, (double) '#');
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24, (double) '#');
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = tTestImpl12.pairedTTest(doubleArray14, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.mathexception: de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14, (double) '#');
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.sum(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl12.homoscedasticT(doubleArray14, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale[] localeArray9 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 1, mathException4, (byte) 0, localeList12, 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("");
        mathException15.addSuppressed((java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException17);
        java.lang.String str20 = mathException17.toString();
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.MathException: " + "'", str20, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution5 = distributionFactory0.createGammaDistribution(Double.NEGATIVE_INFINITY, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getScale();
        weibullDistribution3.setScale((double) 'x');
        double double7 = weibullDistribution3.getShape();
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution3.setShape((-13.607141222220143d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        double double5 = weibullDistribution3.getShape();
        double double6 = weibullDistribution3.getShape();
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution3.setScale((double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getDisplayVariant();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Country();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale14.getDisplayCountry(locale16);
        java.lang.String str20 = locale11.getDisplayName(locale16);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 1, mathException26, (byte) 0, localeList34, 1225.0d };
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("de", objArray36);
        java.io.PrintWriter printWriter39 = printWriter10.printf(locale11, "zho", objArray36);
        printWriter10.println('#');
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "German" + "'", str15, "German");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FRA" + "'", str17, "FRA");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "allemand" + "'", str20, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setLanguageTag("org.apache.commons.math.MathException: fra");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: org.apache.commons.math.MathException: fra [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        printStream12.println((float) (short) -1);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale[] localeArray26 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList27);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 1, mathException21, (byte) 0, localeList29, 1225.0d };
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("de", objArray31);
        java.io.PrintStream printStream34 = printStream12.printf(locale15, "hi!", objArray31);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36, (double) '#');
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        printStream34.print((java.lang.Object) doubleArray36);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44, (double) '#');
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double51 = org.apache.commons.math.stat.StatUtils.min(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = tTestImpl1.homoscedasticTTest(doubleArray36, doubleArray44, 0.24999999999999964d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double[] doubleArray14 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double15 = org.apache.commons.math.stat.StatUtils.max(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14, (double) (byte) 100);
        double double18 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 515.7000000000007d + "'", double17 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 61.0d + "'", double18 == 61.0d);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            poissonDistribution8.setMean(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Poisson mean must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        double double10 = pascalDistribution6.probability((int) 'x');
        double double12 = pascalDistribution6.probability((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = pascalDistribution6.cumulativeProbability((int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double25 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double double26 = org.apache.commons.math.stat.StatUtils.sum(doubleArray20);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, 1, 0);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray20, doubleArray28);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = tTestImpl13.tTest(doubleArray15, doubleArray20, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.t(statisticalSummary13, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = tTestImpl7.tTest(statisticalSummary8, statisticalSummary9, 97.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 97.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PoissonDistribution poissonDistribution13 = distributionFactory0.createPoissonDistribution((double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Poisson mean must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl12.tTest(Double.NaN, statisticalSummary14, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        printWriter8.println((float) '#');
        printWriter8.print((double) 'a');
        printWriter8.println(1.0d);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl7.t((double) 100.0f, statisticalSummary22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double23 = org.apache.commons.math.stat.StatUtils.sum(doubleArray17);
        double double25 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray17, (double) (short) 100);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double37 = org.apache.commons.math.stat.StatUtils.product(doubleArray27, 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = tTestImpl15.t(doubleArray17, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 34.99999999999999d + "'", double30 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.5553480614894135d + "'", double31 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22, 1, 0);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.sum(doubleArray28);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28);
        double double38 = org.apache.commons.math.stat.StatUtils.min(doubleArray28, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = tTestImpl7.pairedTTest(doubleArray22, doubleArray28, (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 52.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        double double9 = fDistribution6.getNumeratorDegreesOfFreedom();
        // The following exception was thrown during execution in test generation
        try {
            fDistribution6.setNumeratorDegreesOfFreedom(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        double double10 = gammaDistribution9.getAlpha();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl7.tTest(0.0d, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setScript("French (France)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: French (France) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, (int) (byte) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution3 = distributionFactory0.createFDistribution(515.7000000000007d, (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution(3.5553480614894135d, Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Standard deviation must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Franz\366sisch (Frankreich)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=franzo?sisch (frankreich)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl15.homoscedasticT(statisticalSummary16, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray16 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double17 = org.apache.commons.math.stat.StatUtils.max(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (double) (byte) 100);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double27 = org.apache.commons.math.stat.StatUtils.max(doubleArray22, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = tTestImpl1.tTest(doubleArray16, doubleArray22, 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 515.7000000000007d + "'", double19 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 61.0d + "'", double20 == 61.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray15 = new double[] { '#' };
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray15);
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray15);
        double double22 = org.apache.commons.math.stat.StatUtils.max(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl12.t(100.0d, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 34.99999999999999d + "'", double18 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.5553480614894135d + "'", double19 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution((int) (short) 10, (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, 1225.0d);
        double[] doubleArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = tTestImpl14.homoscedasticTTest(doubleArray16, doubleArray25, 3.5553480614894135d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 3.5553480614894135");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str4 = locale1.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale6.getDisplayCountry(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale9);
        java.lang.String str12 = locale1.getDisplayVariant(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = locale5.getUnicodeLocaleType("Italienisch");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Italienisch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FRA" + "'", str7, "FRA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "French (France)" + "'", str8, "French (France)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud504\ub791\uc2a4" + "'", str10, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str11, "\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.println(true);
        java.io.PrintStream printStream44 = new java.io.PrintStream("French (France)");
        printStream44.println((float) (short) -1);
        java.io.PrintStream printStream47 = new java.io.PrintStream((java.io.OutputStream) printStream44);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream44);
        char[] charArray50 = new char[] { ' ' };
        printWriter48.write(charArray50);
        java.io.PrintStream printStream53 = new java.io.PrintStream("French (France)");
        printStream53.println((float) (short) -1);
        java.io.PrintStream printStream56 = new java.io.PrintStream((java.io.OutputStream) printStream53);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.OutputStream) printStream53);
        char[] charArray59 = new char[] { ' ' };
        printWriter57.write(charArray59);
        printWriter48.println(charArray59);
        printWriter48.println((int) (short) 0);
        char[] charArray65 = new char[] { '4' };
        printWriter48.println(charArray65);
        printWriter8.println(charArray65);
        printWriter8.print(100.0f);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ ]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[4]");
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution9 = distributionFactory0.createPascalDistribution((int) ' ', (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getLanguage();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "German" + "'", str1, "German");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "de" + "'", str4, "de");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.addUnicodeLocaleAttribute("org.apache.commons.math.MathException: fra");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.MathException: fra [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        printStream10.println(' ');
        printStream10.flush();
        java.util.Locale locale16 = null;
        java.io.PrintStream printStream19 = new java.io.PrintStream("French (France)");
        printStream19.println((float) (short) -1);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream19);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        java.io.PrintStream printStream26 = new java.io.PrintStream("French (France)");
        printStream26.println((float) (short) -1);
        printStream26.println(' ');
        printStream26.print(false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream26);
        java.io.PrintWriter printWriter35 = printWriter33.append(' ');
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        boolean boolean37 = locale36.hasExtensions();
        java.lang.String str38 = locale36.getDisplayVariant();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = locale41.getISO3Country();
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.lang.String str44 = locale39.getDisplayCountry(locale41);
        java.lang.String str45 = locale36.getDisplayName(locale41);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Locale[] localeArray56 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList57);
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 1, mathException51, (byte) 0, localeList59, 1225.0d };
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", objArray61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("de", objArray61);
        java.io.PrintWriter printWriter64 = printWriter35.printf(locale36, "zho", objArray61);
        java.io.PrintWriter printWriter65 = printWriter23.printf("", objArray61);
        java.io.PrintStream printStream66 = printStream10.printf(locale16, "und", objArray61);
        java.io.PrintWriter printWriter67 = printWriter5.format("und", objArray61);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter71 = printWriter67.append((java.lang.CharSequence) "\u7fa9\u5927\u5229\u6587", (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "German" + "'", str40, "German");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "FRA" + "'", str42, "FRA");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "allemand" + "'", str45, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(printWriter67);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        double[] doubleArray5 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5, (double) (byte) 100);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray5);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5, (double) ' ', 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 515.7000000000007d + "'", double8 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 61.0d + "'", double9 == 61.0d);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl1.tTest(0.24999999999999964d, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        double double5 = weibullDistribution3.getShape();
        double double6 = weibullDistribution3.getScale();
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution3.setScale((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) '#', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = tTestImpl0.homoscedasticTTest(statisticalSummary1, statisticalSummary2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test00001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00001");
        com.google.javascript.rhino.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node((int) (short) 0, node1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00002");
        int int0 = com.google.javascript.rhino.Node.JSDOC_INFO_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 29 + "'", int0 == 29);
    }

    @Test
    public void test00003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00003");
        int int0 = com.google.javascript.rhino.Node.SOURCENAME_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 16 + "'", int0 == 16);
    }

    @Test
    public void test00004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00004");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        // The following exception was thrown during execution in test generation
        try {
            node2.replaceChild(node5, node8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test00005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00005");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node5 = node2.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test00006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00006");
        int int0 = com.google.javascript.rhino.Node.LAST_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 54 + "'", int0 == 54);
    }

    @Test
    public void test00007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00007");
        int int0 = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4095 + "'", int0 == 4095);
    }

    @Test
    public void test00008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00008");
        java.lang.String str0 = com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Not declared as a type name" + "'", str0, "Not declared as a type name");
    }

    @Test
    public void test00009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00009");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = node17.getParent();
        boolean boolean19 = node17.isArrayLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node26.putProp((int) (short) 1, (java.lang.Object) 1);
        node26.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node35 = node22.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean39 = node38.hasChildren();
        com.google.javascript.rhino.Node node40 = node38.getParent();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean44 = node43.hasChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = null;
        int int49 = node47.getIndexOfChild(node48);
        node47.putProp((int) (short) 1, (java.lang.Object) 1);
        node47.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node56 = node43.useSourceInfoIfMissingFromForTree(node47);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node3, node6, node17, node26, node40, node43 };
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) ' ', nodeArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray57);
    }

    @Test
    public void test00010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00010");
        int int0 = com.google.javascript.rhino.Node.IS_DISPATCHER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 47 + "'", int0 == 47);
    }

    @Test
    public void test00011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00011");
        int int0 = com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 42 + "'", int0 == 42);
    }

    @Test
    public void test00012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00012");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
    }

    @Test
    public void test00013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00013");
        int int0 = com.google.javascript.rhino.Node.DECR_FLAG;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test00014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00014");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type93 = typeList91.remove((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
    }

    @Test
    public void test00015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00015");
        int int0 = com.google.javascript.rhino.Node.POST_FLAG;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test00016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00016");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
    }

    @Test
    public void test00017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00017");
        int int0 = com.google.javascript.rhino.Node.FREE_CALL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 50 + "'", int0 == 50);
    }

    @Test
    public void test00018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00018");
        java.lang.String str0 = com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Not declared as a constructor" + "'", str0, "Not declared as a constructor");
    }

    @Test
    public void test00019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00019");
        int int0 = com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 16 + "'", int0 == 16);
    }

    @Test
    public void test00020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00020");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getParent();
        // The following exception was thrown during execution in test generation
        try {
            node4.setSourceEncodedPosition((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test00021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00021");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = node3.getParent();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = null;
        int int12 = node10.getIndexOfChild(node11);
        node7.addChildToBack(node10);
        com.google.javascript.rhino.Node node14 = node7.getNext();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node17.putProp((int) (short) 1, (java.lang.Object) 1);
        node17.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int26 = node17.getSideEffectFlags();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node29.addChildToBack(node32);
        int int36 = node17.getIndexOfChild(node29);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100, node4, node14, node29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test00022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00022");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("hi!");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(hi!)" + "'", str1, "(hi!)");
    }

    @Test
    public void test00023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00023");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = node2.getExistingIntProp((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 10");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test00024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00024");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type> typeList94 = typeList91.subList((int) (short) 1, 42);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (42) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
    }

    @Test
    public void test00025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00025");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.util.Collection<java.lang.reflect.Type> typeCollection93 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = typeList91.removeAll(typeCollection93);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
    }

    @Test
    public void test00026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00026");
        java.lang.Class<?>[] wildcardClassArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Class<?>> wildcardClassList1 = com.google.common.collect.ImmutableList.of(wildcardClassArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00027");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.isSwitch();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags17 = null;
        // The following exception was thrown during execution in test generation
        try {
            node15.setSideEffectFlags(sideEffectFlags17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test00028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00028");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        boolean boolean22 = node14.isString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node24 = node14.getAncestor((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00029");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.util.Collection<java.lang.reflect.Type> typeCollection93 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = typeList91.removeAll(typeCollection93);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
    }

    @Test
    public void test00030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00030");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType1 = com.google.javascript.rhino.jstype.ObjectType.cast(jSType0);
        org.junit.Assert.assertNull(objectType1);
    }

    @Test
    public void test00031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00031");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "(hi!)", "Not declared as a constructor", "(hi!)" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean10 = node9.hasChildren();
        java.lang.Class<?> wildcardClass11 = node9.getClass();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean15 = node14.hasChildren();
        java.lang.Class<?> wildcardClass16 = node14.getClass();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.hasChildren();
        java.lang.Class<?> wildcardClass21 = node19.getClass();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        java.lang.Class<?> wildcardClass26 = node24.getClass();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean30 = node29.hasChildren();
        java.lang.Class<?> wildcardClass31 = node29.getClass();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean35 = node34.hasChildren();
        java.lang.Class<?> wildcardClass36 = node34.getClass();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean40 = node39.hasChildren();
        java.lang.Class<?> wildcardClass41 = node39.getClass();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean45 = node44.hasChildren();
        java.lang.Class<?> wildcardClass46 = node44.getClass();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean50 = node49.hasChildren();
        java.lang.Class<?> wildcardClass51 = node49.getClass();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean55 = node54.hasChildren();
        java.lang.Class<?> wildcardClass56 = node54.getClass();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean60 = node59.hasChildren();
        java.lang.Class<?> wildcardClass61 = node59.getClass();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean65 = node64.hasChildren();
        java.lang.Class<?> wildcardClass66 = node64.getClass();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean70 = node69.hasChildren();
        java.lang.Class<?> wildcardClass71 = node69.getClass();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean75 = node74.hasChildren();
        java.lang.Class<?> wildcardClass76 = node74.getClass();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean80 = node79.hasChildren();
        java.lang.Class<?> wildcardClass81 = node79.getClass();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean85 = node84.hasChildren();
        java.lang.Class<?> wildcardClass86 = node84.getClass();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean90 = node89.hasChildren();
        java.lang.Class<?> wildcardClass91 = node89.getClass();
        com.google.javascript.rhino.Node node94 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean95 = node94.hasChildren();
        java.lang.Class<?> wildcardClass96 = node94.getClass();
        java.lang.reflect.Type[] typeArray97 = new java.lang.reflect.Type[] { wildcardClass71, wildcardClass76, wildcardClass81, wildcardClass86, wildcardClass91, wildcardClass96 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList98 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass11, (java.lang.reflect.Type) wildcardClass16, (java.lang.reflect.Type) wildcardClass21, (java.lang.reflect.Type) wildcardClass26, (java.lang.reflect.Type) wildcardClass31, (java.lang.reflect.Type) wildcardClass36, (java.lang.reflect.Type) wildcardClass41, (java.lang.reflect.Type) wildcardClass46, (java.lang.reflect.Type) wildcardClass51, (java.lang.reflect.Type) wildcardClass56, (java.lang.reflect.Type) wildcardClass61, (java.lang.reflect.Type) wildcardClass66, typeArray97);
        boolean boolean99 = strSet5.contains((java.lang.Object) wildcardClass61);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertNotNull(typeArray97);
        org.junit.Assert.assertNotNull(typeList98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00032");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        node2.setOptionalArg(true);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = node2.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR  [opt_arg: 1] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00033");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.util.function.UnaryOperator<java.lang.reflect.Type> typeUnaryOperator93 = null;
        // The following exception was thrown during execution in test generation
        try {
            typeList91.replaceAll(typeUnaryOperator93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
    }

    @Test
    public void test00034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00034");
        int int0 = com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 31 + "'", int0 == 31);
    }

    @Test
    public void test00035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00035");
        int int0 = com.google.javascript.rhino.Node.VAR_ARGS_NAME;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 30 + "'", int0 == 30);
    }

    @Test
    public void test00036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00036");
        com.google.common.collect.ImmutableList<java.lang.Cloneable> cloneableList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(cloneableList0);
    }

    @Test
    public void test00037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00037");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("(hi!)");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "((hi!))" + "'", str1, "((hi!))");
    }

    @Test
    public void test00038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00038");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        boolean boolean2 = com.google.javascript.rhino.jstype.JSType.isEquivalent(jSType0, jSType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test00039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00039");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getParent();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node5 = node4.getNext();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test00040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00040");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        boolean boolean5 = node4.isString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node6 = node4.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00041");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.Node node4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node5 = node3.useSourceInfoFromForTree(node4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00042");
        com.google.javascript.rhino.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(10, node1, (int) (byte) 0, 54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00043");
        int int0 = com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 44 + "'", int0 == 44);
    }

    @Test
    public void test00044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00044");
        int int0 = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 15 + "'", int0 == 15);
    }

    @Test
    public void test00045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00045");
        java.lang.String str0 = com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Named type with empty name component" + "'", str0, "Named type with empty name component");
    }

    @Test
    public void test00046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00046");
        int int0 = com.google.javascript.rhino.Node.EMPTY_BLOCK;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 39 + "'", int0 == 39);
    }

    @Test
    public void test00047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00047");
        java.lang.String str0 = com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Unknown class name" + "'", str0, "Unknown class name");
    }

    @Test
    public void test00048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00048");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node14.isNot();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node26.putProp((int) (short) 1, (java.lang.Object) 1);
        node26.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int35 = node26.getSideEffectFlags();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = null;
        int int43 = node41.getIndexOfChild(node42);
        node38.addChildToBack(node41);
        int int45 = node26.getIndexOfChild(node38);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean49 = node48.hasChildren();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = null;
        int int54 = node52.getIndexOfChild(node53);
        node52.putProp((int) (short) 1, (java.lang.Object) 1);
        node52.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node61 = node48.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean62 = node61.wasEmptyNode();
        com.google.javascript.rhino.Node node63 = node26.useSourceInfoFrom(node61);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean67 = node66.hasChildren();
        com.google.javascript.rhino.Node node68 = node66.getLastSibling();
        node68.setSourceFileForTesting("Not declared as a type name");
        // The following exception was thrown during execution in test generation
        try {
            node14.addChildAfter(node26, node68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test00049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00049");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getParent();
        // The following exception was thrown during execution in test generation
        try {
            node4.setWasEmptyNode(true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test00050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00050");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            typeItor92.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
    }

    @Test
    public void test00051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00051");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        node19.setOptionalArg(false);
        com.google.javascript.rhino.Node node28 = null;
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean32 = node31.hasChildren();
        com.google.javascript.rhino.Node node33 = node31.getLastSibling();
        boolean boolean34 = node33.isString();
        // The following exception was thrown during execution in test generation
        try {
            node19.replaceChildAfter(node28, node33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00052");
        int int0 = com.google.javascript.rhino.Node.IS_CONSTANT_NAME;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 43 + "'", int0 == 43);
    }

    @Test
    public void test00053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00053");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList9 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "(hi!)", (java.lang.Comparable<java.lang.String>) "Unknown class name", (java.lang.Comparable<java.lang.String>) "(hi!)", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "Not declared as a constructor", (java.lang.Comparable<java.lang.String>) "Named type with empty name component", (java.lang.Comparable<java.lang.String>) "Named type with empty name component", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "(hi!)");
        org.junit.Assert.assertNotNull(strComparableList9);
    }

    @Test
    public void test00054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00054");
        int int0 = com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 45 + "'", int0 == 45);
    }

    @Test
    public void test00055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00055");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        int int4 = node2.getSourcePosition();
        com.google.javascript.rhino.Node node5 = node2.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = node5.isLabel();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test00056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00056");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder2 = nodeSourcePositionBuilder0.add(nodeSourcePosition1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00057");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type93 = typeItor92.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
    }

    @Test
    public void test00058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00058");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList91.subList((int) (short) 1, 50);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (50) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00059");
        int int0 = com.google.javascript.rhino.Node.DIRECTIVES;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 48 + "'", int0 == 48);
    }

    @Test
    public void test00060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00060");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = null;
        int int27 = node25.getIndexOfChild(node26);
        node25.putProp((int) (short) 1, (java.lang.Object) 1);
        node25.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int34 = node25.getSideEffectFlags();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = null;
        int int42 = node40.getIndexOfChild(node41);
        node37.addChildToBack(node40);
        int int44 = node25.getIndexOfChild(node37);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = null;
        int int53 = node51.getIndexOfChild(node52);
        node51.putProp((int) (short) 1, (java.lang.Object) 1);
        node51.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node60 = node47.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean61 = node60.wasEmptyNode();
        com.google.javascript.rhino.Node node62 = node25.useSourceInfoFrom(node60);
        boolean boolean63 = node62.isWhile();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = null;
        int int68 = node66.getIndexOfChild(node67);
        node66.putProp((int) (short) 1, (java.lang.Object) 1);
        node66.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int75 = node66.getSideEffectFlags();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = null;
        int int83 = node81.getIndexOfChild(node82);
        node78.addChildToBack(node81);
        com.google.javascript.rhino.Node node85 = node78.getNext();
        com.google.javascript.rhino.Node node86 = node66.useSourceInfoFromForTree(node78);
        boolean boolean87 = node78.isNot();
        boolean boolean88 = node78.isSyntheticBlock();
        // The following exception was thrown during execution in test generation
        try {
            node22.replaceChildAfter(node62, node78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test00061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00061");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type93 = typeList91.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
    }

    @Test
    public void test00062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00062");
        int int0 = com.google.javascript.rhino.Node.COLUMN_MASK;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4095 + "'", int0 == 4095);
    }

    @Test
    public void test00063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00063");
        int int0 = com.google.javascript.rhino.Node.OPT_ARG_NAME;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 37 + "'", int0 == 37);
    }

    @Test
    public void test00064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00064");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type95 = typeList91.get(45);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (45) must be less than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
    }

    @Test
    public void test00065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00065");
        long long0 = com.google.javascript.rhino.InputId.serialVersionUID;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 1L + "'", long0 == 1L);
    }

    @Test
    public void test00066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00066");
        int int0 = com.google.javascript.rhino.Node.BRACELESS_TYPE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 41 + "'", int0 == 41);
    }

    @Test
    public void test00067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00067");
        int int0 = com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test00068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00068");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.Node node9 = node2.getNext();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = null;
        int int14 = node12.getIndexOfChild(node13);
        node12.putProp((int) (short) 1, (java.lang.Object) 1);
        node12.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int21 = node12.getSideEffectFlags();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = null;
        int int29 = node27.getIndexOfChild(node28);
        node24.addChildToBack(node27);
        int int31 = node12.getIndexOfChild(node24);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean35 = node34.hasChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = null;
        int int40 = node38.getIndexOfChild(node39);
        node38.putProp((int) (short) 1, (java.lang.Object) 1);
        node38.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node47 = node34.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean48 = node47.wasEmptyNode();
        com.google.javascript.rhino.Node node49 = node12.useSourceInfoFrom(node47);
        boolean boolean50 = node49.isWhile();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = node9.checkTreeEquals(node49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test00069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00069");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean6 = node5.hasChildren();
        java.lang.Class<?> wildcardClass7 = node5.getClass();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean11 = node10.hasChildren();
        java.lang.Class<?> wildcardClass12 = node10.getClass();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean16 = node15.hasChildren();
        java.lang.Class<?> wildcardClass17 = node15.getClass();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean21 = node20.hasChildren();
        java.lang.Class<?> wildcardClass22 = node20.getClass();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean26 = node25.hasChildren();
        java.lang.Class<?> wildcardClass27 = node25.getClass();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean31 = node30.hasChildren();
        java.lang.Class<?> wildcardClass32 = node30.getClass();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean36 = node35.hasChildren();
        java.lang.Class<?> wildcardClass37 = node35.getClass();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean41 = node40.hasChildren();
        java.lang.Class<?> wildcardClass42 = node40.getClass();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean46 = node45.hasChildren();
        java.lang.Class<?> wildcardClass47 = node45.getClass();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean51 = node50.hasChildren();
        java.lang.Class<?> wildcardClass52 = node50.getClass();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean56 = node55.hasChildren();
        java.lang.Class<?> wildcardClass57 = node55.getClass();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean61 = node60.hasChildren();
        java.lang.Class<?> wildcardClass62 = node60.getClass();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean66 = node65.hasChildren();
        java.lang.Class<?> wildcardClass67 = node65.getClass();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean71 = node70.hasChildren();
        java.lang.Class<?> wildcardClass72 = node70.getClass();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean76 = node75.hasChildren();
        java.lang.Class<?> wildcardClass77 = node75.getClass();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean81 = node80.hasChildren();
        java.lang.Class<?> wildcardClass82 = node80.getClass();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean86 = node85.hasChildren();
        java.lang.Class<?> wildcardClass87 = node85.getClass();
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean91 = node90.hasChildren();
        java.lang.Class<?> wildcardClass92 = node90.getClass();
        java.lang.reflect.Type[] typeArray93 = new java.lang.reflect.Type[] { wildcardClass67, wildcardClass72, wildcardClass77, wildcardClass82, wildcardClass87, wildcardClass92 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass12, (java.lang.reflect.Type) wildcardClass17, (java.lang.reflect.Type) wildcardClass22, (java.lang.reflect.Type) wildcardClass27, (java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass42, (java.lang.reflect.Type) wildcardClass47, (java.lang.reflect.Type) wildcardClass52, (java.lang.reflect.Type) wildcardClass57, (java.lang.reflect.Type) wildcardClass62, typeArray93);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList95 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList94);
        boolean boolean97 = typeList94.contains((java.lang.Object) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = strSet2.retainAll((java.util.Collection<java.lang.reflect.Type>) typeList94);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(typeArray93);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertNotNull(typeCollectionList95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test00070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00070");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = null;
        int int12 = node10.getIndexOfChild(node11);
        node7.addChildToBack(node10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isNoShadow();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo14.getParameterNames();
        node7.setJSDocInfo(jSDocInfo14);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean21 = node20.hasChildren();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        node22.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = null;
        int int29 = node27.getIndexOfChild(node28);
        node27.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean33 = node27.isDec();
        com.google.javascript.rhino.Node node34 = node22.useSourceInfoIfMissingFromForTree(node27);
        // The following exception was thrown during execution in test generation
        try {
            node2.replaceChildAfter(node7, node22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test00071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00071");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        node2.setOptionalArg(true);
        int int7 = node2.getType();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean11 = node10.hasChildren();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        node14.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node23 = node10.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node14.setStaticSourceFile(staticSourceFile24);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int37 = node28.getSideEffectFlags();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = null;
        int int45 = node43.getIndexOfChild(node44);
        node40.addChildToBack(node43);
        int int47 = node28.getIndexOfChild(node40);
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildBefore(node14, node40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test00072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00072");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor93 = typeList91.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo94 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean95 = jSDocInfo94.isNoShadow();
        int int96 = jSDocInfo94.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList97 = jSDocInfo94.getExtendedInterfaces();
        int int98 = typeList91.lastIndexOf((java.lang.Object) jSTypeExpressionList97);
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList99 = typeList91.reverse();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertNotNull(typeList99);
    }

    @Test
    public void test00073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00073");
        int int0 = com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test00074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00074");
        int int0 = com.google.javascript.rhino.Node.PARENTHESIZED_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 35 + "'", int0 == 35);
    }

    @Test
    public void test00075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00075");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.Node node9 = node2.getNext();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        boolean boolean14 = node12.isAssignAdd();
        boolean boolean15 = node12.isDebugger();
        java.lang.String str16 = node12.getQualifiedName();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        int int22 = node19.getLength();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildBefore(node12, node19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test00076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00076");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        node2.setSourceEncodedPositionForTree(1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = null;
        int int23 = node21.getIndexOfChild(node22);
        node21.putProp((int) (short) 1, (java.lang.Object) 1);
        node21.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node30 = node17.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean34 = node33.isContinue();
        boolean boolean36 = node33.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(42, node30, node33, 42, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            node2.removeChild(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00077");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        com.google.javascript.rhino.Node node5 = node4.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node5.setSourceFileForTesting("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test00078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00078");
        int int0 = com.google.javascript.rhino.Node.QUOTED_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 36 + "'", int0 == 36);
    }

    @Test
    public void test00079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00079");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test00080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00080");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor93 = typeList91.iterator();
        com.google.javascript.rhino.Node node96 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean97 = node96.hasChildren();
        boolean boolean98 = typeList91.contains((java.lang.Object) node96);
        int int99 = typeList91.size();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 18 + "'", int99 == 18);
    }

    @Test
    public void test00081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00081");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = null;
        int int48 = node46.getIndexOfChild(node47);
        node43.addChildToBack(node46);
        java.util.Set<java.lang.String> strSet50 = node46.getDirectives();
        node46.setSourceEncodedPosition((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            node37.putProp(16, (java.lang.Object) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Short cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(strSet50);
    }

    @Test
    public void test00082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00082");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags96 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags96.clearSideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = typeList95.remove((java.lang.Object) sideEffectFlags96);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
    }

    @Test
    public void test00083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00083");
        int int0 = com.google.javascript.rhino.jstype.JSType.ENUMDECL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test00084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00084");
        int int0 = com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 38 + "'", int0 == 38);
    }

    @Test
    public void test00085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00085");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        com.google.javascript.rhino.Node node5 = node4.getLastChild();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags6.clearSideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            node5.setSideEffectFlags(sideEffectFlags6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test00086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00086");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor93 = typeList91.iterator();
        com.google.javascript.rhino.Node node96 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean97 = node96.hasChildren();
        boolean boolean98 = typeList91.contains((java.lang.Object) node96);
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test00087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00087");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(ternaryValueList0);
    }

    @Test
    public void test00088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00088");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.lang.Object[] objArray93 = typeList91.toArray();
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray95 = typeList91.toArray(stringPositionArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00089");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        com.google.javascript.rhino.Node node5 = node2.getAncestor((int) (short) 0);
        node5.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node5.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean12 = node11.hasChildren();
        boolean boolean13 = node11.isAssignAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node11.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = null;
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = node18.getParent();
        com.google.javascript.rhino.Node node21 = node18.getAncestor((int) (short) 0);
        node21.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder24 = node21.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        boolean boolean29 = node27.isAssignAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node27.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean34 = node33.hasChildren();
        boolean boolean35 = node33.isAssignAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder36 = node33.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = node39.getParent();
        com.google.javascript.rhino.Node node42 = node39.getAncestor((int) (short) 0);
        node42.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder45 = node42.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean49 = node48.hasChildren();
        boolean boolean50 = node48.isAssignAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder51 = node48.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean55 = node54.hasChildren();
        boolean boolean56 = node54.isAssignAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder57 = node54.getJsDocBuilderForNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.FileLevelJsDocBuilder> fileLevelJsDocBuilderList58 = com.google.common.collect.ImmutableList.of(fileLevelJsDocBuilder8, fileLevelJsDocBuilder14, fileLevelJsDocBuilder15, fileLevelJsDocBuilder24, fileLevelJsDocBuilder30, fileLevelJsDocBuilder36, fileLevelJsDocBuilder45, fileLevelJsDocBuilder51, fileLevelJsDocBuilder57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 2");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder57);
    }

    @Test
    public void test00090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00090");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node11.putProp((int) (short) 1, (java.lang.Object) 1);
        node11.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int20 = node11.getSideEffectFlags();
        node11.setSourceEncodedPositionForTree(1);
        boolean boolean23 = node11.isCase();
        boolean boolean24 = node11.isFalse();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node25 = node2.removeChildAfter(node11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00091");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        boolean boolean13 = node3.isParamList();
        int int14 = node3.getLineno();
        boolean boolean15 = node3.hasChildren();
        boolean boolean16 = node3.isBlock();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        node19.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int28 = node19.getSideEffectFlags();
        int int29 = node19.getChildCount();
        boolean boolean30 = node19.isIf();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean34 = node33.hasChildren();
        com.google.javascript.rhino.Node node35 = node33.getParent();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = null;
        int int40 = node38.getIndexOfChild(node39);
        node38.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean44 = node38.isDec();
        boolean boolean45 = node38.isHook();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(31, node3, node19, node33, node38);
        java.lang.Appendable appendable47 = null;
        // The following exception was thrown during execution in test generation
        try {
            node46.appendStringTree(appendable47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test00092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00092");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        int int5 = node2.getLength();
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.appendStringTree(appendable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test00093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00093");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        java.lang.String str4 = node2.getSourceFileName();
        // The following exception was thrown during execution in test generation
        try {
            node2.setSideEffectFlags((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00094");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node5 = node3.getLastSibling();
        boolean boolean6 = node5.isOr();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = null;
        int int12 = node10.getIndexOfChild(node11);
        node10.putProp((int) (short) 1, (java.lang.Object) 1);
        node10.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int19 = node10.getSideEffectFlags();
        boolean boolean20 = node10.isParamList();
        int int21 = node10.getLineno();
        boolean boolean22 = node10.hasChildren();
        boolean boolean23 = node10.isBlock();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node26.putProp((int) (short) 1, (java.lang.Object) 1);
        node26.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int35 = node26.getSideEffectFlags();
        int int36 = node26.getChildCount();
        boolean boolean37 = node26.isIf();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean41 = node40.hasChildren();
        com.google.javascript.rhino.Node node42 = node40.getParent();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = null;
        int int47 = node45.getIndexOfChild(node46);
        node45.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean51 = node45.isDec();
        boolean boolean52 = node45.isHook();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(31, node10, node26, node40, node45);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(48, node5, node10, 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test00095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00095");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        boolean boolean10 = node5.isCall();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = node13.getParent();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.Node node19 = node17.getLastSibling();
        node19.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node24.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean30 = node24.isDec();
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node24);
        node31.putBooleanProp(1, true);
        boolean boolean35 = node31.isTypeOf();
        // The following exception was thrown during execution in test generation
        try {
            node5.replaceChildAfter(node14, node31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test00096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00096");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
    }

    @Test
    public void test00097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00097");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        // The following exception was thrown during execution in test generation
        try {
            node6.setSideEffectFlags(48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test00098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00098");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        // The following exception was thrown during execution in test generation
        try {
            typePosition2.setPositionInformation(54, 54, 29, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 54?end-line: 29");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
    }

    @Test
    public void test00099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00099");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        boolean boolean93 = typeItor92.hasPrevious();
        java.lang.reflect.Type type94 = typeItor92.next();
        java.lang.reflect.Type type95 = null;
        // The following exception was thrown during execution in test generation
        try {
            typeItor92.add(type95);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(type94);
    }

    @Test
    public void test00100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00100");
        int int0 = com.google.javascript.rhino.Node.DIRECT_EVAL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 49 + "'", int0 == 49);
    }

    @Test
    public void test00101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00101");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        boolean boolean96 = typeList95.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type98 = typeList95.get(38);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (38) must be less than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test00102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00102");
        int int0 = com.google.javascript.rhino.Node.SLASH_V;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 54 + "'", int0 == 54);
    }

    @Test
    public void test00103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00103");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation((int) (short) 100, 16, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 100?end-line: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00104");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.lang.Object[] objArray93 = typeList91.toArray();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type> typeList97 = typeList94.subList((int) (short) 1, 42);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (42) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeList94);
    }

    @Test
    public void test00105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00105");
        int int0 = com.google.javascript.rhino.Node.COLUMN_BITS;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 12 + "'", int0 == 12);
    }

    @Test
    public void test00106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00106");
        com.google.common.collect.ImmutableList<java.util.stream.BaseStream<java.lang.reflect.Type, java.util.stream.Stream<java.lang.reflect.Type>>> typeBaseStreamList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(typeBaseStreamList0);
    }

    @Test
    public void test00107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00107");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            typeList95.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
    }

    @Test
    public void test00108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00108");
        int int0 = com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test00109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00109");
        int int0 = com.google.javascript.rhino.Node.IS_NAMESPACE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 46 + "'", int0 == 46);
    }

    @Test
    public void test00110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00110");
        int int0 = com.google.javascript.rhino.Node.ORIGINALNAME_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 40 + "'", int0 == 40);
    }

    @Test
    public void test00111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00111");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        boolean boolean10 = node5.isFor();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node5.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder11.append("((hi!))");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00112");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean93 = typeList91.contains((java.lang.Object) "Unknown class name");
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor94 = typeList91.iterator();
        java.lang.reflect.Type type95 = typeItor94.next();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertNotNull(type95);
    }

    @Test
    public void test00113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00113");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.hasChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node32.putProp((int) (short) 1, (java.lang.Object) 1);
        node32.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node41 = node28.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean45 = node44.isContinue();
        boolean boolean47 = node44.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(42, node41, node44, 42, (int) (byte) 100);
        boolean boolean51 = node41.isNE();
        com.google.javascript.rhino.Node node52 = node24.clonePropsFrom(node41);
        // The following exception was thrown during execution in test generation
        try {
            node2.replaceChild(node18, node52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test00114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00114");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        int int96 = typeList91.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type98 = typeList91.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (-1) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 18 + "'", int96 == 18);
    }

    @Test
    public void test00115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00115");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        boolean boolean5 = node2.getBooleanProp((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            node2.setDouble((double) 29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR  is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00116");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node2.isDebugger();
        java.lang.String str24 = node2.getSourceFileName();
        boolean boolean25 = node2.isArrayLit();
        com.google.javascript.rhino.Node node26 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node27 = node2.removeChildAfter(node26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00117");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = node3.getParent();
        boolean boolean5 = node3.isArrayLit();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node8.addChildToBack(node11);
        java.util.Set<java.lang.String> strSet15 = node11.getDirectives();
        com.google.javascript.rhino.Node node16 = node11.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) '#', node3, node16, (int) '#', 31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test00118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00118");
        java.lang.Exception exception0 = null;
        java.io.IOException iOException3 = new java.io.IOException("(hi!)");
        java.io.IOException iOException4 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException3);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Exception> exceptionList5 = com.google.common.collect.ImmutableList.of(exception0, (java.lang.Exception) iOException4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 0");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00119");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.lang.String str93 = typeList91.toString();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            typeList94.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str93, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeList94);
    }

    @Test
    public void test00120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00120");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.lang.String str93 = typeList91.toString();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type96 = typeList94.remove(39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str93, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeList94);
    }

    @Test
    public void test00121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00121");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])" + "'", str1, "([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])");
    }

    @Test
    public void test00122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00122");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node5 = node3.getLastSibling();
        boolean boolean6 = node5.isOr();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        node9.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int18 = node9.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node21.addChildToBack(node24);
        com.google.javascript.rhino.Node node28 = node21.getNext();
        com.google.javascript.rhino.Node node29 = node9.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.isContinue();
        node32.setQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        com.google.javascript.rhino.Node node39 = node37.getLastSibling();
        node39.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = null;
        int int46 = node44.getIndexOfChild(node45);
        node44.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean50 = node44.isDec();
        com.google.javascript.rhino.Node node51 = node39.useSourceInfoIfMissingFromForTree(node44);
        com.google.javascript.rhino.Node node52 = node32.srcrefTree(node51);
        boolean boolean53 = node51.isString();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(40, node5, node29, node51, (int) (byte) -1, 3);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = node5.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR  is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test00123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00123");
        int int0 = com.google.javascript.rhino.Node.INCRDECR_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 32 + "'", int0 == 32);
    }

    @Test
    public void test00124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00124");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean93 = typeList91.contains((java.lang.Object) "Unknown class name");
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        java.lang.reflect.Type[] typeArray95 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray96 = new java.lang.reflect.Type[][] { typeArray95 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type[][] typeArray97 = typeList94.toArray(typeArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertNotNull(typeArray95);
        org.junit.Assert.assertNotNull(typeArray96);
    }

    @Test
    public void test00125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00125");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        java.util.Iterator<java.lang.reflect.Type> typeItor95 = typeList91.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor97 = typeList91.listIterator(50);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (50) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeItor95);
    }

    @Test
    public void test00126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00126");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType4 = node3.getJSType();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int16 = node7.getSideEffectFlags();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = null;
        int int24 = node22.getIndexOfChild(node23);
        node19.addChildToBack(node22);
        int int26 = node7.getIndexOfChild(node19);
        boolean boolean27 = node7.isBreak();
        boolean boolean28 = node7.isDo();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node33 = node7.useSourceInfoFromForTree(node32);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = null;
        int int38 = node36.getIndexOfChild(node37);
        node36.putProp((int) (short) 1, (java.lang.Object) 1);
        node36.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int45 = node36.getSideEffectFlags();
        boolean boolean46 = node36.isExprResult();
        boolean boolean47 = node36.wasEmptyNode();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenAfter(node32, node36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test00127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00127");
        int int0 = com.google.javascript.rhino.Node.INPUT_ID;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 53 + "'", int0 == 53);
    }

    @Test
    public void test00128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00128");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = node3.isGetElem();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test00129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00129");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        boolean boolean19 = node6.isCatch();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType24 = node23.getJSType();
        int int25 = node23.getSourceOffset();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = node28.getParent();
        com.google.javascript.rhino.Node node31 = node28.getAncestor((int) (short) 0);
        node31.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node31.getJsDocBuilderForNode();
        // The following exception was thrown during execution in test generation
        try {
            node6.addChildAfter(node23, node31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
    }

    @Test
    public void test00130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00130");
        int int0 = com.google.javascript.rhino.Node.LENGTH;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 52 + "'", int0 == 52);
    }

    @Test
    public void test00131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00131");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        node3.setSourceEncodedPositionForTree(1);
        boolean boolean15 = node3.isCase();
        boolean boolean16 = node3.isThrow();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        node19.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int28 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = null;
        int int36 = node34.getIndexOfChild(node35);
        node31.addChildToBack(node34);
        com.google.javascript.rhino.Node node38 = node31.getNext();
        com.google.javascript.rhino.Node node39 = node19.useSourceInfoFromForTree(node31);
        boolean boolean40 = node39.isBreak();
        int int41 = node39.getLength();
        node3.addChildrenToFront(node39);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 1, node39, 44, 38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test00132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00132");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.wasEmptyNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node15.isEquivalentToTyped(node19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node19, "");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType31 = jSTypeExpression28.evaluate(jSTypeStaticScope29, jSTypeRegistry30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test00133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00133");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        int int9 = node2.getLineno();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        node2.setStaticSourceFile(staticSourceFile10);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test00134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00134");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList95.iterator();
        java.lang.reflect.Type type97 = typeItor96.next();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(type97);
    }

    @Test
    public void test00135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00135");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList93 = typeList91.asList();
        com.google.javascript.rhino.Node node96 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean97 = node96.hasChildren();
        java.lang.Class<?> wildcardClass98 = node96.getClass();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = typeList93.add((java.lang.reflect.Type) wildcardClass98);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(typeList93);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test00136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00136");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType4 = node3.getJSType();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        boolean boolean9 = node7.isAssignAdd();
        boolean boolean10 = node7.isDebugger();
        boolean boolean11 = node7.isFromExterns();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node7.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        boolean boolean22 = node18.isName();
        com.google.javascript.rhino.InputId inputId24 = new com.google.javascript.rhino.InputId("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        java.lang.String str25 = inputId24.toString();
        node18.setInputId(inputId24);
        // The following exception was thrown during execution in test generation
        try {
            node3.replaceChildAfter(node7, node18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str25, "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00137");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isHook();
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node11 = node2.useSourceInfoIfMissingFromForTree(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00138");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        java.lang.Object obj41 = node39.getProp((int) (short) 10);
        java.lang.Appendable appendable42 = null;
        // The following exception was thrown during execution in test generation
        try {
            node39.appendStringTree(appendable42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test00139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00139");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSTypeExpression jSTypeExpression1 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00140");
        java.io.IOException iOException0 = new java.io.IOException();
        java.lang.String str1 = iOException0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.io.IOException" + "'", str1, "java.io.IOException");
    }

    @Test
    public void test00141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00141");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type97 = typeList91.remove((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
    }

    @Test
    public void test00142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00142");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node3.addChildToBack(node6);
        node3.setVarArgs(false);
        java.util.Set<java.lang.String> strSet12 = node3.getDirectives();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        java.util.Set<java.lang.String> strSet22 = node18.getDirectives();
        node18.setOptionalArg(false);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = null;
        int int32 = node30.getIndexOfChild(node31);
        node27.addChildToBack(node30);
        boolean boolean34 = node30.isTypeOf();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.isContinue();
        node37.setQuotedString();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        com.google.javascript.rhino.Node node44 = node42.getLastSibling();
        node44.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = null;
        int int51 = node49.getIndexOfChild(node50);
        node49.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean55 = node49.isDec();
        com.google.javascript.rhino.Node node56 = node44.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node57 = node37.srcrefTree(node56);
        node57.setCharno(0);
        node30.addChildrenToBack(node57);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = node63.getParent();
        boolean boolean65 = node63.isArrayLit();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(0, node3, node18, node57, node63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test00143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00143");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type> typeList95 = typeList91.subList((int) (byte) -1, 47);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (-1) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test00144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00144");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor93 = typeList91.iterator();
        java.lang.String str94 = typeList91.toString();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor95 = typeList91.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.reflect.Type> typeItor97 = typeList91.listIterator((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (35) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str94, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor95);
    }

    @Test
    public void test00145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00145");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = node4.isOnlyModifiesThisCall();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test00146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00146");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator();
        java.lang.reflect.Type type94 = null;
        // The following exception was thrown during execution in test generation
        try {
            typeItor93.add(type94);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeItor93);
    }

    @Test
    public void test00147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00147");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node2.isCatch();
        boolean boolean41 = node2.isTrue();
        boolean boolean42 = node2.isCatch();
        java.lang.Appendable appendable43 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.appendStringTree(appendable43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test00148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00148");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        node2.setOptionalArg(true);
        int int7 = node2.getType();
        boolean boolean8 = node2.isLabelName();
        java.lang.String str9 = node2.getQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test00149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00149");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor93 = typeList91.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo94 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean95 = jSDocInfo94.isNoShadow();
        int int96 = jSDocInfo94.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList97 = jSDocInfo94.getExtendedInterfaces();
        int int98 = typeList91.lastIndexOf((java.lang.Object) jSTypeExpressionList97);
        java.util.Iterator<java.lang.reflect.Type> typeItor99 = typeList91.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertNotNull(typeItor99);
    }

    @Test
    public void test00150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00150");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getSuppressions();
        strSet3.clear();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean93 = node92.hasChildren();
        java.lang.Class<?> wildcardClass94 = node92.getClass();
        java.lang.reflect.Type[] typeArray95 = new java.lang.reflect.Type[] { wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89, wildcardClass94 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, (java.lang.reflect.Type) wildcardClass64, typeArray95);
        boolean boolean97 = typeList96.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor98 = typeList96.listIterator();
        boolean boolean99 = strSet3.retainAll((java.util.Collection<java.lang.reflect.Type>) typeList96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(typeArray95);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(typeItor98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00151");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList95.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream98 = typeList97.stream();
        java.util.ListIterator<java.lang.reflect.Type> typeItor99 = typeList97.listIterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertNotNull(typeStream98);
        org.junit.Assert.assertNotNull(typeItor99);
    }

    @Test
    public void test00152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00152");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getParent();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        boolean boolean9 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node10 = null;
        com.google.javascript.rhino.Node node11 = node7.getChildBefore(node10);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node12 = node4.srcref(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test00153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00153");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node2.isAdd();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node26.putProp((int) (short) 1, (java.lang.Object) 1);
        node26.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int35 = node26.getSideEffectFlags();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = null;
        int int43 = node41.getIndexOfChild(node42);
        node38.addChildToBack(node41);
        int int45 = node26.getIndexOfChild(node38);
        boolean boolean46 = node26.isBreak();
        boolean boolean47 = node26.isDo();
        boolean boolean48 = node26.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildBefore(node26, node50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test00154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00154");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        java.lang.String str23 = node2.getQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node2.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator25 = nodeIterable24.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator26 = nodeIterable24.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNotNull(nodeSpliterator25);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
    }

    @Test
    public void test00155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00155");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        boolean boolean13 = node3.isParamList();
        int int14 = node3.getLineno();
        boolean boolean15 = node3.hasChildren();
        boolean boolean16 = node3.isBlock();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        node19.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int28 = node19.getSideEffectFlags();
        int int29 = node19.getChildCount();
        boolean boolean30 = node19.isIf();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean34 = node33.hasChildren();
        com.google.javascript.rhino.Node node35 = node33.getParent();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = null;
        int int40 = node38.getIndexOfChild(node39);
        node38.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean44 = node38.isDec();
        boolean boolean45 = node38.isHook();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(31, node3, node19, node33, node38);
        boolean boolean47 = node19.isAssign();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        node19.addChildToBack(node50);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = node19.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test00156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00156");
        java.lang.Comparable<java.lang.String> strComparable1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList10 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "Named type with empty name component", strComparable1, (java.lang.Comparable<java.lang.String>) "OR ", (java.lang.Comparable<java.lang.String>) "([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])", (java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "Unknown class name", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])", (java.lang.Comparable<java.lang.String>) "Unknown class name", (java.lang.Comparable<java.lang.String>) "OR ");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 1");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00157");
        int int0 = com.google.javascript.rhino.Node.FLAG_NO_THROWS;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 8 + "'", int0 == 8);
    }

    @Test
    public void test00158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00158");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation((int) 'a', 35, (int) 'a', 48);
        java.lang.String str8 = stringPosition0.getItem();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(43, (int) (byte) 1, 31, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 43?end-line: 31");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test00159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00159");
        int int0 = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test00160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00160");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean93 = typeList91.contains((java.lang.Object) "Unknown class name");
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type96 = typeList94.remove((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeList94);
    }

    @Test
    public void test00161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00161");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList95.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream98 = typeList97.stream();
        int int99 = typeList97.size();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertNotNull(typeStream98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 18 + "'", int99 == 18);
    }

    @Test
    public void test00162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00162");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "Named type with empty name component");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00163");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        com.google.javascript.rhino.jstype.JSType jSType40 = node2.getJSType();
        com.google.javascript.rhino.Node node41 = node2.cloneTree();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = node41.toString(true, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test00164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00164");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        node15.addSuppression("");
        boolean boolean18 = node15.isReturn();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node15.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node23.addChildToBack(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isNoShadow();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo30.getParameterNames();
        node23.setJSDocInfo(jSDocInfo30);
        boolean boolean34 = node23.hasChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = null;
        int int40 = node38.getIndexOfChild(node39);
        node38.putProp((int) (short) 1, (java.lang.Object) 1);
        node38.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int47 = node38.getSideEffectFlags();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = null;
        int int55 = node53.getIndexOfChild(node54);
        node50.addChildToBack(node53);
        com.google.javascript.rhino.Node node57 = node50.getNext();
        com.google.javascript.rhino.Node node58 = node38.useSourceInfoFromForTree(node50);
        boolean boolean59 = node50.isNot();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(10, node50, (int) ' ', (int) '4');
        boolean boolean63 = node62.isQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            node15.replaceChild(node23, node62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test00165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00165");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        java.lang.Class<?> wildcardClass6 = jSDocInfo0.getClass();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00166");
        java.io.IOException iOException2 = new java.io.IOException("(hi!)");
        java.io.IOException iOException3 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException2);
        java.lang.String str4 = iOException2.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.io.IOException: (hi!)" + "'", str4, "java.io.IOException: (hi!)");
    }

    @Test
    public void test00167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00167");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.lang.Object[] objArray93 = typeList91.toArray();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeList94);
    }

    @Test
    public void test00168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00168");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor93 = typeList91.iterator();
        java.lang.String str94 = typeList91.toString();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor95 = typeList91.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type97 = typeList91.remove(5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str94, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor95);
    }

    @Test
    public void test00169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00169");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList95.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        // The following exception was thrown during execution in test generation
        try {
            typeList97.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertNotNull(typeList97);
    }

    @Test
    public void test00170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00170");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node2.isCatch();
        boolean boolean41 = node2.isRegExp();
        java.util.Set<java.lang.String> strSet42 = node2.getDirectives();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strSet42);
    }

    @Test
    public void test00171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00171");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo9.getParameterNames();
        node2.setJSDocInfo(jSDocInfo9);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = node2.getExistingIntProp((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 10");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test00172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00172");
        int int0 = com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test00173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00173");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.lang.reflect.GenericDeclaration> genericDeclarationList92 = com.google.common.collect.ImmutableList.of((java.lang.reflect.GenericDeclaration) wildcardClass59);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(genericDeclarationList92);
    }

    @Test
    public void test00174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00174");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        node15.addSuppression("");
        node15.setSourceEncodedPosition(37);
        boolean boolean20 = node15.wasEmptyNode();
        java.util.Set<java.lang.String> strSet21 = node15.getDirectives();
        boolean boolean22 = node15.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            node15.setSideEffectFlags(41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00175");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        boolean boolean93 = typeItor92.hasPrevious();
        java.lang.reflect.Type type94 = typeItor92.next();
        int int95 = typeItor92.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            typeItor92.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test00176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00176");
        int int0 = com.google.javascript.rhino.Node.STATIC_SOURCE_FILE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 51 + "'", int0 == 51);
    }

    @Test
    public void test00177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00177");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = node3.getParent();
        boolean boolean5 = node3.isArrayLit();
        boolean boolean6 = node3.isThrow();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = node10.getParent();
        boolean boolean12 = node10.isArrayLit();
        node10.setOptionalArg(true);
        int int15 = node10.getType();
        boolean boolean16 = node10.isLabelName();
        boolean boolean17 = node10.isInstanceOf();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(42, node10, 15, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(47, node3, node10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00178");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node5 = node3.getLastSibling();
        node5.setSourceFileForTesting("Not declared as a type name");
        boolean boolean8 = node5.isBreak();
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = node5.hasChild(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        node14.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int23 = node14.getSideEffectFlags();
        boolean boolean24 = node14.isParamList();
        int int25 = node14.getLineno();
        boolean boolean26 = node14.hasChildren();
        boolean boolean27 = node14.isBlock();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = null;
        int int32 = node30.getIndexOfChild(node31);
        node30.putProp((int) (short) 1, (java.lang.Object) 1);
        node30.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int39 = node30.getSideEffectFlags();
        int int40 = node30.getChildCount();
        boolean boolean41 = node30.isIf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean45 = node44.hasChildren();
        com.google.javascript.rhino.Node node46 = node44.getParent();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = null;
        int int51 = node49.getIndexOfChild(node50);
        node49.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean55 = node49.isDec();
        boolean boolean56 = node49.isHook();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(31, node14, node30, node44, node49);
        boolean boolean58 = node30.isAssign();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        node30.addChildToBack(node61);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(49, node5, node30, 16, 50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test00179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00179");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isHook();
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildToFront(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00180");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList95.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream98 = typeList95.parallelStream();
        int int99 = typeList95.size();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertNotNull(typeStream98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 18 + "'", int99 == 18);
    }

    @Test
    public void test00181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00181");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00182");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList95.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream98 = typeList97.stream();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor99 = typeList97.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertNotNull(typeStream98);
        org.junit.Assert.assertNotNull(typeItor99);
    }

    @Test
    public void test00183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00183");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean9 = node8.hasChildren();
        java.lang.Class<?> wildcardClass10 = node8.getClass();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean14 = node13.hasChildren();
        java.lang.Class<?> wildcardClass15 = node13.getClass();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean19 = node18.hasChildren();
        java.lang.Class<?> wildcardClass20 = node18.getClass();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.hasChildren();
        java.lang.Class<?> wildcardClass25 = node23.getClass();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.hasChildren();
        java.lang.Class<?> wildcardClass30 = node28.getClass();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean34 = node33.hasChildren();
        java.lang.Class<?> wildcardClass35 = node33.getClass();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean39 = node38.hasChildren();
        java.lang.Class<?> wildcardClass40 = node38.getClass();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean44 = node43.hasChildren();
        java.lang.Class<?> wildcardClass45 = node43.getClass();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean49 = node48.hasChildren();
        java.lang.Class<?> wildcardClass50 = node48.getClass();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean54 = node53.hasChildren();
        java.lang.Class<?> wildcardClass55 = node53.getClass();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean59 = node58.hasChildren();
        java.lang.Class<?> wildcardClass60 = node58.getClass();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean64 = node63.hasChildren();
        java.lang.Class<?> wildcardClass65 = node63.getClass();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean69 = node68.hasChildren();
        java.lang.Class<?> wildcardClass70 = node68.getClass();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean74 = node73.hasChildren();
        java.lang.Class<?> wildcardClass75 = node73.getClass();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean79 = node78.hasChildren();
        java.lang.Class<?> wildcardClass80 = node78.getClass();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean84 = node83.hasChildren();
        java.lang.Class<?> wildcardClass85 = node83.getClass();
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean89 = node88.hasChildren();
        java.lang.Class<?> wildcardClass90 = node88.getClass();
        com.google.javascript.rhino.Node node93 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean94 = node93.hasChildren();
        java.lang.Class<?> wildcardClass95 = node93.getClass();
        java.lang.reflect.Type[] typeArray96 = new java.lang.reflect.Type[] { wildcardClass70, wildcardClass75, wildcardClass80, wildcardClass85, wildcardClass90, wildcardClass95 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass10, (java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass20, (java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass30, (java.lang.reflect.Type) wildcardClass35, (java.lang.reflect.Type) wildcardClass40, (java.lang.reflect.Type) wildcardClass45, (java.lang.reflect.Type) wildcardClass50, (java.lang.reflect.Type) wildcardClass55, (java.lang.reflect.Type) wildcardClass60, (java.lang.reflect.Type) wildcardClass65, typeArray96);
        boolean boolean98 = typeList97.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = strSet5.removeAll((java.util.Collection<java.lang.reflect.Type>) typeList97);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(typeArray96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test00184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00184");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        boolean boolean5 = node4.isString();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = null;
        int int10 = node8.getIndexOfChild(node9);
        node8.putProp((int) (short) 1, (java.lang.Object) 1);
        node8.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int17 = node8.getSideEffectFlags();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = null;
        int int25 = node23.getIndexOfChild(node24);
        node20.addChildToBack(node23);
        int int27 = node8.getIndexOfChild(node20);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean31 = node30.hasChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = null;
        int int36 = node34.getIndexOfChild(node35);
        node34.putProp((int) (short) 1, (java.lang.Object) 1);
        node34.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node43 = node30.useSourceInfoIfMissingFromForTree(node34);
        boolean boolean44 = node43.wasEmptyNode();
        com.google.javascript.rhino.Node node45 = node8.useSourceInfoFrom(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList48 = jSDocInfo46.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo46.getSuppressions();
        node43.setJSDocInfo(jSDocInfo46);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean54 = node53.isContinue();
        node53.setQuotedString();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean59 = node58.hasChildren();
        com.google.javascript.rhino.Node node60 = node58.getLastSibling();
        node60.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = null;
        int int67 = node65.getIndexOfChild(node66);
        node65.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean71 = node65.isDec();
        com.google.javascript.rhino.Node node72 = node60.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node73 = node53.srcrefTree(node72);
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildrenAfter(node43, node73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test00185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00185");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor93 = typeList91.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.reflect.Type> typeItor95 = typeList91.listIterator(39);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (39) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeItor93);
    }

    @Test
    public void test00186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00186");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str4 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00187");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        boolean boolean9 = node5.isTypeOf();
        boolean boolean10 = node5.isDebugger();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags12 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags12.setThrows();
        sideEffectFlags12.setMutatesArguments();
        sideEffectFlags12.setThrows();
        // The following exception was thrown during execution in test generation
        try {
            node5.setSideEffectFlags(sideEffectFlags12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00188");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node.FileLevelJsDocBuilder> fileLevelJsDocBuilderBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node.FileLevelJsDocBuilder>();
    }

    @Test
    public void test00189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00189");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        node22.setCharno(0);
        java.lang.Appendable appendable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            node22.appendStringTree(appendable25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test00190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00190");
        java.io.IOException iOException2 = new java.io.IOException("(hi!)");
        java.io.IOException iOException3 = new java.io.IOException("", (java.lang.Throwable) iOException2);
        java.io.IOException iOException6 = new java.io.IOException("(hi!)");
        java.io.IOException iOException7 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException6);
        java.lang.Throwable[] throwableArray8 = iOException7.getSuppressed();
        java.io.IOException iOException9 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.lang.Exception> exceptionList10 = com.google.common.collect.ImmutableList.of((java.lang.Exception) iOException2, (java.lang.Exception) iOException7, (java.lang.Exception) iOException9);
        java.lang.String str11 = iOException7.toString();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(exceptionList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.io.IOException: Named type with empty name component" + "'", str11, "java.io.IOException: Named type with empty name component");
    }

    @Test
    public void test00191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00191");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type> typeList96 = typeList91.subList(32, 4095);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (32) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
    }

    @Test
    public void test00192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00192");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node6.getLastSibling();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = null;
        int int27 = node25.getIndexOfChild(node26);
        node22.addChildToBack(node25);
        com.google.javascript.rhino.Node node29 = node22.getNext();
        com.google.javascript.rhino.Node node30 = node6.copyInformationFrom(node22);
        // The following exception was thrown during execution in test generation
        try {
            node30.setDouble((double) 45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test00193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00193");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        java.util.ListIterator<java.lang.reflect.Type> typeItor94 = typeList91.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type96 = typeList91.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertNotNull(typeItor94);
    }

    @Test
    public void test00194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00194");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        com.google.javascript.rhino.Node node5 = node2.getAncestor((int) (short) 0);
        node5.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node5.getJsDocBuilderForNode();
        node5.setSourceFileForTesting("JSDocInfo");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags12 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags12.clearAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node5.setSideEffectFlags(sideEffectFlags12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 50");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
    }

    @Test
    public void test00195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00195");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor93 = typeList91.iterator();
        com.google.javascript.rhino.Node node96 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean97 = node96.hasChildren();
        boolean boolean98 = typeList91.contains((java.lang.Object) node96);
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList99 = typeList91.asList();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(typeList99);
    }

    @Test
    public void test00196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00196");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node2 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = node4.getJSDocInfo();
        com.google.javascript.rhino.Node node6 = node4.cloneTree();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        node9.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int18 = node9.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node21.addChildToBack(node24);
        int int28 = node9.getIndexOfChild(node21);
        boolean boolean29 = node9.isBreak();
        boolean boolean30 = node9.isDo();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node35 = node9.useSourceInfoFromForTree(node34);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(5, node1, node2, node4, node9, 41, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(jSDocInfo5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test00197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00197");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "false");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00198");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList95.reverse();
        int int97 = typeList96.size();
        java.lang.Object obj98 = null;
        boolean boolean99 = typeList96.equals(obj98);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 18 + "'", int97 == 18);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00199");
        java.io.IOException iOException2 = new java.io.IOException("(hi!)");
        java.io.IOException iOException3 = new java.io.IOException("", (java.lang.Throwable) iOException2);
        java.io.IOException iOException6 = new java.io.IOException("(hi!)");
        java.io.IOException iOException7 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException6);
        java.lang.Throwable[] throwableArray8 = iOException7.getSuppressed();
        java.io.IOException iOException9 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.lang.Exception> exceptionList10 = com.google.common.collect.ImmutableList.of((java.lang.Exception) iOException2, (java.lang.Exception) iOException7, (java.lang.Exception) iOException9);
        java.io.IOException iOException13 = new java.io.IOException("(hi!)");
        java.io.IOException iOException14 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException13);
        java.io.IOException iOException17 = new java.io.IOException("(hi!)");
        java.io.IOException iOException18 = new java.io.IOException("", (java.lang.Throwable) iOException17);
        java.lang.Throwable[] throwableArray19 = iOException18.getSuppressed();
        java.io.IOException iOException22 = new java.io.IOException("(hi!)");
        java.io.IOException iOException23 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException22);
        java.io.IOException iOException27 = new java.io.IOException("(hi!)");
        java.io.IOException iOException28 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException27);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList29 = com.google.common.collect.ImmutableList.of(iOException27);
        java.io.IOException iOException30 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException27);
        java.io.IOException iOException33 = new java.io.IOException("(hi!)");
        java.io.IOException iOException34 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException33);
        java.io.IOException iOException37 = new java.io.IOException("(hi!)");
        java.io.IOException iOException38 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException37);
        java.io.IOException iOException41 = new java.io.IOException("(hi!)");
        java.io.IOException iOException42 = new java.io.IOException("", (java.lang.Throwable) iOException41);
        java.io.IOException iOException46 = new java.io.IOException("(hi!)");
        java.io.IOException iOException47 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException46);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList48 = com.google.common.collect.ImmutableList.of(iOException46);
        java.io.IOException iOException49 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException46);
        java.io.IOException iOException51 = new java.io.IOException("(hi!)");
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList52 = com.google.common.collect.ImmutableList.of(iOException27, iOException34, iOException38, iOException42, iOException46, iOException51);
        java.io.IOException iOException55 = new java.io.IOException("(hi!)");
        java.io.IOException iOException56 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException55);
        java.io.IOException iOException57 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList58 = com.google.common.collect.ImmutableList.of(iOException2, iOException14, iOException18, iOException22, iOException34, iOException56, iOException57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 6");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(exceptionList10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(iOExceptionList29);
        org.junit.Assert.assertNotNull(iOExceptionList48);
        org.junit.Assert.assertNotNull(iOExceptionList52);
    }

    @Test
    public void test00200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00200");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node7.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node7.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node7.getLastSibling();
        boolean boolean21 = node7.isVoid();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = null;
        int int27 = node25.getIndexOfChild(node26);
        node25.putProp((int) (short) 1, (java.lang.Object) 1);
        node25.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int34 = node25.getSideEffectFlags();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = null;
        int int42 = node40.getIndexOfChild(node41);
        node37.addChildToBack(node40);
        com.google.javascript.rhino.Node node44 = node37.getNext();
        com.google.javascript.rhino.Node node45 = node25.useSourceInfoFromForTree(node37);
        boolean boolean46 = node37.isNot();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(10, node37, (int) ' ', (int) '4');
        boolean boolean50 = node49.isQualifiedName();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        boolean boolean55 = node54.isDo();
        com.google.javascript.rhino.Node node56 = node49.srcref(node54);
        boolean boolean57 = node56.isWith();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = null;
        int int62 = node60.getIndexOfChild(node61);
        node60.putProp((int) (short) 1, (java.lang.Object) 1);
        node60.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int69 = node60.getSideEffectFlags();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = null;
        int int77 = node75.getIndexOfChild(node76);
        node72.addChildToBack(node75);
        int int79 = node60.getIndexOfChild(node72);
        boolean boolean80 = node60.isBreak();
        boolean boolean81 = node60.isDo();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean85 = node84.hasChildren();
        com.google.javascript.rhino.Node node86 = node84.getLastSibling();
        int int87 = node86.getLength();
        node86.setIsSyntheticBlock(false);
        boolean boolean90 = node60.isEquivalentToTyped(node86);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) 1, node7, node56, node86);
        node56.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test00201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00201");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean6 = node5.hasChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        node9.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node18 = node5.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean22 = node21.isContinue();
        boolean boolean24 = node21.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(42, node18, node21, 42, (int) (byte) 100);
        boolean boolean28 = node18.isNE();
        boolean boolean29 = node18.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(15, node1, node18, 5, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test00202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00202");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        boolean boolean12 = node2.isExprResult();
        boolean boolean13 = node2.wasEmptyNode();
        boolean boolean14 = node2.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node17.putProp((int) (short) 1, (java.lang.Object) 1);
        node17.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int26 = node17.getSideEffectFlags();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node29.addChildToBack(node32);
        com.google.javascript.rhino.Node node36 = node29.getNext();
        com.google.javascript.rhino.Node node37 = node17.useSourceInfoFromForTree(node29);
        boolean boolean38 = node17.isDebugger();
        java.lang.String str39 = node17.getSourceFileName();
        int int40 = node17.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = node43.getParent();
        boolean boolean45 = node43.isArrayLit();
        node43.setOptionalArg(true);
        boolean boolean48 = node43.isNot();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildBefore(node17, node43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test00203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00203");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        boolean boolean10 = node5.isFor();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node5.new FileLevelJsDocBuilder();
        boolean boolean12 = node5.isVarArgs();
        com.google.javascript.rhino.Node node13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node14 = node5.removeChildAfter(node13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00204");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        java.lang.Object obj41 = node39.getProp((int) (short) 10);
        boolean boolean42 = node39.wasEmptyNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node44 = node39.getChildAtIndex(53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test00205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00205");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node2.isCatch();
        boolean boolean41 = node2.isTrue();
        boolean boolean42 = node2.isCatch();
        com.google.javascript.rhino.Node node43 = node2.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = node43.isAssign();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node43);
    }

    @Test
    public void test00206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00206");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            typeList94.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertNotNull(typeList94);
    }

    @Test
    public void test00207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00207");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.wasEmptyNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node15.isEquivalentToTyped(node19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node19, "");
        boolean boolean29 = jSTypeExpression28.isOptionalArg();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeExpression28.evaluate(jSTypeStaticScope30, jSTypeRegistry31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test00208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00208");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        boolean boolean94 = typeList91.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00209");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = null;
        int int6 = node4.getIndexOfChild(node5);
        node4.putProp((int) (short) 1, (java.lang.Object) 1);
        node4.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int13 = node4.getSideEffectFlags();
        int int14 = node4.getChildCount();
        boolean boolean15 = node4.isIf();
        boolean boolean16 = node4.isGetElem();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        node19.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int28 = node19.getSideEffectFlags();
        boolean boolean29 = node19.isExprResult();
        boolean boolean30 = node19.wasEmptyNode();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node33.putProp((int) (short) 1, (java.lang.Object) 1);
        node33.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int42 = node33.getSideEffectFlags();
        boolean boolean43 = node33.isParamList();
        int int44 = node33.getLineno();
        boolean boolean45 = node33.hasChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = null;
        int int58 = node56.getIndexOfChild(node57);
        node56.putProp((int) (short) 1, (java.lang.Object) 1);
        node56.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node65 = node52.useSourceInfoIfMissingFromForTree(node56);
        node65.addSuppression("");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = node70.getParent();
        com.google.javascript.rhino.Node node73 = node70.getAncestor((int) (short) 0);
        node73.putBooleanProp((int) (short) 10, false);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] { node4, node19, node33, node49, node65, node73 };
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(4095, nodeArray77);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(39, nodeArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: duplicate child");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(nodeArray77);
    }

    @Test
    public void test00210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00210");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator();
        java.io.IOException[] iOExceptionArray94 = new java.io.IOException[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.io.IOException[] iOExceptionArray95 = typeList91.toArray(iOExceptionArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(iOExceptionArray94);
    }

    @Test
    public void test00211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00211");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        node4.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean15 = node9.isDec();
        com.google.javascript.rhino.Node node16 = node4.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.hasChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = null;
        int int25 = node23.getIndexOfChild(node24);
        node23.putProp((int) (short) 1, (java.lang.Object) 1);
        node23.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node32 = node19.useSourceInfoIfMissingFromForTree(node23);
        node32.addSuppression("");
        boolean boolean35 = node32.isReturn();
        java.lang.Object obj37 = null;
        node32.putProp(10, obj37);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node39 = node16.clonePropsFrom(node32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Node has existing properties.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test00212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00212");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType4 = node3.getJSType();
        int int5 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean14 = node13.hasChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node17.putProp((int) (short) 1, (java.lang.Object) 1);
        node17.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node26 = node13.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean30 = node29.isContinue();
        boolean boolean32 = node29.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(42, node26, node29, 42, (int) (byte) 100);
        boolean boolean36 = node26.isNE();
        com.google.javascript.rhino.Node node37 = node9.clonePropsFrom(node26);
        // The following exception was thrown during execution in test generation
        try {
            node3.removeChild(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
    }

    @Test
    public void test00213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00213");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean41 = jSDocInfo40.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList42 = jSDocInfo40.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo40.getSuppressions();
        node37.setJSDocInfo(jSDocInfo40);
        java.lang.String str45 = jSDocInfo40.getDescription();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = null;
        int int50 = node48.getIndexOfChild(node49);
        node48.putProp((int) (short) 1, (java.lang.Object) 1);
        node48.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int57 = node48.getSideEffectFlags();
        node48.setSourceEncodedPositionForTree(1);
        boolean boolean60 = node48.isCase();
        com.google.javascript.rhino.Node node61 = node48.getFirstChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean66 = node65.hasChildren();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = null;
        int int71 = node69.getIndexOfChild(node70);
        node69.putProp((int) (short) 1, (java.lang.Object) 1);
        node69.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node78 = node65.useSourceInfoIfMissingFromForTree(node69);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean82 = node81.isContinue();
        boolean boolean84 = node81.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(42, node78, node81, 42, (int) (byte) 100);
        boolean boolean88 = node78.isNE();
        boolean boolean89 = node78.hasChildren();
        com.google.javascript.rhino.Node node90 = node48.copyInformationFromForTree(node78);
        jSDocInfo40.setAssociatedNode(node48);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags93 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags93.clearAllFlags();
        sideEffectFlags93.setReturnsTainted();
        // The following exception was thrown during execution in test generation
        try {
            node48.setSideEffectFlags(sideEffectFlags93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
    }

    @Test
    public void test00214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00214");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.lang.String str93 = typeList91.toString();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet95 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet97 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet98 = booleanLiteralSet95.union(booleanLiteralSet97);
        boolean boolean99 = typeList91.contains((java.lang.Object) booleanLiteralSet97);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str93, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet95 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet95.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet97 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet97.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet98 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet98.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00215");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        int int18 = node6.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = null;
        int int23 = node21.getIndexOfChild(node22);
        node21.putProp((int) (short) 1, (java.lang.Object) 1);
        node21.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int30 = node21.getSideEffectFlags();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = null;
        int int38 = node36.getIndexOfChild(node37);
        node33.addChildToBack(node36);
        int int40 = node21.getIndexOfChild(node33);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean44 = node43.hasChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = null;
        int int49 = node47.getIndexOfChild(node48);
        node47.putProp((int) (short) 1, (java.lang.Object) 1);
        node47.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node56 = node43.useSourceInfoIfMissingFromForTree(node47);
        boolean boolean57 = node56.wasEmptyNode();
        com.google.javascript.rhino.Node node58 = node21.useSourceInfoFrom(node56);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node59 = node6.getChildBefore(node56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test00216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00216");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        stringPosition0.setPositionInformation(38, (int) (byte) 10, 47, (int) 'a');
        int int10 = stringPosition0.getPositionOnEndLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(43, 29, 0, 51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 43?end-line: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
    }

    @Test
    public void test00217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00217");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        java.lang.String str95 = typeList91.toString();
        java.lang.Exception[] exceptionArray96 = new java.lang.Exception[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Exception[] exceptionArray97 = typeList91.toArray(exceptionArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str95, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(exceptionArray96);
    }

    @Test
    public void test00218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00218");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList95.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        java.lang.String str98 = typeList97.toString();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor99 = typeList97.listIterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str98, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor99);
    }

    @Test
    public void test00219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00219");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node13 = node2.getChildBefore(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test00220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00220");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        boolean boolean12 = node2.getBooleanProp(48);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node13 = node2.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00221");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        boolean boolean93 = typeItor92.hasPrevious();
        int int94 = typeItor92.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type95 = typeItor92.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test00222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00222");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        int int5 = node2.getLength();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        boolean boolean8 = node7.isScript();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node9 = node2.getChildBefore(node7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00223");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        node15.addSuppression("");
        node15.setSourceEncodedPosition(37);
        boolean boolean20 = node15.wasEmptyNode();
        java.util.Set<java.lang.String> strSet21 = node15.getDirectives();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = null;
        int int29 = node27.getIndexOfChild(node28);
        node24.addChildToBack(node27);
        java.util.Set<java.lang.String> strSet31 = node27.getDirectives();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node32 = node15.clonePropsFrom(node27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Node has existing properties.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(strSet31);
    }

    @Test
    public void test00224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00224");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = strSet2.add("Not declared as a type name");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test00225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00225");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(4095, 53, 2, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 4095?end-line: 2");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test00226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00226");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.wasEmptyNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node15.isEquivalentToTyped(node19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node19, "");
        com.google.javascript.rhino.Node node29 = jSTypeExpression28.getRoot();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeExpression28.evaluate(jSTypeStaticScope30, jSTypeRegistry31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test00227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00227");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            typeItor93.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeItor93);
    }

    @Test
    public void test00228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00228");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        java.lang.String str9 = node2.getString();
        boolean boolean10 = node2.isScript();
        boolean boolean11 = node2.isGetProp();
        com.google.javascript.rhino.Node node12 = node2.getNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.InputId inputId13 = node12.getInputId();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test00229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00229");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00230");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node6.getLastSibling();
        com.google.javascript.rhino.Node node20 = node6.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node20.detachChildren();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test00231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00231");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator();
        java.util.ListIterator<java.lang.reflect.Type> typeItor95 = typeList91.listIterator(0);
        // The following exception was thrown during execution in test generation
        try {
            typeItor95.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(typeItor95);
    }

    @Test
    public void test00232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00232");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        node3.setSourceEncodedPositionForTree(1);
        boolean boolean15 = node3.isCase();
        boolean boolean16 = node3.isThrow();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) ' ', 49, 32);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("(hi!)");
        boolean boolean23 = node22.isIn();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(38, node3, node20, node22, 39, (-1));
        int int27 = node20.getChildCount();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(52, (int) (byte) 0, 52);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = null;
        int int39 = node37.getIndexOfChild(node38);
        node34.addChildToBack(node37);
        com.google.javascript.rhino.Node node41 = node37.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node20.replaceChildAfter(node31, node37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(node41);
    }

    @Test
    public void test00233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00233");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        java.lang.String[] strArray12 = new java.lang.String[] { "Not declared as a type name", "(hi!)", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.String[] strArray24 = new java.lang.String[] { "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "Not declared as a constructor", "((hi!))", "hi!", "JSDocInfo", "((hi!))", "Not declared as a type name", "Not declared as a constructor", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.lang.Object[] objArray27 = strSet25.toArray();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Iterator<java.lang.String> strItor36 = strSet34.iterator();
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList37 = com.google.common.collect.ImmutableList.of((java.util.AbstractSet<java.lang.String>) strSet6, (java.util.AbstractSet<java.lang.String>) strSet13, (java.util.AbstractSet<java.lang.String>) strSet25, (java.util.AbstractSet<java.lang.String>) strSet34);
        boolean boolean38 = strSet13.isEmpty();
        java.util.Iterator<java.lang.reflect.Type>[] typeItorArray39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.lang.reflect.Type>[] typeItorArray40 = strSet13.toArray(typeItorArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strSetList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00234");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = node3.getParent();
        boolean boolean5 = node3.isArrayLit();
        boolean boolean6 = node3.isThrow();
        boolean boolean7 = node3.isInstanceOf();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node10.addChildToBack(node13);
        com.google.javascript.rhino.Node node17 = node10.getNext();
        boolean boolean18 = node10.isFalse();
        node3.addChildrenToBack(node10);
        boolean boolean20 = node10.isRegExp();
        com.google.javascript.rhino.Node node21 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = null;
        int int29 = node27.getIndexOfChild(node28);
        node24.addChildToBack(node27);
        boolean boolean31 = node27.isTypeOf();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean35 = node34.isContinue();
        node34.setQuotedString();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean40 = node39.hasChildren();
        com.google.javascript.rhino.Node node41 = node39.getLastSibling();
        node41.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = null;
        int int48 = node46.getIndexOfChild(node47);
        node46.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean52 = node46.isDec();
        com.google.javascript.rhino.Node node53 = node41.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.rhino.Node node54 = node34.srcrefTree(node53);
        node54.setCharno(0);
        node27.addChildrenToBack(node54);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = null;
        int int62 = node60.getIndexOfChild(node61);
        node60.putProp((int) (short) 1, (java.lang.Object) 1);
        node60.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int69 = node60.getSideEffectFlags();
        boolean boolean70 = node60.isExprResult();
        boolean boolean71 = node60.wasEmptyNode();
        com.google.javascript.rhino.Node node72 = node54.copyInformationFromForTree(node60);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(15, node10, node21, node60, (int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test00235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00235");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        java.lang.String str9 = node2.getString();
        boolean boolean10 = node2.isScript();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean14 = node13.hasChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node17.putProp((int) (short) 1, (java.lang.Object) 1);
        node17.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node26 = node13.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean27 = node13.isContinue();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean31 = node30.isContinue();
        boolean boolean33 = node30.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node34 = node30.getNext();
        node30.setSourceEncodedPositionForTree(45);
        boolean boolean37 = node30.isFor();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildAfter(node13, node30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00236");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        com.google.javascript.rhino.Node node5 = node2.getAncestor((int) (short) 0);
        node5.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node5.getJsDocBuilderForNode();
        node5.setSourceFileForTesting("JSDocInfo");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean14 = node13.isContinue();
        int int15 = node13.getSourcePosition();
        com.google.javascript.rhino.Node node16 = node13.removeChildren();
        boolean boolean17 = node5.hasChild(node13);
        java.lang.Appendable appendable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            node5.appendStringTree(appendable18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 50");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00237");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node2.isCatch();
        boolean boolean41 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = null;
        int int46 = node44.getIndexOfChild(node45);
        node44.putProp((int) (short) 1, (java.lang.Object) 1);
        node44.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int53 = node44.getSideEffectFlags();
        boolean boolean54 = node44.isExprResult();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = node57.getParent();
        com.google.javascript.rhino.Node node60 = node57.getAncestor((int) (short) 0);
        node60.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder63 = node60.getJsDocBuilderForNode();
        node60.setSourceFileForTesting("JSDocInfo");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean69 = node68.isContinue();
        int int70 = node68.getSourcePosition();
        com.google.javascript.rhino.Node node71 = node68.removeChildren();
        boolean boolean72 = node60.hasChild(node68);
        // The following exception was thrown during execution in test generation
        try {
            node2.replaceChildAfter(node44, node60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder63);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test00238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00238");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList95.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor99 = typeList95.listIterator(37);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (37) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(typeList97);
    }

    @Test
    public void test00239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00239");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        java.lang.String[] strArray12 = new java.lang.String[] { "Not declared as a type name", "(hi!)", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.String[] strArray24 = new java.lang.String[] { "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "Not declared as a constructor", "((hi!))", "hi!", "JSDocInfo", "((hi!))", "Not declared as a type name", "Not declared as a constructor", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.lang.Object[] objArray27 = strSet25.toArray();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Iterator<java.lang.String> strItor36 = strSet34.iterator();
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList37 = com.google.common.collect.ImmutableList.of((java.util.AbstractSet<java.lang.String>) strSet6, (java.util.AbstractSet<java.lang.String>) strSet13, (java.util.AbstractSet<java.lang.String>) strSet25, (java.util.AbstractSet<java.lang.String>) strSet34);
        boolean boolean38 = strSet6.isEmpty();
        java.io.IOException iOException41 = new java.io.IOException("(hi!)");
        java.io.IOException iOException42 = new java.io.IOException("", (java.lang.Throwable) iOException41);
        java.io.IOException iOException46 = new java.io.IOException("(hi!)");
        java.io.IOException iOException47 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException46);
        java.io.IOException iOException48 = new java.io.IOException("java.io.IOException", (java.lang.Throwable) iOException46);
        java.lang.Throwable[] throwableArray49 = new java.lang.Throwable[] { iOException41, iOException48 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Throwable[] throwableArray50 = strSet6.toArray(throwableArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strSetList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(throwableArray49);
    }

    @Test
    public void test00240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00240");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        boolean boolean93 = typeList91.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.reflect.Type> typeItor95 = typeList91.listIterator((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (97) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test00241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00241");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.wasEmptyNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node15.isEquivalentToTyped(node19);
        boolean boolean27 = node15.isNumber();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node15.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node15.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator30 = nodeIterable29.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(nodeSpliterator30);
    }

    @Test
    public void test00242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00242");
        java.io.IOException iOException3 = new java.io.IOException("(hi!)");
        java.io.IOException iOException4 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException3);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList5 = com.google.common.collect.ImmutableList.of(iOException3);
        java.io.IOException iOException6 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException3);
        java.lang.String str7 = iOException6.toString();
        org.junit.Assert.assertNotNull(iOExceptionList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.io.IOException: ((hi!))" + "'", str7, "java.io.IOException: ((hi!))");
    }

    @Test
    public void test00243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00243");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        com.google.javascript.rhino.Node node5 = node2.getAncestor((int) (short) 0);
        boolean boolean6 = node5.isOnlyModifiesThisCall();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = node5.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR  is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00244");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean93 = typeList91.contains((java.lang.Object) "Unknown class name");
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor94 = typeList91.iterator();
        boolean boolean95 = typeList91.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test00245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00245");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.wasEmptyNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node15.isEquivalentToTyped(node19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node19, "");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression28);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression29);
    }

    @Test
    public void test00246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00246");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = null;
        int int18 = node16.getIndexOfChild(node17);
        node16.putProp((int) (short) 1, (java.lang.Object) 1);
        node16.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node25 = node12.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.isContinue();
        boolean boolean31 = node28.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(42, node25, node28, 42, (int) (byte) 100);
        boolean boolean35 = node25.isNE();
        int int36 = node2.getIndexOfChild(node25);
        com.google.javascript.rhino.Node node37 = null;
        boolean boolean38 = node25.hasChild(node37);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags40 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags40.setThrows();
        sideEffectFlags40.setReturnsTainted();
        sideEffectFlags40.setThrows();
        // The following exception was thrown during execution in test generation
        try {
            node25.setSideEffectFlags(sideEffectFlags40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00247");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator();
        java.util.ListIterator<java.lang.reflect.Type> typeItor95 = typeList91.listIterator(0);
        boolean boolean96 = typeList91.isEmpty();
        java.util.function.UnaryOperator<java.lang.reflect.Type> typeUnaryOperator97 = null;
        // The following exception was thrown during execution in test generation
        try {
            typeList91.replaceAll(typeUnaryOperator97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(typeItor95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test00248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00248");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.isContinue();
        int int5 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node6 = node3.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean10 = node9.hasChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node13.putProp((int) (short) 1, (java.lang.Object) 1);
        node13.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node22 = node9.useSourceInfoIfMissingFromForTree(node13);
        node22.addSuppression("");
        boolean boolean25 = node22.isReturn();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = null;
        node22.setJSDocInfo(jSDocInfo26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = null;
        int int33 = node31.getIndexOfChild(node32);
        node31.putProp((int) (short) 1, (java.lang.Object) 1);
        node31.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int40 = node31.getSideEffectFlags();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = null;
        int int48 = node46.getIndexOfChild(node47);
        node43.addChildToBack(node46);
        com.google.javascript.rhino.Node node50 = node43.getNext();
        com.google.javascript.rhino.Node node51 = node31.useSourceInfoFromForTree(node43);
        boolean boolean52 = node43.isNot();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(10, node43, (int) ' ', (int) '4');
        boolean boolean56 = node55.isQualifiedName();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean60 = node59.hasChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = null;
        int int65 = node63.getIndexOfChild(node64);
        node63.putProp((int) (short) 1, (java.lang.Object) 1);
        node63.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node72 = node59.useSourceInfoIfMissingFromForTree(node63);
        boolean boolean73 = node72.wasEmptyNode();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = null;
        int int78 = node76.getIndexOfChild(node77);
        node76.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean82 = node76.isDec();
        boolean boolean83 = node72.isEquivalentToTyped(node76);
        boolean boolean84 = node55.isEquivalentTo(node72);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node88 = node87.getParent();
        boolean boolean89 = node87.isArrayLit();
        node87.setOptionalArg(true);
        int int92 = node87.getType();
        boolean boolean93 = node87.isWhile();
        com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node(10, node3, node22, node55, node87, (int) (byte) -1, 50);
        // The following exception was thrown during execution in test generation
        try {
            node96.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test00249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00249");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        boolean boolean5 = node2.isThrow();
        boolean boolean6 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean15 = node9.isDec();
        boolean boolean16 = node9.isHook();
        boolean boolean17 = node9.isBreak();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(45);
        // The following exception was thrown during execution in test generation
        try {
            node2.replaceChildAfter(node9, node19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00250");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node2.isDebugger();
        java.lang.String str24 = node2.getSourceFileName();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = node2.getExistingIntProp(45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 45");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test00251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00251");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node8.addChildToBack(node11);
        boolean boolean15 = node11.isTypeOf();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean19 = node18.isContinue();
        node18.setQuotedString();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.hasChildren();
        com.google.javascript.rhino.Node node25 = node23.getLastSibling();
        node25.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = null;
        int int32 = node30.getIndexOfChild(node31);
        node30.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean36 = node30.isDec();
        com.google.javascript.rhino.Node node37 = node25.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node38 = node18.srcrefTree(node37);
        node38.setCharno(0);
        node11.addChildrenToBack(node38);
        boolean boolean42 = node38.isString();
        boolean boolean43 = strSet5.contains((java.lang.Object) boolean42);
        // The following exception was thrown during execution in test generation
        try {
            strSet5.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test00252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00252");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean93 = typeList91.contains((java.lang.Object) "Unknown class name");
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        boolean boolean95 = typeList94.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList98 = typeList94.subList(18, 47);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (47) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test00253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00253");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        com.google.javascript.rhino.Node node22 = node15.getNext();
        com.google.javascript.rhino.Node node23 = node3.useSourceInfoFromForTree(node15);
        boolean boolean24 = node15.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(10, node15, (int) ' ', (int) '4');
        boolean boolean28 = node15.isCase();
        boolean boolean29 = node15.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test00254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00254");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test00255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00255");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        java.lang.Class<?> wildcardClass11 = typePosition2.getClass();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        java.lang.Class<?> wildcardClass21 = node17.getClass();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList22 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass11, (java.lang.reflect.Type) wildcardClass21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type24 = typeList22.remove(5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeList22);
    }

    @Test
    public void test00256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00256");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        com.google.javascript.rhino.jstype.JSType jSType40 = node2.getJSType();
        com.google.javascript.rhino.Node node41 = node2.cloneTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node41.getJSDocInfo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(jSDocInfo42);
    }

    @Test
    public void test00257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00257");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList95.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        java.lang.String str98 = typeList97.toString();
        int int99 = typeList97.size();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str98, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 18 + "'", int99 == 18);
    }

    @Test
    public void test00258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00258");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "OR ");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00259");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet1.union(booleanLiteralSet3);
        boolean boolean6 = booleanLiteralSet3.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet7.union(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet3.union(booleanLiteralSet7);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = booleanLiteralSet3.union(booleanLiteralSet12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
    }

    @Test
    public void test00260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00260");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(0);
        boolean boolean3 = node2.isScript();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node6.addChildToBack(node9);
        boolean boolean13 = node9.isTypeOf();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean17 = node16.isContinue();
        node16.setQuotedString();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean22 = node21.hasChildren();
        com.google.javascript.rhino.Node node23 = node21.getLastSibling();
        node23.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean34 = node28.isDec();
        com.google.javascript.rhino.Node node35 = node23.useSourceInfoIfMissingFromForTree(node28);
        com.google.javascript.rhino.Node node36 = node16.srcrefTree(node35);
        node36.setCharno(0);
        node9.addChildrenToBack(node36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = null;
        int int44 = node42.getIndexOfChild(node43);
        node42.putProp((int) (short) 1, (java.lang.Object) 1);
        node42.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int51 = node42.getSideEffectFlags();
        boolean boolean52 = node42.isExprResult();
        boolean boolean53 = node42.wasEmptyNode();
        com.google.javascript.rhino.Node node54 = node36.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = null;
        int int59 = node57.getIndexOfChild(node58);
        node57.putProp((int) (short) 1, (java.lang.Object) 1);
        node57.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int66 = node57.getSideEffectFlags();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = null;
        int int74 = node72.getIndexOfChild(node73);
        node69.addChildToBack(node72);
        int int76 = node57.getIndexOfChild(node69);
        boolean boolean77 = node69.isVarArgs();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node2, node54, node69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test00261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00261");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        java.lang.String str95 = typeList91.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type97 = typeList91.remove(4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str95, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00262");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        boolean boolean5 = node2.isThrow();
        boolean boolean6 = node2.isInc();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(47, (int) (byte) 100, 45);
        com.google.javascript.rhino.Node node11 = node2.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        node14.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int23 = node14.getSideEffectFlags();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node26.addChildToBack(node29);
        int int33 = node14.getIndexOfChild(node26);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean37 = node36.hasChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = null;
        int int42 = node40.getIndexOfChild(node41);
        node40.putProp((int) (short) 1, (java.lang.Object) 1);
        node40.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node49 = node36.useSourceInfoIfMissingFromForTree(node40);
        boolean boolean50 = node49.wasEmptyNode();
        com.google.javascript.rhino.Node node51 = node14.useSourceInfoFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean53 = jSDocInfo52.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList54 = jSDocInfo52.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo52.getSuppressions();
        node49.setJSDocInfo(jSDocInfo52);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node57 = node2.removeChildAfter(node49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList54);
        org.junit.Assert.assertNotNull(strSet55);
    }

    @Test
    public void test00263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00263");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.reflect.Type> typeStream95 = typeList91.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type> typeList98 = typeList91.subList(41, 36);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (41) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeStream95);
    }

    @Test
    public void test00264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00264");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        boolean boolean22 = node2.isBreak();
        boolean boolean23 = node2.isDo();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = node2.useSourceInfoFromForTree(node27);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean32 = node31.hasChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node35.getIndexOfChild(node36);
        node35.putProp((int) (short) 1, (java.lang.Object) 1);
        node35.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node44 = node31.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        node35.setStaticSourceFile(staticSourceFile45);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node35.getStaticSourceFile();
        com.google.javascript.rhino.Node node48 = node35.getLastSibling();
        boolean boolean49 = node35.isVoid();
        boolean boolean50 = node28.hasChild(node35);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean54 = node53.hasChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = null;
        int int59 = node57.getIndexOfChild(node58);
        node57.putProp((int) (short) 1, (java.lang.Object) 1);
        node57.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node66 = node53.useSourceInfoIfMissingFromForTree(node57);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node67 = node28.getChildBefore(node53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test00265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00265");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isStringKey();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = null;
        int int10 = node8.getIndexOfChild(node9);
        node8.putProp((int) (short) 1, (java.lang.Object) 1);
        node8.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int17 = node8.getSideEffectFlags();
        boolean boolean18 = node8.isParamList();
        int int19 = node8.getLineno();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(30, node3, node8, 46, 38);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node25.addChildToBack(node28);
        java.util.Set<java.lang.String> strSet32 = node28.getDirectives();
        boolean boolean33 = node28.isFor();
        boolean boolean34 = node28.isIf();
        boolean boolean35 = node28.isScript();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node36 = node3.getChildBefore(node28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test00266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00266");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        boolean boolean26 = node16.isNE();
        boolean boolean27 = node16.hasChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(39, "JSDocInfo", 2, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            node16.removeChild(node32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
    }

    @Test
    public void test00267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00267");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        java.lang.String str9 = node2.getString();
        boolean boolean10 = node2.isScript();
        boolean boolean11 = node2.isGetProp();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node13 = node2.getChildAtIndex(38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00268");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        boolean boolean5 = node2.isThrow();
        boolean boolean6 = node2.isInc();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(47, (int) (byte) 100, 45);
        com.google.javascript.rhino.Node node11 = node2.useSourceInfoIfMissingFromForTree(node10);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node12 = node10.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test00269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00269");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        com.google.javascript.rhino.jstype.JSType jSType40 = node39.getJSType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node39.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node39.children();
        com.google.javascript.rhino.Node node43 = null;
        // The following exception was thrown during execution in test generation
        try {
            node39.addChildToBack(node43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertNotNull(nodeIterable42);
    }

    @Test
    public void test00270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00270");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.subList((int) (short) 0, 48);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (48) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
    }

    @Test
    public void test00271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00271");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00272");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        node3.setSourceEncodedPositionForTree(1);
        boolean boolean15 = node3.isCase();
        boolean boolean16 = node3.isThrow();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(1, node3);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean22 = node21.hasChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = null;
        int int27 = node25.getIndexOfChild(node26);
        node25.putProp((int) (short) 1, (java.lang.Object) 1);
        node25.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node34 = node21.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.isContinue();
        boolean boolean40 = node37.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(42, node34, node37, 42, (int) (byte) 100);
        boolean boolean44 = node43.isDec();
        com.google.javascript.rhino.Node node45 = node43.cloneTree();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node43.children();
        node43.setOptionalArg(false);
        com.google.javascript.rhino.Node node49 = node17.srcrefTree(node43);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags51 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags51.clearAllFlags();
        int int53 = sideEffectFlags51.valueOf();
        // The following exception was thrown during execution in test generation
        try {
            node17.setSideEffectFlags(sideEffectFlags51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
    }

    @Test
    public void test00273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00273");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        boolean boolean9 = node2.isBlock();
        boolean boolean10 = node2.isQualifiedName();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node13.putProp((int) (short) 1, (java.lang.Object) 1);
        node13.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int22 = node13.getSideEffectFlags();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node25.addChildToBack(node28);
        int int32 = node13.getIndexOfChild(node25);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean36 = node35.hasChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = null;
        int int41 = node39.getIndexOfChild(node40);
        node39.putProp((int) (short) 1, (java.lang.Object) 1);
        node39.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node48 = node35.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean49 = node48.wasEmptyNode();
        com.google.javascript.rhino.Node node50 = node13.useSourceInfoFrom(node48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean52 = jSDocInfo51.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList53 = jSDocInfo51.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet54 = jSDocInfo51.getSuppressions();
        node48.setJSDocInfo(jSDocInfo51);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean64 = node63.hasChildren();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = null;
        int int69 = node67.getIndexOfChild(node68);
        node67.putProp((int) (short) 1, (java.lang.Object) 1);
        node67.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node76 = node63.useSourceInfoIfMissingFromForTree(node67);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean80 = node79.isContinue();
        boolean boolean82 = node79.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(42, node76, node79, 42, (int) (byte) 100);
        boolean boolean86 = node76.isNE();
        com.google.javascript.rhino.Node node87 = node59.clonePropsFrom(node76);
        boolean boolean88 = node76.isGetProp();
        boolean boolean89 = node76.isHook();
        boolean boolean90 = node76.isFalse();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildrenAfter(node48, node76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test00274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00274");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean41 = jSDocInfo40.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList42 = jSDocInfo40.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo40.getSuppressions();
        node37.setJSDocInfo(jSDocInfo40);
        java.lang.String str45 = jSDocInfo40.getDescription();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = null;
        int int50 = node48.getIndexOfChild(node49);
        node48.putProp((int) (short) 1, (java.lang.Object) 1);
        node48.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int57 = node48.getSideEffectFlags();
        node48.setSourceEncodedPositionForTree(1);
        boolean boolean60 = node48.isCase();
        com.google.javascript.rhino.Node node61 = node48.getFirstChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean66 = node65.hasChildren();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = null;
        int int71 = node69.getIndexOfChild(node70);
        node69.putProp((int) (short) 1, (java.lang.Object) 1);
        node69.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node78 = node65.useSourceInfoIfMissingFromForTree(node69);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean82 = node81.isContinue();
        boolean boolean84 = node81.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(42, node78, node81, 42, (int) (byte) 100);
        boolean boolean88 = node78.isNE();
        boolean boolean89 = node78.hasChildren();
        com.google.javascript.rhino.Node node90 = node48.copyInformationFromForTree(node78);
        jSDocInfo40.setAssociatedNode(node48);
        int int92 = node48.getSourceOffset();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test00275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00275");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation((int) 'a', 35, (int) 'a', 48);
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation((int) 'a', 12, 52, 49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 97?end-line: 52");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00276");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type> typeList97 = typeList91.subList((int) (short) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (-1) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
    }

    @Test
    public void test00277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00277");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isGetterDef();
        java.lang.String str9 = node2.getString();
        boolean boolean10 = node2.isHook();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = null;
        int int18 = node16.getIndexOfChild(node17);
        node13.addChildToBack(node16);
        node13.putIntProp(54, 2);
        java.lang.String str23 = node13.getSourceFileName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean27 = node26.hasChildren();
        boolean boolean28 = node26.isAssignAdd();
        boolean boolean29 = node26.isDebugger();
        boolean boolean30 = node26.isFromExterns();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node26.getStaticSourceFile();
        boolean boolean32 = node26.isNew();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildrenAfter(node13, node26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test00278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00278");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int4 = typePosition3.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int6 = typePosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int9 = typePosition8.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList11 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition3, typePosition5, typePosition7, typePosition8, typePosition10);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int15 = typePosition14.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int20 = typePosition19.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList22 = com.google.common.collect.ImmutableList.of(typePosition12, typePosition14, typePosition16, typePosition18, typePosition19, typePosition21);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray24 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray25 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray24;
        nodeSourcePositionArray25[0] = typePosition7;
        nodeSourcePositionArray25[1] = typePosition21;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder30 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray25);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder31 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int33 = typePosition32.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int35 = typePosition34.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int37 = typePosition36.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int40 = typePosition39.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList42 = com.google.common.collect.ImmutableList.of(typePosition32, typePosition34, typePosition36, typePosition38, typePosition39, typePosition41);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int44 = typePosition43.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int46 = typePosition45.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int48 = typePosition47.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int51 = typePosition50.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList53 = com.google.common.collect.ImmutableList.of(typePosition43, typePosition45, typePosition47, typePosition49, typePosition50, typePosition52);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray55 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray56 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray55;
        nodeSourcePositionArray56[0] = typePosition38;
        nodeSourcePositionArray56[1] = typePosition52;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder61 = nodeSourcePositionBuilder31.add(nodeSourcePositionArray56);
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder62 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray56);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition63 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition64 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition65 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition66 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition67 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition68 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList69 = com.google.common.collect.ImmutableList.of(namePosition63, namePosition64, namePosition65, namePosition66, namePosition67, namePosition68);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder70 = nodeSourcePositionBuilder0.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition66);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition71 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int72 = typePosition71.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition73 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int74 = typePosition73.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition75 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int76 = typePosition75.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition77 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition78 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int79 = typePosition78.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition80 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList81 = com.google.common.collect.ImmutableList.of(typePosition71, typePosition73, typePosition75, typePosition77, typePosition78, typePosition80);
        int int82 = typePosition75.getStartLine();
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder83 = nodeSourcePositionBuilder70.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition75);
        int int84 = typePosition75.getEndLine();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(typePositionList11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(typePositionList22);
        org.junit.Assert.assertNotNull(sourcePositionArray24);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray25);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(typePositionList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(typePositionList53);
        org.junit.Assert.assertNotNull(sourcePositionArray55);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray56);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder61);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder62);
        org.junit.Assert.assertNotNull(namePositionList69);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(typePositionList81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test00279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00279");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.lang.String str93 = typeList91.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type> typeList96 = typeList91.subList((int) (byte) 10, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (32) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str93, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00280");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.lang.String str92 = typeList91.toString();
        java.lang.Object[] objArray93 = typeList91.toArray();
        java.lang.Object obj94 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = typeList91.remove(obj94);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str92, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00281");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.lang.Object[] objArray93 = typeList91.toArray();
        java.util.Iterator<java.lang.reflect.Type> typeItor94 = typeList91.iterator();
        java.util.function.UnaryOperator<java.lang.reflect.Type> typeUnaryOperator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            typeList91.replaceAll(typeUnaryOperator95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor94);
    }

    @Test
    public void test00282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00282");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList91.subList(5, 51);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (51) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertNotNull(typeList94);
    }

    @Test
    public void test00283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00283");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isDebugger();
        boolean boolean6 = node2.isFromExterns();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node2.getStaticSourceFile();
        boolean boolean8 = node2.isNew();
        boolean boolean9 = node2.isDefaultCase();
        node2.removeProp(31);
        // The following exception was thrown during execution in test generation
        try {
            node2.setSideEffectFlags(4095);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00284");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean93 = typeList91.contains((java.lang.Object) "Unknown class name");
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        boolean boolean95 = typeList94.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            typeList94.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test00285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00285");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        java.util.function.UnaryOperator<java.lang.reflect.Type> typeUnaryOperator94 = null;
        // The following exception was thrown during execution in test generation
        try {
            typeList91.replaceAll(typeUnaryOperator94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
    }

    @Test
    public void test00286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00286");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        node2.setVarArgs(false);
        java.util.Set<java.lang.String> strSet11 = node2.getDirectives();
        boolean boolean12 = node2.isThis();
        node2.setSourceEncodedPosition((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            node2.setDouble((double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR  0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00287");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        com.google.javascript.rhino.Node node5 = node2.getAncestor((int) (short) 0);
        node5.setType(50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = node5.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 50");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test00288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00288");
        java.lang.String[] strArray7 = new java.lang.String[] { "Not declared as a constructor", "Unknown class name", "Unknown class name", "(hi!)", "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "(hi!)", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        java.lang.Object[] objArray10 = strSet8.toArray();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node12 = typePosition11.getItem();
        boolean boolean13 = strSet8.contains((java.lang.Object) typePosition11);
        int int14 = typePosition11.getPositionOnStartLine();
        // The following exception was thrown during execution in test generation
        try {
            typePosition11.setPositionInformation(100, 51, 30, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 100?end-line: 30");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[Not declared as a constructor, Unknown class name, (hi!), InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[Not declared as a constructor, Unknown class name, (hi!), InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]]");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test00289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00289");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.javascript.rhino.JSDocInfo jSDocInfo92 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection93 = jSDocInfo92.getMarkers();
        java.util.Set<java.lang.String> strSet94 = jSDocInfo92.getParameterNames();
        boolean boolean95 = jSDocInfo92.isDeprecated();
        java.lang.String str96 = jSDocInfo92.getReturnDescription();
        boolean boolean97 = jSDocInfo92.isConstructor();
        int int98 = jSDocInfo92.getImplementedInterfaceCount();
        int int99 = typeList91.indexOf((java.lang.Object) int98);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(markerCollection93);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test00290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00290");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node22.isFor();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node26.putProp((int) (short) 1, (java.lang.Object) 1);
        node26.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int35 = node26.getSideEffectFlags();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = null;
        int int43 = node41.getIndexOfChild(node42);
        node38.addChildToBack(node41);
        int int45 = node26.getIndexOfChild(node38);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean49 = node48.hasChildren();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = null;
        int int54 = node52.getIndexOfChild(node53);
        node52.putProp((int) (short) 1, (java.lang.Object) 1);
        node52.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node61 = node48.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean62 = node61.wasEmptyNode();
        com.google.javascript.rhino.Node node63 = node26.useSourceInfoFrom(node61);
        com.google.javascript.rhino.jstype.JSType jSType64 = node63.getJSType();
        com.google.javascript.rhino.Node node65 = node22.useSourceInfoIfMissingFrom(node63);
        boolean boolean66 = node63.isArrayLit();
        java.lang.Appendable appendable67 = null;
        // The following exception was thrown during execution in test generation
        try {
            node63.appendStringTree(appendable67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(jSType64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test00291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00291");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        node3.setSourceEncodedPositionForTree(1);
        boolean boolean15 = node3.isCase();
        boolean boolean16 = node3.isThrow();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) ' ', 49, 32);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("(hi!)");
        boolean boolean23 = node22.isIn();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(38, node3, node20, node22, 39, (-1));
        // The following exception was thrown during execution in test generation
        try {
            node26.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test00292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00292");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        com.google.javascript.rhino.Node node10 = node5.getFirstChild();
        java.lang.Appendable appendable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            node5.appendStringTree(appendable11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test00293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00293");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        com.google.javascript.rhino.Node node11 = typePosition0.getItem();
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(48, 50, (int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 48?end-line: 32");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test00294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00294");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.wasEmptyNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node15.isEquivalentToTyped(node19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node19, "");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression28);
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeExpression28.evaluate(jSTypeStaticScope30, jSTypeRegistry31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression29);
    }

    @Test
    public void test00295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00295");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("hi!");
        java.lang.String str2 = inputId1.toString();
        java.lang.String str3 = inputId1.getIdName();
        java.lang.String str4 = inputId1.getIdName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "InputId: hi!" + "'", str2, "InputId: hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test00296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00296");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.reflect.Type> typeStream95 = typeList91.stream();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type98 = typeList96.get(54);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (54) must be less than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeStream95);
        org.junit.Assert.assertNotNull(typeList96);
    }

    @Test
    public void test00297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00297");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean41 = jSDocInfo40.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList42 = jSDocInfo40.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo40.getSuppressions();
        node37.setJSDocInfo(jSDocInfo40);
        java.lang.String str45 = jSDocInfo40.getDescription();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo40.getModifies();
        strSet46.clear();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strSet46);
    }

    @Test
    public void test00298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00298");
        java.lang.Comparable<java.lang.String> strComparable0 = null;
        java.lang.Comparable<java.lang.String> strComparable6 = null;
        java.lang.String[] strArray15 = new java.lang.String[] { "Named type with empty name component", "OR ", "java.io.IOException: Named type with empty name component" };
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList16 = com.google.common.collect.ImmutableList.of(strComparable0, (java.lang.Comparable<java.lang.String>) "Not declared as a constructor", (java.lang.Comparable<java.lang.String>) "java.io.IOException", (java.lang.Comparable<java.lang.String>) "((hi!))", (java.lang.Comparable<java.lang.String>) "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", (java.lang.Comparable<java.lang.String>) "false", strComparable6, (java.lang.Comparable<java.lang.String>) "OR ", (java.lang.Comparable<java.lang.String>) "Not declared as a type name", (java.lang.Comparable<java.lang.String>) "Not declared as a constructor", (java.lang.Comparable<java.lang.String>) "((hi!))", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>[]) strArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 0");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray15);
    }

    @Test
    public void test00299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00299");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "((hi!))");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00300");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.Collection<java.lang.reflect.Type> typeCollection96 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = typeList95.addAll(typeCollection96);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
    }

    @Test
    public void test00301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00301");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        node15.addSuppression("");
        boolean boolean18 = node15.isReturn();
        java.lang.Object obj20 = null;
        node15.putProp(10, obj20);
        boolean boolean22 = node15.isBlock();
        java.lang.Class<?> wildcardClass23 = node15.getClass();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test00302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00302");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo9.getParameterNames();
        node2.setJSDocInfo(jSDocInfo9);
        boolean boolean13 = node2.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node15 = node2.getChildAtIndex(51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00303");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = null;
        int int6 = node4.getIndexOfChild(node5);
        node4.putProp((int) (short) 1, (java.lang.Object) 1);
        node4.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int13 = node4.getSideEffectFlags();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node16.addChildToBack(node19);
        int int23 = node4.getIndexOfChild(node16);
        java.lang.Object obj25 = node4.getProp(49);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = node28.getParent();
        com.google.javascript.rhino.Node node31 = node28.getAncestor((int) (short) 0);
        node31.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node31.getJsDocBuilderForNode();
        node31.setSourceFileForTesting("JSDocInfo");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean40 = node39.isContinue();
        int int41 = node39.getSourcePosition();
        com.google.javascript.rhino.Node node42 = node39.removeChildren();
        boolean boolean43 = node31.hasChild(node39);
        boolean boolean44 = node39.isQuotedString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(44, node1, node4, node39, (int) (byte) 100, 53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test00304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00304");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean5 = node4.hasChildren();
        com.google.javascript.rhino.Node node6 = node4.getLastSibling();
        boolean boolean7 = node6.isOr();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = null;
        int int12 = node10.getIndexOfChild(node11);
        node10.putProp((int) (short) 1, (java.lang.Object) 1);
        node10.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int19 = node10.getSideEffectFlags();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = null;
        int int27 = node25.getIndexOfChild(node26);
        node22.addChildToBack(node25);
        com.google.javascript.rhino.Node node29 = node22.getNext();
        com.google.javascript.rhino.Node node30 = node10.useSourceInfoFromForTree(node22);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean34 = node33.isContinue();
        node33.setQuotedString();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean39 = node38.hasChildren();
        com.google.javascript.rhino.Node node40 = node38.getLastSibling();
        node40.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = null;
        int int47 = node45.getIndexOfChild(node46);
        node45.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean51 = node45.isDec();
        com.google.javascript.rhino.Node node52 = node40.useSourceInfoIfMissingFromForTree(node45);
        com.google.javascript.rhino.Node node53 = node33.srcrefTree(node52);
        boolean boolean54 = node52.isString();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(40, node6, node30, node52, (int) (byte) -1, 3);
        com.google.javascript.rhino.Node node59 = node6.getAncestor(32);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(12, node59, (int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(node59);
    }

    @Test
    public void test00305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00305");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node2.isCatch();
        boolean boolean41 = node2.isTrue();
        boolean boolean42 = node2.isCatch();
        com.google.javascript.rhino.Node node43 = node2.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            double double44 = node43.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node43);
    }

    @Test
    public void test00306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00306");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        boolean boolean96 = typeList95.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            typeList95.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test00307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00307");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        com.google.javascript.rhino.Node node5 = node2.getAncestor((int) (short) 0);
        node5.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node5.getJsDocBuilderForNode();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = node5.getExistingIntProp(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 10");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
    }

    @Test
    public void test00308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00308");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "java.io.IOException: (hi!)");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00309");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList95.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        java.lang.String str98 = typeList97.toString();
        // The following exception was thrown during execution in test generation
        try {
            typeList97.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str98, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00310");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        // The following exception was thrown during execution in test generation
        try {
            node2.setDouble((double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR  is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test00311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00311");
        com.google.common.collect.ImmutableList.Builder<com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>> nodeSourcePositionBuilderBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilderBuilder0);
    }

    @Test
    public void test00312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00312");
        java.io.IOException iOException2 = new java.io.IOException("(hi!)");
        java.io.IOException iOException3 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray4 = iOException3.getSuppressed();
        java.io.IOException iOException8 = new java.io.IOException("(hi!)");
        java.io.IOException iOException9 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException8);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList10 = com.google.common.collect.ImmutableList.of(iOException8);
        java.io.IOException iOException11 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException8);
        java.io.IOException iOException14 = new java.io.IOException("(hi!)");
        java.io.IOException iOException15 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException14);
        java.io.IOException iOException18 = new java.io.IOException("(hi!)");
        java.io.IOException iOException19 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException18);
        java.io.IOException iOException22 = new java.io.IOException("(hi!)");
        java.io.IOException iOException23 = new java.io.IOException("", (java.lang.Throwable) iOException22);
        java.io.IOException iOException27 = new java.io.IOException("(hi!)");
        java.io.IOException iOException28 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException27);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList29 = com.google.common.collect.ImmutableList.of(iOException27);
        java.io.IOException iOException30 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException27);
        java.io.IOException iOException32 = new java.io.IOException("(hi!)");
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList33 = com.google.common.collect.ImmutableList.of(iOException8, iOException15, iOException19, iOException23, iOException27, iOException32);
        java.io.IOException iOException36 = new java.io.IOException("(hi!)");
        java.io.IOException iOException37 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException36);
        java.io.IOException iOException40 = new java.io.IOException("(hi!)");
        java.io.IOException iOException41 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException40);
        java.lang.Throwable[] throwableArray42 = iOException41.getSuppressed();
        java.lang.Throwable throwable43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Throwable> throwableList44 = com.google.common.collect.ImmutableList.of((java.lang.Throwable) iOException3, (java.lang.Throwable) iOException32, (java.lang.Throwable) iOException36, (java.lang.Throwable) iOException41, throwable43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 4");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(iOExceptionList10);
        org.junit.Assert.assertNotNull(iOExceptionList29);
        org.junit.Assert.assertNotNull(iOExceptionList33);
        org.junit.Assert.assertNotNull(throwableArray42);
    }

    @Test
    public void test00313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00313");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator(2);
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor93);
    }

    @Test
    public void test00314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00314");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.isContinue();
        int int5 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node6 = node3.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean10 = node9.hasChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node13.putProp((int) (short) 1, (java.lang.Object) 1);
        node13.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node22 = node9.useSourceInfoIfMissingFromForTree(node13);
        node22.addSuppression("");
        boolean boolean25 = node22.isReturn();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = null;
        node22.setJSDocInfo(jSDocInfo26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = null;
        int int33 = node31.getIndexOfChild(node32);
        node31.putProp((int) (short) 1, (java.lang.Object) 1);
        node31.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int40 = node31.getSideEffectFlags();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = null;
        int int48 = node46.getIndexOfChild(node47);
        node43.addChildToBack(node46);
        com.google.javascript.rhino.Node node50 = node43.getNext();
        com.google.javascript.rhino.Node node51 = node31.useSourceInfoFromForTree(node43);
        boolean boolean52 = node43.isNot();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(10, node43, (int) ' ', (int) '4');
        boolean boolean56 = node55.isQualifiedName();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean60 = node59.hasChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = null;
        int int65 = node63.getIndexOfChild(node64);
        node63.putProp((int) (short) 1, (java.lang.Object) 1);
        node63.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node72 = node59.useSourceInfoIfMissingFromForTree(node63);
        boolean boolean73 = node72.wasEmptyNode();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = null;
        int int78 = node76.getIndexOfChild(node77);
        node76.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean82 = node76.isDec();
        boolean boolean83 = node72.isEquivalentToTyped(node76);
        boolean boolean84 = node55.isEquivalentTo(node72);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node88 = node87.getParent();
        boolean boolean89 = node87.isArrayLit();
        node87.setOptionalArg(true);
        int int92 = node87.getType();
        boolean boolean93 = node87.isWhile();
        com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node(10, node3, node22, node55, node87, (int) (byte) -1, 50);
        com.google.javascript.rhino.Node node98 = node96.getAncestor((int) (byte) 1);
        com.google.javascript.rhino.Node node99 = node96.cloneTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(node98);
        org.junit.Assert.assertNotNull(node99);
    }

    @Test
    public void test00315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00315");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        int int5 = node2.getLineno();
        java.lang.String str6 = node2.toString();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        node9.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int18 = node9.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node21.addChildToBack(node24);
        int int28 = node9.getIndexOfChild(node21);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean32 = node31.hasChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node35.getIndexOfChild(node36);
        node35.putProp((int) (short) 1, (java.lang.Object) 1);
        node35.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node44 = node31.useSourceInfoIfMissingFromForTree(node35);
        boolean boolean45 = node44.wasEmptyNode();
        com.google.javascript.rhino.Node node46 = node9.useSourceInfoFrom(node44);
        boolean boolean47 = node9.isCatch();
        boolean boolean48 = node9.isTrue();
        boolean boolean49 = node9.isCatch();
        com.google.javascript.rhino.Node node50 = node9.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node51 = node2.removeChildAfter(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR " + "'", str6, "OR ");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node50);
    }

    @Test
    public void test00316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00316");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        java.lang.String str9 = jSDocInfo5.getSourceName();
        java.lang.String str10 = jSDocInfo5.getLendsName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo5.getReturnType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test00317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00317");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        boolean boolean26 = node16.isNE();
        boolean boolean27 = node16.hasChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean31 = node30.hasChildren();
        boolean boolean32 = node30.isAssignAdd();
        boolean boolean33 = node30.isDebugger();
        boolean boolean34 = node30.isFromExterns();
        node30.setSourceEncodedPosition(35);
        boolean boolean37 = node30.isTypeOf();
        node16.addChildrenToFront(node30);
        boolean boolean39 = node30.isWith();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags41 = new com.google.javascript.rhino.Node.SideEffectFlags(49);
        sideEffectFlags41.setMutatesThis();
        sideEffectFlags41.setMutatesThis();
        sideEffectFlags41.setMutatesArguments();
        // The following exception was thrown during execution in test generation
        try {
            node30.setSideEffectFlags(sideEffectFlags41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test00318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00318");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(12, node4, 18, 50);
        com.google.javascript.rhino.jstype.JSType jSType8 = node7.getJSType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = node7.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: EQ 18 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(jSType8);
    }

    @Test
    public void test00319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00319");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        boolean boolean7 = jSDocInfo0.isInterface();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        boolean boolean14 = node12.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo15.getImplementedInterfaces();
        node12.setJSDocInfo(jSDocInfo15);
        java.lang.String str19 = jSDocInfo15.getMeaning();
        com.google.javascript.rhino.Node node20 = jSDocInfo15.getAssociatedNode();
        java.lang.String str21 = jSDocInfo15.getFileOverview();
        boolean boolean22 = jSDocInfo15.isConstructor();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = strSet9.remove((java.lang.Object) jSDocInfo15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00320");
        com.google.common.collect.ImmutableList.Builder<java.lang.Throwable[]> throwableArrayBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Throwable[]>();
    }

    @Test
    public void test00321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00321");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.util.ListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeItor93);
    }

    @Test
    public void test00322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00322");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "NUMBER 42.0 32");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00323");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(booleanLiteralSetList0);
    }

    @Test
    public void test00324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00324");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node8.addChildToBack(node11);
        boolean boolean15 = node11.isTypeOf();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean19 = node18.isContinue();
        node18.setQuotedString();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.hasChildren();
        com.google.javascript.rhino.Node node25 = node23.getLastSibling();
        node25.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = null;
        int int32 = node30.getIndexOfChild(node31);
        node30.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean36 = node30.isDec();
        com.google.javascript.rhino.Node node37 = node25.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node38 = node18.srcrefTree(node37);
        node38.setCharno(0);
        node11.addChildrenToBack(node38);
        boolean boolean42 = node38.isString();
        boolean boolean43 = strSet5.contains((java.lang.Object) boolean42);
        int int44 = strSet5.size();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test00325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00325");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        node3.setSourceEncodedPositionForTree(1);
        boolean boolean15 = node3.isCase();
        boolean boolean16 = node3.isThrow();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(1, node3);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean22 = node21.hasChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = null;
        int int27 = node25.getIndexOfChild(node26);
        node25.putProp((int) (short) 1, (java.lang.Object) 1);
        node25.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node34 = node21.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.isContinue();
        boolean boolean40 = node37.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(42, node34, node37, 42, (int) (byte) 100);
        boolean boolean44 = node43.isDec();
        com.google.javascript.rhino.Node node45 = node43.cloneTree();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node43.children();
        node43.setOptionalArg(false);
        com.google.javascript.rhino.Node node49 = node17.srcrefTree(node43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = null;
        int int54 = node52.getIndexOfChild(node53);
        node52.putProp((int) (short) 1, (java.lang.Object) 1);
        node52.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int61 = node52.getSideEffectFlags();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = null;
        int int69 = node67.getIndexOfChild(node68);
        node64.addChildToBack(node67);
        com.google.javascript.rhino.Node node71 = node64.getNext();
        com.google.javascript.rhino.Node node72 = node52.useSourceInfoFromForTree(node64);
        boolean boolean73 = node52.isAdd();
        boolean boolean74 = node52.isFunction();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node75 = node17.getChildBefore(node52);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test00326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00326");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node17 = node16.cloneNode();
        boolean boolean18 = node16.isOr();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = null;
        int int23 = node21.getIndexOfChild(node22);
        node21.putProp((int) (short) 1, (java.lang.Object) 1);
        node21.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int30 = node21.getSideEffectFlags();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = null;
        int int38 = node36.getIndexOfChild(node37);
        node33.addChildToBack(node36);
        int int40 = node21.getIndexOfChild(node33);
        boolean boolean41 = node21.isBreak();
        boolean boolean42 = node21.isDo();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node47 = node21.useSourceInfoFromForTree(node46);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 10L);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = null;
        int int57 = node55.getIndexOfChild(node56);
        node52.addChildToBack(node55);
        com.google.javascript.rhino.Node node59 = node52.getNext();
        boolean boolean60 = node52.isFalse();
        boolean boolean61 = node49.isEquivalentToTyped(node52);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = null;
        int int69 = node67.getIndexOfChild(node68);
        node64.addChildToBack(node67);
        boolean boolean71 = node67.isTypeOf();
        boolean boolean72 = node67.isDebugger();
        boolean boolean73 = node67.isDefaultCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(29, node16, node46, node49, node67, 30, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test00327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00327");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        boolean boolean96 = typeList91.isEmpty();
        java.lang.reflect.Type type98 = typeList91.get(8);
        java.util.ListIterator<java.lang.reflect.Type> typeItor99 = typeList91.listIterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(type98);
        org.junit.Assert.assertNotNull(typeItor99);
    }

    @Test
    public void test00328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00328");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node22.isFor();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node26.putProp((int) (short) 1, (java.lang.Object) 1);
        node26.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int35 = node26.getSideEffectFlags();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = null;
        int int43 = node41.getIndexOfChild(node42);
        node38.addChildToBack(node41);
        int int45 = node26.getIndexOfChild(node38);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean49 = node48.hasChildren();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = null;
        int int54 = node52.getIndexOfChild(node53);
        node52.putProp((int) (short) 1, (java.lang.Object) 1);
        node52.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node61 = node48.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean62 = node61.wasEmptyNode();
        com.google.javascript.rhino.Node node63 = node26.useSourceInfoFrom(node61);
        com.google.javascript.rhino.jstype.JSType jSType64 = node63.getJSType();
        com.google.javascript.rhino.Node node65 = node22.useSourceInfoIfMissingFrom(node63);
        boolean boolean66 = node63.isVarArgs();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags68 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags68.setThrows();
        sideEffectFlags68.clearAllFlags();
        boolean boolean71 = sideEffectFlags68.areAllFlagsSet();
        // The following exception was thrown during execution in test generation
        try {
            node63.setSideEffectFlags(sideEffectFlags68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(jSType64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test00329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00329");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        boolean boolean13 = node3.isParamList();
        int int14 = node3.getLineno();
        boolean boolean15 = node3.hasChildren();
        boolean boolean16 = node3.isBlock();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        node19.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int28 = node19.getSideEffectFlags();
        int int29 = node19.getChildCount();
        boolean boolean30 = node19.isIf();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean34 = node33.hasChildren();
        com.google.javascript.rhino.Node node35 = node33.getParent();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = null;
        int int40 = node38.getIndexOfChild(node39);
        node38.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean44 = node38.isDec();
        boolean boolean45 = node38.isHook();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(31, node3, node19, node33, node38);
        boolean boolean47 = node19.isAssign();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        node19.addChildToBack(node50);
        int int52 = node50.getLineno();
        boolean boolean53 = node50.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = null;
        int int58 = node56.getIndexOfChild(node57);
        node56.putProp((int) (short) 1, (java.lang.Object) 1);
        node56.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int65 = node56.getSideEffectFlags();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = null;
        int int73 = node71.getIndexOfChild(node72);
        node68.addChildToBack(node71);
        int int75 = node56.getIndexOfChild(node68);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean79 = node78.hasChildren();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = null;
        int int84 = node82.getIndexOfChild(node83);
        node82.putProp((int) (short) 1, (java.lang.Object) 1);
        node82.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node91 = node78.useSourceInfoIfMissingFromForTree(node82);
        boolean boolean92 = node91.wasEmptyNode();
        com.google.javascript.rhino.Node node93 = node56.useSourceInfoFrom(node91);
        com.google.javascript.rhino.JSDocInfo jSDocInfo94 = node91.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            node50.removeChild(node91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNull(jSDocInfo94);
    }

    @Test
    public void test00330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00330");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        java.lang.reflect.Type type95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type96 = typeList91.set(30, type95);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
    }

    @Test
    public void test00331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00331");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList91.subList(42, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (42) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
    }

    @Test
    public void test00332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00332");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type95 = typeList91.remove((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeStream93);
    }

    @Test
    public void test00333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00333");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList95.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream98 = typeList97.stream();
        java.util.Spliterator<java.lang.reflect.Type> typeSpliterator99 = typeList97.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertNotNull(typeStream98);
        org.junit.Assert.assertNotNull(typeSpliterator99);
    }

    @Test
    public void test00334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00334");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        boolean boolean4 = node3.isQualifiedName();
        java.lang.String str5 = node3.getQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR 10 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test00335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00335");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition95 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node96 = namePosition95.getItem();
        boolean boolean97 = typeList94.contains((java.lang.Object) namePosition95);
        int int98 = namePosition95.getStartLine();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test00336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00336");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        node4.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean15 = node9.isDec();
        com.google.javascript.rhino.Node node16 = node4.useSourceInfoIfMissingFromForTree(node9);
        node16.putBooleanProp(1, true);
        boolean boolean20 = node16.isQuotedString();
        boolean boolean21 = node16.isRegExp();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags23 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags23.setAllFlags();
        sideEffectFlags23.setMutatesGlobalState();
        sideEffectFlags23.setMutatesArguments();
        boolean boolean27 = sideEffectFlags23.areAllFlagsSet();
        sideEffectFlags23.clearAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node16.setSideEffectFlags(sideEffectFlags23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test00337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00337");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray6 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.util.Iterator<java.lang.String> strItor9 = strSet7.iterator();
        strSet7.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean12 = strSet7.equals((java.lang.Object) visibility11);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray22 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        java.util.Iterator<java.lang.String> strItor25 = strSet23.iterator();
        strSet23.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean28 = strSet23.equals((java.lang.Object) visibility27);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList29 = com.google.common.collect.ImmutableList.of(visibility0, visibility11, visibility13, visibility14, visibility15, visibility16, visibility27);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityEnum30 = null;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray38 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        java.util.Iterator<java.lang.String> strItor41 = strSet39.iterator();
        strSet39.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility43 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean44 = strSet39.equals((java.lang.Object) visibility43);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility46 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility48 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray54 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        java.util.Iterator<java.lang.String> strItor57 = strSet55.iterator();
        strSet55.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility59 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean60 = strSet55.equals((java.lang.Object) visibility59);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList61 = com.google.common.collect.ImmutableList.of(visibility32, visibility43, visibility45, visibility46, visibility47, visibility48, visibility59);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList62 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility15, visibilityEnum30, (java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility31, (java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 1");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + visibility13 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility13.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(visibilityList29);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility32 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility32.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertTrue("'" + visibility43 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility43.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + visibility45 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility45.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility46 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility46.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility47 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility47.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility48 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility48.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertTrue("'" + visibility59 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility59.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(visibilityList61);
    }

    @Test
    public void test00338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00338");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        java.util.Set<java.lang.String> strSet4 = node2.getDirectives();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = node7.getParent();
        boolean boolean9 = node7.isArrayLit();
        boolean boolean10 = node7.isThrow();
        boolean boolean11 = node7.isInstanceOf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        boolean boolean22 = node14.isFalse();
        node7.addChildrenToBack(node14);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(0, "Not declared as a constructor");
        boolean boolean27 = node14.isEquivalentToTyped(node26);
        com.google.javascript.rhino.Node node28 = node14.getFirstChild();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = null;
        int int33 = node31.getIndexOfChild(node32);
        node31.putProp((int) (short) 1, (java.lang.Object) 1);
        node31.putIntProp((int) (byte) 1, (int) (byte) 10);
        boolean boolean41 = node31.getBooleanProp(48);
        boolean boolean42 = node31.isLabelName();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildAfter(node28, node31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test00339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00339");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(36, "JSDocInfo", 2, 0);
        node4.setLength(50);
        boolean boolean7 = node4.isInc();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00340");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        boolean boolean93 = typeItor92.hasPrevious();
        java.lang.reflect.Type type94 = typeItor92.next();
        boolean boolean95 = typeItor92.hasNext();
        int int96 = typeItor92.previousIndex();
        java.lang.reflect.Type type97 = typeItor92.next();
        // The following exception was thrown during execution in test generation
        try {
            typeItor92.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(type97);
    }

    @Test
    public void test00341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00341");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node5 = node3.getLastSibling();
        boolean boolean6 = node5.isOr();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        node9.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int18 = node9.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node21.addChildToBack(node24);
        com.google.javascript.rhino.Node node28 = node21.getNext();
        com.google.javascript.rhino.Node node29 = node9.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.isContinue();
        node32.setQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        com.google.javascript.rhino.Node node39 = node37.getLastSibling();
        node39.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = null;
        int int46 = node44.getIndexOfChild(node45);
        node44.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean50 = node44.isDec();
        com.google.javascript.rhino.Node node51 = node39.useSourceInfoIfMissingFromForTree(node44);
        com.google.javascript.rhino.Node node52 = node32.srcrefTree(node51);
        boolean boolean53 = node51.isString();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(40, node5, node29, node51, (int) (byte) -1, 3);
        boolean boolean57 = node5.isVoid();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags59 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags59.setAllFlags();
        sideEffectFlags59.setMutatesGlobalState();
        sideEffectFlags59.setMutatesArguments();
        // The following exception was thrown during execution in test generation
        try {
            node5.setSideEffectFlags(sideEffectFlags59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test00342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00342");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.lang.Object[] objArray93 = typeList91.toArray();
        java.lang.reflect.Type type95 = null;
        // The following exception was thrown during execution in test generation
        try {
            typeList91.add((int) '#', type95);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00343");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        java.lang.String str2 = inputId1.toString();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean6 = node5.hasChildren();
        java.lang.Class<?> wildcardClass7 = node5.getClass();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean11 = node10.hasChildren();
        java.lang.Class<?> wildcardClass12 = node10.getClass();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean16 = node15.hasChildren();
        java.lang.Class<?> wildcardClass17 = node15.getClass();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean21 = node20.hasChildren();
        java.lang.Class<?> wildcardClass22 = node20.getClass();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean26 = node25.hasChildren();
        java.lang.Class<?> wildcardClass27 = node25.getClass();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean31 = node30.hasChildren();
        java.lang.Class<?> wildcardClass32 = node30.getClass();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean36 = node35.hasChildren();
        java.lang.Class<?> wildcardClass37 = node35.getClass();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean41 = node40.hasChildren();
        java.lang.Class<?> wildcardClass42 = node40.getClass();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean46 = node45.hasChildren();
        java.lang.Class<?> wildcardClass47 = node45.getClass();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean51 = node50.hasChildren();
        java.lang.Class<?> wildcardClass52 = node50.getClass();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean56 = node55.hasChildren();
        java.lang.Class<?> wildcardClass57 = node55.getClass();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean61 = node60.hasChildren();
        java.lang.Class<?> wildcardClass62 = node60.getClass();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean66 = node65.hasChildren();
        java.lang.Class<?> wildcardClass67 = node65.getClass();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean71 = node70.hasChildren();
        java.lang.Class<?> wildcardClass72 = node70.getClass();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean76 = node75.hasChildren();
        java.lang.Class<?> wildcardClass77 = node75.getClass();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean81 = node80.hasChildren();
        java.lang.Class<?> wildcardClass82 = node80.getClass();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean86 = node85.hasChildren();
        java.lang.Class<?> wildcardClass87 = node85.getClass();
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean91 = node90.hasChildren();
        java.lang.Class<?> wildcardClass92 = node90.getClass();
        java.lang.reflect.Type[] typeArray93 = new java.lang.reflect.Type[] { wildcardClass67, wildcardClass72, wildcardClass77, wildcardClass82, wildcardClass87, wildcardClass92 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass12, (java.lang.reflect.Type) wildcardClass17, (java.lang.reflect.Type) wildcardClass22, (java.lang.reflect.Type) wildcardClass27, (java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass42, (java.lang.reflect.Type) wildcardClass47, (java.lang.reflect.Type) wildcardClass52, (java.lang.reflect.Type) wildcardClass57, (java.lang.reflect.Type) wildcardClass62, typeArray93);
        java.util.ListIterator<java.lang.reflect.Type> typeItor95 = typeList94.listIterator();
        int int96 = typeItor95.nextIndex();
        boolean boolean97 = inputId1.equals((java.lang.Object) int96);
        java.lang.String str98 = inputId1.toString();
        java.lang.String str99 = inputId1.getIdName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str2, "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(typeArray93);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertNotNull(typeItor95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str98, "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str99, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00344");
        java.io.IOException iOException1 = new java.io.IOException("NUMBER 42.0 32");
    }

    @Test
    public void test00345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00345");
        java.io.IOException iOException3 = new java.io.IOException("(hi!)");
        java.io.IOException iOException4 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException3);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList5 = com.google.common.collect.ImmutableList.of(iOException3);
        java.io.IOException iOException6 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException3);
        java.io.IOException iOException9 = new java.io.IOException("(hi!)");
        java.io.IOException iOException10 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException9);
        java.io.IOException iOException13 = new java.io.IOException("(hi!)");
        java.io.IOException iOException14 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException13);
        java.io.IOException iOException17 = new java.io.IOException("(hi!)");
        java.io.IOException iOException18 = new java.io.IOException("", (java.lang.Throwable) iOException17);
        java.io.IOException iOException22 = new java.io.IOException("(hi!)");
        java.io.IOException iOException23 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException22);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList24 = com.google.common.collect.ImmutableList.of(iOException22);
        java.io.IOException iOException25 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException22);
        java.io.IOException iOException27 = new java.io.IOException("(hi!)");
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList28 = com.google.common.collect.ImmutableList.of(iOException3, iOException10, iOException14, iOException18, iOException22, iOException27);
        java.lang.String str29 = iOException14.toString();
        org.junit.Assert.assertNotNull(iOExceptionList5);
        org.junit.Assert.assertNotNull(iOExceptionList24);
        org.junit.Assert.assertNotNull(iOExceptionList28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.io.IOException: ((hi!))" + "'", str29, "java.io.IOException: ((hi!))");
    }

    @Test
    public void test00346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00346");
        com.google.common.collect.ImmutableList.Builder<com.google.common.collect.ImmutableCollection<java.lang.reflect.Type>> typeCollectionBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(typeCollectionBuilder0);
    }

    @Test
    public void test00347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00347");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test00348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00348");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getParent();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = node4.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test00349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00349");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("JSDocInfo");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(JSDocInfo)" + "'", str1, "(JSDocInfo)");
    }

    @Test
    public void test00350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00350");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        boolean boolean26 = node25.isDec();
        boolean boolean27 = node25.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test00351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00351");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean9 = node3.isDec();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean14 = node13.hasChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node17.putProp((int) (short) 1, (java.lang.Object) 1);
        node17.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node26 = node13.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean30 = node29.isContinue();
        boolean boolean32 = node29.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(42, node26, node29, 42, (int) (byte) 100);
        boolean boolean36 = node26.isNE();
        int int37 = node3.getIndexOfChild(node26);
        int int38 = node3.getChildCount();
        boolean boolean39 = node3.isDo();
        int int40 = node3.getLineno();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) 'a', node3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = node3.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test00352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00352");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(3, "java.io.IOException");
        // The following exception was thrown during execution in test generation
        try {
            node2.setSideEffectFlags(50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 3");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test00353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00353");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean5 = node4.isContinue();
        int int6 = node4.getSourcePosition();
        com.google.javascript.rhino.Node node7 = node4.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean11 = node10.hasChildren();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        node14.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node23 = node10.useSourceInfoIfMissingFromForTree(node14);
        node23.addSuppression("");
        boolean boolean26 = node23.isReturn();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node23.setJSDocInfo(jSDocInfo27);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node32.putProp((int) (short) 1, (java.lang.Object) 1);
        node32.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int41 = node32.getSideEffectFlags();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = null;
        int int49 = node47.getIndexOfChild(node48);
        node44.addChildToBack(node47);
        com.google.javascript.rhino.Node node51 = node44.getNext();
        com.google.javascript.rhino.Node node52 = node32.useSourceInfoFromForTree(node44);
        boolean boolean53 = node44.isNot();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(10, node44, (int) ' ', (int) '4');
        boolean boolean57 = node56.isQualifiedName();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean61 = node60.hasChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = null;
        int int66 = node64.getIndexOfChild(node65);
        node64.putProp((int) (short) 1, (java.lang.Object) 1);
        node64.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node73 = node60.useSourceInfoIfMissingFromForTree(node64);
        boolean boolean74 = node73.wasEmptyNode();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node78 = null;
        int int79 = node77.getIndexOfChild(node78);
        node77.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean83 = node77.isDec();
        boolean boolean84 = node73.isEquivalentToTyped(node77);
        boolean boolean85 = node56.isEquivalentTo(node73);
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node89 = node88.getParent();
        boolean boolean90 = node88.isArrayLit();
        node88.setOptionalArg(true);
        int int93 = node88.getType();
        boolean boolean94 = node88.isWhile();
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node(10, node4, node23, node56, node88, (int) (byte) -1, 50);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node98 = new com.google.javascript.rhino.Node(37, node56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 100 + "'", int93 == 100);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00354");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isStringKey();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = null;
        int int10 = node8.getIndexOfChild(node9);
        node8.putProp((int) (short) 1, (java.lang.Object) 1);
        node8.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int17 = node8.getSideEffectFlags();
        boolean boolean18 = node8.isParamList();
        int int19 = node8.getLineno();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(30, node3, node8, 46, 38);
        boolean boolean23 = node8.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node8.getNext();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.isContinue();
        boolean boolean29 = node27.isFromExterns();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = node32.getParent();
        boolean boolean34 = node32.isArrayLit();
        node32.setType(54);
        node32.setQuotedString();
        // The following exception was thrown during execution in test generation
        try {
            node8.addChildBefore(node27, node32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00355");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        boolean boolean93 = typeList91.isEmpty();
        java.util.ListIterator<java.lang.reflect.Type> typeItor94 = typeList91.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type95 = typeItor94.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeItor94);
    }

    @Test
    public void test00356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00356");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 10, 42, 4095);
        boolean boolean4 = node3.isAssign();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00357");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node2.isCatch();
        boolean boolean41 = node2.isTrue();
        boolean boolean42 = node2.isCatch();
        boolean boolean43 = node2.isLabel();
        node2.setVarArgs(false);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = null;
        int int50 = node48.getIndexOfChild(node49);
        node48.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean54 = node48.isDec();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = null;
        int int63 = node61.getIndexOfChild(node62);
        node61.putProp((int) (short) 1, (java.lang.Object) 1);
        node61.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node70 = node57.useSourceInfoIfMissingFromForTree(node61);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        node61.setStaticSourceFile(staticSourceFile71);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = node61.getStaticSourceFile();
        boolean boolean74 = node61.isCatch();
        node48.addChildToBack(node61);
        com.google.javascript.rhino.Node node76 = node2.useSourceInfoFromForTree(node61);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = node76.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(staticSourceFile73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
    }

    @Test
    public void test00358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00358");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet0.union(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet3.union(booleanLiteralSet4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
    }

    @Test
    public void test00359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00359");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "()" + "'", str1, "()");
    }

    @Test
    public void test00360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00360");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection3 = jSDocInfo0.getTypeNodes();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator4 = nodeCollection3.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNotNull(nodeCollection3);
        org.junit.Assert.assertNotNull(nodeSpliterator4);
    }

    @Test
    public void test00361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00361");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(hi!)");
        boolean boolean2 = node1.isIn();
        boolean boolean3 = node1.isArrayLit();
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING (hi!) is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00362");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        boolean boolean22 = node2.isBreak();
        boolean boolean23 = node2.isDo();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = node2.useSourceInfoFromForTree(node27);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean32 = node31.hasChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node35.getIndexOfChild(node36);
        node35.putProp((int) (short) 1, (java.lang.Object) 1);
        node35.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node44 = node31.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        node35.setStaticSourceFile(staticSourceFile45);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node35.getStaticSourceFile();
        com.google.javascript.rhino.Node node48 = node35.getLastSibling();
        boolean boolean49 = node35.isVoid();
        boolean boolean50 = node28.hasChild(node35);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = node28.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test00363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00363");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        boolean boolean93 = typeList91.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList91.subList(16, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (12) must not be less than start index (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test00364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00364");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        boolean boolean5 = node3.isAssignAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(41, node3);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR  is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
    }

    @Test
    public void test00365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00365");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        com.google.javascript.rhino.Node node5 = node2.getAncestor((int) (short) 0);
        node5.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node5.getJsDocBuilderForNode();
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        int int11 = node5.getIntProp(48);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test00366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00366");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        node2.setOptionalArg(true);
        boolean boolean7 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = null;
        int int12 = node10.getIndexOfChild(node11);
        node10.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean16 = node10.isDec();
        int int17 = node10.getLineno();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList18 = com.google.common.collect.ImmutableList.of(node2, node10);
        boolean boolean19 = node10.isOr();
        boolean boolean20 = node10.isFalse();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00367");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node.FileLevelJsDocBuilder> fileLevelJsDocBuilderBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderBuilder0);
    }

    @Test
    public void test00368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00368");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(42, 43, 45);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean9 = node8.isContinue();
        boolean boolean11 = node8.getBooleanProp((int) (byte) 100);
        boolean boolean12 = node8.isString();
        boolean boolean13 = node8.isNoSideEffectsCall();
        boolean boolean14 = node8.isTypeOf();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(18, node1, node5, node8, (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00369");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator(2);
        java.lang.reflect.Type type94 = typeItor93.previous();
        // The following exception was thrown during execution in test generation
        try {
            typeItor93.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(type94);
    }

    @Test
    public void test00370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00370");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.lang.Object[] objArray93 = typeList91.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type95 = typeList91.remove((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00371");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        java.util.ListIterator<java.lang.reflect.Type> typeItor94 = typeList91.listIterator();
        int int95 = typeItor94.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            typeItor94.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test00372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00372");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator();
        java.util.ListIterator<java.lang.reflect.Type> typeItor95 = typeList91.listIterator(0);
        java.lang.String str96 = typeList91.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList99 = typeList91.subList(4095, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (4095) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(typeItor95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str96, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00373");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor93 = typeList91.iterator();
        java.lang.String str94 = typeList91.toString();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor95 = typeList91.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str94, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor95);
    }

    @Test
    public void test00374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00374");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
    }

    @Test
    public void test00375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00375");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        boolean boolean4 = node3.isDo();
        boolean boolean5 = node3.isAssign();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node6 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00376");
        com.google.common.collect.ImmutableList.Builder<java.util.stream.BaseStream<java.lang.reflect.Type, java.util.stream.Stream<java.lang.reflect.Type>>> typeBaseStreamBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.util.stream.BaseStream<java.lang.reflect.Type, java.util.stream.Stream<java.lang.reflect.Type>>>();
    }

    @Test
    public void test00377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00377");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isStringKey();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = null;
        int int10 = node8.getIndexOfChild(node9);
        node8.putProp((int) (short) 1, (java.lang.Object) 1);
        node8.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int17 = node8.getSideEffectFlags();
        boolean boolean18 = node8.isParamList();
        int int19 = node8.getLineno();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(30, node3, node8, 46, 38);
        com.google.javascript.rhino.Node node23 = node8.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test00378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00378");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        java.lang.String str7 = jSDocInfo0.getLicense();
        boolean boolean9 = jSDocInfo0.hasParameter("hi!");
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        boolean boolean11 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00379");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node2.isCatch();
        boolean boolean41 = node2.isRegExp();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node43 = node2.getChildAtIndex(45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00380");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("java.io.IOException: Named type with empty name component");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(java.io.IOException: Named type with empty name component)" + "'", str1, "(java.io.IOException: Named type with empty name component)");
    }

    @Test
    public void test00381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00381");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node5 = node3.getLastSibling();
        boolean boolean6 = node5.isOr();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        node9.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int18 = node9.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node21.addChildToBack(node24);
        com.google.javascript.rhino.Node node28 = node21.getNext();
        com.google.javascript.rhino.Node node29 = node9.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.isContinue();
        node32.setQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        com.google.javascript.rhino.Node node39 = node37.getLastSibling();
        node39.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = null;
        int int46 = node44.getIndexOfChild(node45);
        node44.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean50 = node44.isDec();
        com.google.javascript.rhino.Node node51 = node39.useSourceInfoIfMissingFromForTree(node44);
        com.google.javascript.rhino.Node node52 = node32.srcrefTree(node51);
        boolean boolean53 = node51.isString();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(40, node5, node29, node51, (int) (byte) -1, 3);
        com.google.javascript.rhino.Node node57 = null;
        // The following exception was thrown during execution in test generation
        try {
            node51.addChildrenToBack(node57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test00382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00382");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        int int5 = node4.getLength();
        boolean boolean6 = node4.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node4.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
    }

    @Test
    public void test00383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00383");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        node3.setSourceEncodedPositionForTree(1);
        boolean boolean15 = node3.isCase();
        boolean boolean16 = node3.isThrow();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        node19.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int28 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = null;
        int int36 = node34.getIndexOfChild(node35);
        node31.addChildToBack(node34);
        com.google.javascript.rhino.Node node38 = node31.getNext();
        com.google.javascript.rhino.Node node39 = node19.useSourceInfoFromForTree(node31);
        boolean boolean40 = node39.isBreak();
        int int41 = node39.getLength();
        node3.addChildrenToFront(node39);
        int int43 = node39.getLength();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(45, node39, 39, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test00384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00384");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getLicense();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00385");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        boolean boolean96 = typeList91.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test00386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00386");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList95.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream98 = typeList95.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            typeList95.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertNotNull(typeStream98);
    }

    @Test
    public void test00387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00387");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        node2.setType(54);
        node2.setQuotedString();
        boolean boolean8 = node2.isNE();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node11.addChildToBack(node14);
        boolean boolean18 = node14.isTypeOf();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean22 = node21.isContinue();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean27 = node26.hasChildren();
        com.google.javascript.rhino.Node node28 = node26.getLastSibling();
        node28.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node33.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean39 = node33.isDec();
        com.google.javascript.rhino.Node node40 = node28.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node41 = node21.srcrefTree(node40);
        node41.setCharno(0);
        node14.addChildrenToBack(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = null;
        int int49 = node47.getIndexOfChild(node48);
        node47.putProp((int) (short) 1, (java.lang.Object) 1);
        node47.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int56 = node47.getSideEffectFlags();
        boolean boolean57 = node47.isExprResult();
        boolean boolean58 = node47.wasEmptyNode();
        com.google.javascript.rhino.Node node59 = node41.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = null;
        int int67 = node65.getIndexOfChild(node66);
        node62.addChildToBack(node65);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean70 = jSDocInfo69.isNoShadow();
        java.util.Set<java.lang.String> strSet71 = jSDocInfo69.getParameterNames();
        node62.setJSDocInfo(jSDocInfo69);
        node62.setLength(47);
        boolean boolean75 = node62.isFor();
        node47.addChildToFront(node62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = node2.checkTreeEquals(node62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 54");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test00388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00388");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList95.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        int int98 = typeList97.size();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 18 + "'", int98 == 18);
    }

    @Test
    public void test00389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00389");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean5 = node4.isContinue();
        boolean boolean6 = node4.isStringKey();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        node9.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int18 = node9.getSideEffectFlags();
        boolean boolean19 = node9.isParamList();
        int int20 = node9.getLineno();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(30, node4, node9, 46, 38);
        boolean boolean24 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node25 = node9.getNext();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.hasChildren();
        boolean boolean30 = node28.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean32 = jSDocInfo31.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo31.getImplementedInterfaces();
        node28.setJSDocInfo(jSDocInfo31);
        boolean boolean35 = node28.isLabel();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 1, node9, node28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test00390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00390");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(47, (int) (byte) 100, 45);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int15 = node6.getSideEffectFlags();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = null;
        int int23 = node21.getIndexOfChild(node22);
        node18.addChildToBack(node21);
        int int25 = node6.getIndexOfChild(node18);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.hasChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node32.putProp((int) (short) 1, (java.lang.Object) 1);
        node32.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node41 = node28.useSourceInfoIfMissingFromForTree(node32);
        boolean boolean42 = node41.wasEmptyNode();
        com.google.javascript.rhino.Node node43 = node6.useSourceInfoFrom(node41);
        boolean boolean44 = node6.isCatch();
        boolean boolean45 = node6.isTrue();
        boolean boolean46 = node6.isCatch();
        node6.setWasEmptyNode(false);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node49 = node3.removeChildAfter(node6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test00391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00391");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        com.google.javascript.rhino.Node node22 = node15.getNext();
        com.google.javascript.rhino.Node node23 = node3.useSourceInfoFromForTree(node15);
        boolean boolean24 = node15.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(10, node15, (int) ' ', (int) '4');
        boolean boolean28 = node15.isTry();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder29 = node15.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node32.putProp((int) (short) 1, (java.lang.Object) 1);
        node32.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int41 = node32.getSideEffectFlags();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = null;
        int int49 = node47.getIndexOfChild(node48);
        node44.addChildToBack(node47);
        com.google.javascript.rhino.Node node51 = node44.getNext();
        com.google.javascript.rhino.Node node52 = node32.useSourceInfoFromForTree(node44);
        boolean boolean53 = node52.isFor();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = null;
        int int58 = node56.getIndexOfChild(node57);
        node56.putProp((int) (short) 1, (java.lang.Object) 1);
        node56.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int65 = node56.getSideEffectFlags();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = null;
        int int73 = node71.getIndexOfChild(node72);
        node68.addChildToBack(node71);
        int int75 = node56.getIndexOfChild(node68);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean79 = node78.hasChildren();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = null;
        int int84 = node82.getIndexOfChild(node83);
        node82.putProp((int) (short) 1, (java.lang.Object) 1);
        node82.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node91 = node78.useSourceInfoIfMissingFromForTree(node82);
        boolean boolean92 = node91.wasEmptyNode();
        com.google.javascript.rhino.Node node93 = node56.useSourceInfoFrom(node91);
        com.google.javascript.rhino.jstype.JSType jSType94 = node93.getJSType();
        com.google.javascript.rhino.Node node95 = node52.useSourceInfoIfMissingFrom(node93);
        boolean boolean96 = node93.isVarArgs();
        java.lang.String str97 = node93.getString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node98 = node15.getChildBefore(node93);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNull(jSType94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test00392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00392");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        node2.setSourceEncodedPositionForTree(1);
        boolean boolean14 = node2.isCase();
        boolean boolean15 = node2.isFalse();
        int int16 = node2.getLineno();
        boolean boolean17 = node2.isContinue();
        java.lang.Appendable appendable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.appendStringTree(appendable18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00393");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        boolean boolean9 = node5.isTypeOf();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.isContinue();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.Node node19 = node17.getLastSibling();
        node19.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node24.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean30 = node24.isDec();
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = node12.srcrefTree(node31);
        node32.setCharno(0);
        node5.addChildrenToBack(node32);
        boolean boolean36 = node32.isString();
        node32.setSourceFileForTesting("(hi!)");
        // The following exception was thrown during execution in test generation
        try {
            node32.setSideEffectFlags(48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00394");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean93 = typeList91.contains((java.lang.Object) "Unknown class name");
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor94 = typeList91.iterator();
        // The following exception was thrown during execution in test generation
        try {
            typeItor94.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeItor94);
    }

    @Test
    public void test00395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00395");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList95.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        java.lang.String str98 = typeList97.toString();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor99 = typeList97.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str98, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor99);
    }

    @Test
    public void test00396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00396");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("java.io.IOException: ((hi!))");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(java.io.IOException: ((hi!)))" + "'", str1, "(java.io.IOException: ((hi!)))");
    }

    @Test
    public void test00397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00397");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList95.iterator();
        boolean boolean97 = typeList95.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type99 = typeList95.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test00398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00398");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        boolean boolean93 = typeItor92.hasPrevious();
        java.lang.reflect.Type type94 = typeItor92.next();
        // The following exception was thrown during execution in test generation
        try {
            typeItor92.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(type94);
    }

    @Test
    public void test00399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00399");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        java.lang.Class<?> wildcardClass11 = typePosition2.getClass();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        java.lang.Class<?> wildcardClass21 = node17.getClass();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList22 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass11, (java.lang.reflect.Type) wildcardClass21);
        java.lang.Object[] objArray23 = typeList22.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node26.putProp((int) (short) 1, (java.lang.Object) 1);
        node26.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int35 = node26.getSideEffectFlags();
        boolean boolean36 = node26.isParamList();
        int int37 = node26.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = typeList22.remove((java.lang.Object) int37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[class com.google.javascript.rhino.JSDocInfo$TypePosition, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[class com.google.javascript.rhino.JSDocInfo$TypePosition, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test00400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00400");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        boolean boolean9 = node5.isTypeOf();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.isContinue();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.Node node19 = node17.getLastSibling();
        node19.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node24.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean30 = node24.isDec();
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = node12.srcrefTree(node31);
        node32.setCharno(0);
        node5.addChildrenToBack(node32);
        boolean boolean36 = node32.isString();
        node32.setSourceFileForTesting("(hi!)");
        int int39 = node32.getChildCount();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test00401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00401");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        node3.setSourceEncodedPositionForTree(1);
        boolean boolean15 = node3.isCase();
        boolean boolean16 = node3.isThrow();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) ' ', 49, 32);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("(hi!)");
        boolean boolean23 = node22.isIn();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(38, node3, node20, node22, 39, (-1));
        boolean boolean27 = node26.isHook();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node30.addChildToBack(node33);
        boolean boolean37 = node30.isThrow();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node38 = node26.removeChildAfter(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00402");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        int int96 = typeList91.size();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor97 = typeList91.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type99 = typeList91.remove((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 18 + "'", int96 == 18);
        org.junit.Assert.assertNotNull(typeItor97);
    }

    @Test
    public void test00403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00403");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        java.lang.String str7 = jSDocInfo0.getLicense();
        boolean boolean8 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00404");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        boolean boolean5 = node2.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node6 = node2.getNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node6.getStaticSourceFile();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test00405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00405");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable12 = node2.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor13 = ancestorIterable12.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor14 = ancestorIterable12.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable12);
        org.junit.Assert.assertNotNull(nodeItor13);
        org.junit.Assert.assertNotNull(nodeItor14);
    }

    @Test
    public void test00406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00406");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean5 = node4.hasChildren();
        boolean boolean6 = node4.isAssignAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node4.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(41, node4);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean12 = node11.hasChildren();
        com.google.javascript.rhino.Node node13 = node11.getLastSibling();
        com.google.javascript.rhino.Node node14 = node4.useSourceInfoIfMissingFrom(node11);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(97, node4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test00407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00407");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        boolean boolean12 = node2.getBooleanProp(48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.isNoShadow();
        boolean boolean15 = jSDocInfo13.isConstant();
        java.lang.String str16 = jSDocInfo13.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection17 = jSDocInfo13.getMarkers();
        boolean boolean19 = jSDocInfo13.hasParameter("Not declared as a constructor");
        boolean boolean20 = jSDocInfo13.isDeprecated();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 10L);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node25.addChildToBack(node28);
        com.google.javascript.rhino.Node node32 = node25.getNext();
        boolean boolean33 = node25.isFalse();
        boolean boolean34 = node22.isEquivalentToTyped(node25);
        boolean boolean35 = node22.isIn();
        jSDocInfo13.setAssociatedNode(node22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = node2.checkTreeEquals(node22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(markerCollection17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test00408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00408");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        int int12 = node2.getChildCount();
        boolean boolean13 = node2.isIf();
        boolean boolean14 = node2.isLabel();
        node2.removeProp(0);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags18 = new com.google.javascript.rhino.Node.SideEffectFlags(49);
        sideEffectFlags18.setMutatesThis();
        sideEffectFlags18.clearAllFlags();
        sideEffectFlags18.setReturnsTainted();
        // The following exception was thrown during execution in test generation
        try {
            node2.setSideEffectFlags(sideEffectFlags18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00409");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        boolean boolean94 = typeList91.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type96 = typeList91.get(37);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (37) must be less than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00410");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        boolean boolean9 = node5.isTypeOf();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.isContinue();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.Node node19 = node17.getLastSibling();
        node19.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node24.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean30 = node24.isDec();
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = node12.srcrefTree(node31);
        node32.setCharno(0);
        node5.addChildrenToBack(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = null;
        int int40 = node38.getIndexOfChild(node39);
        node38.putProp((int) (short) 1, (java.lang.Object) 1);
        node38.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int47 = node38.getSideEffectFlags();
        boolean boolean48 = node38.isExprResult();
        boolean boolean49 = node38.wasEmptyNode();
        com.google.javascript.rhino.Node node50 = node32.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = null;
        int int58 = node56.getIndexOfChild(node57);
        node53.addChildToBack(node56);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean61 = jSDocInfo60.isNoShadow();
        java.util.Set<java.lang.String> strSet62 = jSDocInfo60.getParameterNames();
        node53.setJSDocInfo(jSDocInfo60);
        node53.setLength(47);
        boolean boolean66 = node53.isFor();
        node38.addChildToFront(node53);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(43, "");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node71 = node38.removeChildAfter(node70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
    }

    @Test
    public void test00411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00411");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        node4.setSourceFileForTesting("Not declared as a type name");
        java.lang.Appendable appendable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            node4.appendStringTree(appendable7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test00412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00412");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        com.google.javascript.rhino.Node node5 = node2.getAncestor((int) (short) 0);
        node5.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node5.getJsDocBuilderForNode();
        fileLevelJsDocBuilder8.append("((hi!))");
        fileLevelJsDocBuilder8.append("OR \n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
    }

    @Test
    public void test00413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00413");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node2.isCatch();
        boolean boolean41 = node2.isInstanceOf();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = node2.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00414");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node40 = node2.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test00415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00415");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = null;
        int int6 = node4.getIndexOfChild(node5);
        node4.putProp((int) (short) 1, (java.lang.Object) 1);
        node4.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int13 = node4.getSideEffectFlags();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node16.addChildToBack(node19);
        int int23 = node4.getIndexOfChild(node16);
        boolean boolean24 = node4.isBreak();
        boolean boolean25 = node4.isDo();
        boolean boolean26 = node4.isUnscopedQualifiedName();
        boolean boolean27 = node4.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(39, node4, 54, 35);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = new com.google.javascript.rhino.JSTypeExpression(node30, "java.io.IOException: Named type with empty name component");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = null;
        int int38 = node36.getIndexOfChild(node37);
        node36.putProp((int) (short) 1, (java.lang.Object) 1);
        node36.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int45 = node36.getSideEffectFlags();
        node36.setSourceEncodedPositionForTree(1);
        boolean boolean48 = node36.isCase();
        boolean boolean49 = node36.isThrow();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) ' ', 49, 32);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("(hi!)");
        boolean boolean56 = node55.isIn();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(38, node36, node53, node55, 39, (-1));
        int int60 = node53.getChildCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = new com.google.javascript.rhino.JSTypeExpression(node53, "([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean66 = node65.hasChildren();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = null;
        int int71 = node69.getIndexOfChild(node70);
        node69.putProp((int) (short) 1, (java.lang.Object) 1);
        node69.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node78 = node65.useSourceInfoIfMissingFromForTree(node69);
        boolean boolean79 = node78.wasEmptyNode();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = null;
        int int84 = node82.getIndexOfChild(node83);
        node82.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean88 = node82.isDec();
        boolean boolean89 = node78.isEquivalentToTyped(node82);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = new com.google.javascript.rhino.JSTypeExpression(node82, "");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression92 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression91);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList93 = com.google.common.collect.ImmutableList.of(jSTypeExpression0, jSTypeExpression32, jSTypeExpression62, jSTypeExpression91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 0");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression92);
    }

    @Test
    public void test00416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00416");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList95.iterator();
        boolean boolean97 = typeList95.isEmpty();
        java.lang.reflect.Type type99 = typeList95.get(1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(type99);
    }

    @Test
    public void test00417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00417");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        boolean boolean96 = typeList95.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.reflect.Type> typeItor98 = typeList95.listIterator(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (31) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test00418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00418");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.wasEmptyNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node15.isEquivalentToTyped(node19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node19, "");
        com.google.javascript.rhino.Node node29 = jSTypeExpression28.getRoot();
        boolean boolean30 = jSTypeExpression28.isOptionalArg();
        boolean boolean31 = jSTypeExpression28.isVarArgs();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test00419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00419");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        node2.setOptionalArg(true);
        int int7 = node2.getType();
        boolean boolean8 = node2.isLabelName();
        node2.setLength((int) (byte) 1);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = null;
        int int18 = node16.getIndexOfChild(node17);
        node13.addChildToBack(node16);
        node13.putIntProp(54, 2);
        java.lang.String str23 = node13.getSourceFileName();
        node13.setString("Unknown class name");
        com.google.javascript.rhino.Node node26 = node2.useSourceInfoFrom(node13);
        boolean boolean27 = node13.isAssign();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test00420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00420");
        java.io.IOException iOException2 = new java.io.IOException("(hi!)");
        java.io.IOException iOException3 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray4 = iOException3.getSuppressed();
        com.google.common.collect.ImmutableList<java.lang.Throwable> throwableList5 = com.google.common.collect.ImmutableList.copyOf(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableList5);
    }

    @Test
    public void test00421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00421");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        int int5 = node2.getLineno();
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.appendStringTree(appendable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test00422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00422");
        java.io.IOException iOException2 = new java.io.IOException("(hi!)");
        java.io.IOException iOException3 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException2);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList4 = com.google.common.collect.ImmutableList.of(iOException2);
        java.io.IOException iOException8 = new java.io.IOException("(hi!)");
        java.io.IOException iOException9 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException8);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList10 = com.google.common.collect.ImmutableList.of(iOException8);
        java.io.IOException iOException11 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException8);
        iOException2.addSuppressed((java.lang.Throwable) iOException8);
        java.io.IOException iOException15 = new java.io.IOException("(hi!)");
        java.io.IOException iOException16 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException15);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList17 = com.google.common.collect.ImmutableList.of(iOException15);
        java.io.IOException iOException20 = new java.io.IOException("(hi!)");
        java.io.IOException iOException21 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException20);
        iOException15.addSuppressed((java.lang.Throwable) iOException21);
        iOException8.addSuppressed((java.lang.Throwable) iOException15);
        java.io.IOException iOException25 = new java.io.IOException("OR \n");
        iOException8.addSuppressed((java.lang.Throwable) iOException25);
        java.lang.String str27 = iOException25.toString();
        org.junit.Assert.assertNotNull(iOExceptionList4);
        org.junit.Assert.assertNotNull(iOExceptionList10);
        org.junit.Assert.assertNotNull(iOExceptionList17);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.io.IOException: OR \n" + "'", str27, "java.io.IOException: OR \n");
    }

    @Test
    public void test00423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00423");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator();
        java.util.ListIterator<java.lang.reflect.Type> typeItor95 = typeList91.listIterator(0);
        java.lang.String str96 = typeList91.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor98 = typeList91.listIterator(45);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (45) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(typeItor95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str96, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00424");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node7.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node7.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node7.getLastSibling();
        boolean boolean21 = node7.isVoid();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = null;
        int int27 = node25.getIndexOfChild(node26);
        node25.putProp((int) (short) 1, (java.lang.Object) 1);
        node25.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int34 = node25.getSideEffectFlags();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = null;
        int int42 = node40.getIndexOfChild(node41);
        node37.addChildToBack(node40);
        com.google.javascript.rhino.Node node44 = node37.getNext();
        com.google.javascript.rhino.Node node45 = node25.useSourceInfoFromForTree(node37);
        boolean boolean46 = node37.isNot();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(10, node37, (int) ' ', (int) '4');
        boolean boolean50 = node49.isQualifiedName();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        boolean boolean55 = node54.isDo();
        com.google.javascript.rhino.Node node56 = node49.srcref(node54);
        boolean boolean57 = node56.isWith();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = null;
        int int62 = node60.getIndexOfChild(node61);
        node60.putProp((int) (short) 1, (java.lang.Object) 1);
        node60.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int69 = node60.getSideEffectFlags();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = null;
        int int77 = node75.getIndexOfChild(node76);
        node72.addChildToBack(node75);
        int int79 = node60.getIndexOfChild(node72);
        boolean boolean80 = node60.isBreak();
        boolean boolean81 = node60.isDo();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean85 = node84.hasChildren();
        com.google.javascript.rhino.Node node86 = node84.getLastSibling();
        int int87 = node86.getLength();
        node86.setIsSyntheticBlock(false);
        boolean boolean90 = node60.isEquivalentToTyped(node86);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) 1, node7, node56, node86);
        boolean boolean92 = node86.isRegExp();
        com.google.javascript.rhino.Node node93 = node86.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = node93.isComma();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(node93);
    }

    @Test
    public void test00425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00425");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        node4.setSourceFileForTesting("Not declared as a type name");
        boolean boolean7 = node4.isBreak();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = node4.hasChild(node8);
        // The following exception was thrown during execution in test generation
        try {
            node4.setDouble((double) 32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR  [source_file: Not declared as a type name] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00426");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node2.getAncestors();
        boolean boolean17 = node2.hasChildren();
        com.google.javascript.rhino.Node node18 = node2.cloneNode();
        boolean boolean19 = node18.isLocalResultCall();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node20 = node18.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(ancestorIterable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00427");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        node2.setType(54);
        com.google.javascript.rhino.Node node7 = node2.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = node7.isStringKey();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test00428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00428");
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = com.google.common.collect.ImmutableList.of("OR \n");
        org.junit.Assert.assertNotNull(strList1);
    }

    @Test
    public void test00429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00429");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList95.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream98 = typeList97.stream();
        java.lang.Object[] objArray99 = typeList97.toArray();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertNotNull(typeStream98);
        org.junit.Assert.assertNotNull(objArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray99), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray99), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00430");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node6.setJSType(jSType19);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = null;
        int int25 = node23.getIndexOfChild(node24);
        node23.putProp((int) (short) 1, (java.lang.Object) 1);
        node23.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int32 = node23.getSideEffectFlags();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = null;
        int int40 = node38.getIndexOfChild(node39);
        node35.addChildToBack(node38);
        int int42 = node23.getIndexOfChild(node35);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean46 = node45.hasChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = null;
        int int51 = node49.getIndexOfChild(node50);
        node49.putProp((int) (short) 1, (java.lang.Object) 1);
        node49.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node58 = node45.useSourceInfoIfMissingFromForTree(node49);
        boolean boolean59 = node58.wasEmptyNode();
        com.google.javascript.rhino.Node node60 = node23.useSourceInfoFrom(node58);
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node58.getJSDocInfo();
        com.google.javascript.rhino.Node node62 = node58.getNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node63 = node6.useSourceInfoFromForTree(node62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertNull(node62);
    }

    @Test
    public void test00431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00431");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node14.isNot();
        node14.setWasEmptyNode(true);
        boolean boolean26 = node14.isNumber();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test00432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00432");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        boolean boolean12 = node2.getBooleanProp(48);
        // The following exception was thrown during execution in test generation
        try {
            node2.setSideEffectFlags(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00433");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor9 = strSet8.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = strSet8.add("JSDocInfo");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strItor9);
    }

    @Test
    public void test00434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00434");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition95 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node96 = namePosition95.getItem();
        boolean boolean97 = typeList94.contains((java.lang.Object) namePosition95);
        int int98 = namePosition95.getPositionOnStartLine();
        int int99 = namePosition95.getPositionOnStartLine();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test00435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00435");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator();
        java.lang.reflect.Type type94 = typeItor93.next();
        // The following exception was thrown during execution in test generation
        try {
            typeItor93.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(type94);
    }

    @Test
    public void test00436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00436");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean9 = node3.isGetterDef();
        boolean boolean10 = node3.isInc();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(32, node3, 3, 1);
        java.lang.String str14 = node3.getQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test00437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00437");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node5 = node3.getLastSibling();
        boolean boolean6 = node5.isOr();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 100, (int) '#', 32);
        java.lang.String str12 = node11.getQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        node16.setCharno(3);
        boolean boolean19 = node11.hasChild(node16);
        boolean boolean20 = node11.isFor();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node23.addChildToBack(node26);
        boolean boolean30 = node26.isTypeOf();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean34 = node33.isContinue();
        node33.setQuotedString();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean39 = node38.hasChildren();
        com.google.javascript.rhino.Node node40 = node38.getLastSibling();
        node40.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = null;
        int int47 = node45.getIndexOfChild(node46);
        node45.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean51 = node45.isDec();
        com.google.javascript.rhino.Node node52 = node40.useSourceInfoIfMissingFromForTree(node45);
        com.google.javascript.rhino.Node node53 = node33.srcrefTree(node52);
        node53.setCharno(0);
        node26.addChildrenToBack(node53);
        boolean boolean57 = node53.isString();
        boolean boolean58 = node53.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = node53.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(36, node5, node7, node11, node53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSDocInfo59);
    }

    @Test
    public void test00438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00438");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        node1.setSourceFileForTesting("Unknown class name");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test00439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00439");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        boolean boolean26 = node25.isDec();
        com.google.javascript.rhino.Node node27 = node25.cloneTree();
        node25.addSuppression("");
        boolean boolean30 = node25.isAnd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test00440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00440");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation((int) '4', 0, 50, 48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 52?end-line: 50");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00441");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getPositionOnEndLine();
        java.lang.String str4 = stringPosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00442");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition4 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList6 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition2, namePosition3, namePosition4, namePosition5);
        // The following exception was thrown during execution in test generation
        try {
            namePosition1.setPositionInformation(53, 53, 0, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 53?end-line: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namePositionList6);
    }

    @Test
    public void test00443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00443");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = null;
        int int6 = node4.getIndexOfChild(node5);
        node4.putProp((int) (short) 1, (java.lang.Object) 1);
        node4.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int13 = node4.getSideEffectFlags();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node16.addChildToBack(node19);
        int int23 = node4.getIndexOfChild(node16);
        boolean boolean24 = node16.isVarArgs();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] { node16 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(39, nodeArray25);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '4', nodeArray25, 18, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray25);
    }

    @Test
    public void test00444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00444");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet0.union(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet2.union(booleanLiteralSet4);
        boolean boolean7 = booleanLiteralSet4.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test00445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00445");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        int int5 = node4.getLength();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node8.addChildToBack(node11);
        java.util.Set<java.lang.String> strSet15 = node11.getDirectives();
        boolean boolean16 = node11.isFor();
        int int17 = node11.getType();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        com.google.javascript.rhino.Node node20 = node19.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildBefore(node11, node19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test00446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00446");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        boolean boolean12 = node2.isParamList();
        node2.setVarArgs(true);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node18.putProp((int) (short) 1, (java.lang.Object) 1);
        node18.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int27 = node18.getSideEffectFlags();
        boolean boolean28 = node18.isParamList();
        int int29 = node18.getLineno();
        boolean boolean30 = node18.hasChildren();
        boolean boolean31 = node18.isBlock();
        int int32 = node18.getCharno();
        node2.putProp(40, (java.lang.Object) node18);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = null;
        int int38 = node36.getIndexOfChild(node37);
        node36.putProp((int) (short) 1, (java.lang.Object) 1);
        node36.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int45 = node36.getSideEffectFlags();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = null;
        int int53 = node51.getIndexOfChild(node52);
        node48.addChildToBack(node51);
        int int55 = node36.getIndexOfChild(node48);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean59 = node58.hasChildren();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = null;
        int int64 = node62.getIndexOfChild(node63);
        node62.putProp((int) (short) 1, (java.lang.Object) 1);
        node62.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node71 = node58.useSourceInfoIfMissingFromForTree(node62);
        boolean boolean72 = node71.wasEmptyNode();
        com.google.javascript.rhino.Node node73 = node36.useSourceInfoFrom(node71);
        com.google.javascript.rhino.jstype.JSType jSType74 = node73.getJSType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node73.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable76 = node73.children();
        com.google.javascript.rhino.Node node77 = null;
        node18.addChildrenAfter(node73, node77);
        int int79 = node73.getLineno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(jSType74);
        org.junit.Assert.assertNotNull(nodeIterable75);
        org.junit.Assert.assertNotNull(nodeIterable76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
    }

    @Test
    public void test00447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00447");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.lang.Object[] objArray93 = typeList91.toArray();
        java.util.Iterator<java.lang.reflect.Type> typeItor94 = typeList91.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type96 = typeList91.get((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (-1) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor94);
    }

    @Test
    public void test00448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00448");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean8 = jSDocInfo0.hasParameterType("java.io.IOException: Named type with empty name component");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00449");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        node22.setCharno(0);
        boolean boolean25 = node22.isAdd();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.hasChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node32.putProp((int) (short) 1, (java.lang.Object) 1);
        node32.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node41 = node28.useSourceInfoIfMissingFromForTree(node32);
        boolean boolean42 = node22.hasChild(node32);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean46 = node45.hasChildren();
        com.google.javascript.rhino.Node node47 = node45.getLastSibling();
        int int48 = node45.getLineno();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = null;
        int int54 = node52.getIndexOfChild(node53);
        node52.putProp((int) (short) 1, (java.lang.Object) 1);
        node52.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int61 = node52.getSideEffectFlags();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = null;
        int int69 = node67.getIndexOfChild(node68);
        node64.addChildToBack(node67);
        com.google.javascript.rhino.Node node71 = node64.getNext();
        com.google.javascript.rhino.Node node72 = node52.useSourceInfoFromForTree(node64);
        boolean boolean73 = node64.isNot();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(10, node64, (int) ' ', (int) '4');
        boolean boolean77 = node76.isQualifiedName();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        boolean boolean82 = node81.isDo();
        com.google.javascript.rhino.Node node83 = node76.srcref(node81);
        boolean boolean84 = node76.isThis();
        // The following exception was thrown during execution in test generation
        try {
            node32.replaceChild(node45, node76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test00450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00450");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        boolean boolean9 = node2.isThrow();
        node2.setSourceEncodedPositionForTree(1);
        node2.setCharno(49);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 10, 42, 4095);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = null;
        int int23 = node21.getIndexOfChild(node22);
        node21.putProp((int) (short) 1, (java.lang.Object) 1);
        node21.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int30 = node21.getSideEffectFlags();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = null;
        int int38 = node36.getIndexOfChild(node37);
        node33.addChildToBack(node36);
        int int40 = node21.getIndexOfChild(node33);
        boolean boolean41 = node21.isBreak();
        boolean boolean42 = node21.isDo();
        boolean boolean43 = node21.isUnscopedQualifiedName();
        boolean boolean44 = node21.isParamList();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(39, node21, 54, 35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean50 = jSDocInfo49.isNoShadow();
        boolean boolean51 = jSDocInfo49.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo49.getParameterType("hi!");
        boolean boolean54 = jSDocInfo49.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo49.getReturnType();
        node21.putProp(38, (java.lang.Object) jSDocInfo49);
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildrenAfter(node17, node21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression55);
    }

    @Test
    public void test00451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00451");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int4 = typePosition3.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int6 = typePosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int9 = typePosition8.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList11 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition3, typePosition5, typePosition7, typePosition8, typePosition10);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int15 = typePosition14.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int20 = typePosition19.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList22 = com.google.common.collect.ImmutableList.of(typePosition12, typePosition14, typePosition16, typePosition18, typePosition19, typePosition21);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray24 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray25 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray24;
        nodeSourcePositionArray25[0] = typePosition7;
        nodeSourcePositionArray25[1] = typePosition21;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder30 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray25);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder31 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int33 = typePosition32.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int35 = typePosition34.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int37 = typePosition36.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int40 = typePosition39.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList42 = com.google.common.collect.ImmutableList.of(typePosition32, typePosition34, typePosition36, typePosition38, typePosition39, typePosition41);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int44 = typePosition43.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int46 = typePosition45.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int48 = typePosition47.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int51 = typePosition50.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList53 = com.google.common.collect.ImmutableList.of(typePosition43, typePosition45, typePosition47, typePosition49, typePosition50, typePosition52);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray55 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray56 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray55;
        nodeSourcePositionArray56[0] = typePosition38;
        nodeSourcePositionArray56[1] = typePosition52;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder61 = nodeSourcePositionBuilder31.add(nodeSourcePositionArray56);
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder62 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray56);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition63 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition64 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition65 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition66 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition67 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition68 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList69 = com.google.common.collect.ImmutableList.of(namePosition63, namePosition64, namePosition65, namePosition66, namePosition67, namePosition68);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder70 = nodeSourcePositionBuilder0.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition66);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition71 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node72 = typePosition71.getItem();
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder73 = nodeSourcePositionBuilder70.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition71);
        // The following exception was thrown during execution in test generation
        try {
            typePosition71.setPositionInformation(39, 38, 1, 48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 39?end-line: 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(typePositionList11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(typePositionList22);
        org.junit.Assert.assertNotNull(sourcePositionArray24);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray25);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(typePositionList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(typePositionList53);
        org.junit.Assert.assertNotNull(sourcePositionArray55);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray56);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder61);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder62);
        org.junit.Assert.assertNotNull(namePositionList69);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder73);
    }

    @Test
    public void test00452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00452");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        com.google.common.collect.ImmutableList<java.lang.Object> objList95 = com.google.common.collect.ImmutableList.copyOf((java.util.Collection<java.lang.reflect.Type>) typeList94);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type97 = typeList94.remove(37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertNotNull(objList95);
    }

    @Test
    public void test00453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00453");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int4 = typePosition3.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int6 = typePosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int9 = typePosition8.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList11 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition3, typePosition5, typePosition7, typePosition8, typePosition10);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int15 = typePosition14.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int20 = typePosition19.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList22 = com.google.common.collect.ImmutableList.of(typePosition12, typePosition14, typePosition16, typePosition18, typePosition19, typePosition21);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray24 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray25 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray24;
        nodeSourcePositionArray25[0] = typePosition7;
        nodeSourcePositionArray25[1] = typePosition21;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder30 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray25);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder31 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int33 = typePosition32.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int35 = typePosition34.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int37 = typePosition36.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int40 = typePosition39.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList42 = com.google.common.collect.ImmutableList.of(typePosition32, typePosition34, typePosition36, typePosition38, typePosition39, typePosition41);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int44 = typePosition43.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int46 = typePosition45.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int48 = typePosition47.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int51 = typePosition50.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList53 = com.google.common.collect.ImmutableList.of(typePosition43, typePosition45, typePosition47, typePosition49, typePosition50, typePosition52);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray55 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray56 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray55;
        nodeSourcePositionArray56[0] = typePosition38;
        nodeSourcePositionArray56[1] = typePosition52;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder61 = nodeSourcePositionBuilder31.add(nodeSourcePositionArray56);
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder62 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray56);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList63 = com.google.common.collect.ImmutableList.copyOf(nodeSourcePositionArray56);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(typePositionList11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(typePositionList22);
        org.junit.Assert.assertNotNull(sourcePositionArray24);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray25);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(typePositionList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(typePositionList53);
        org.junit.Assert.assertNotNull(sourcePositionArray55);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray56);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder61);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder62);
        org.junit.Assert.assertNotNull(nodeSourcePositionList63);
    }

    @Test
    public void test00454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00454");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        node4.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean15 = node9.isDec();
        com.google.javascript.rhino.Node node16 = node4.useSourceInfoIfMissingFromForTree(node9);
        node16.putBooleanProp(1, true);
        boolean boolean20 = node16.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.hasChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = null;
        int int29 = node27.getIndexOfChild(node28);
        node27.putProp((int) (short) 1, (java.lang.Object) 1);
        node27.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable37 = node23.getAncestors();
        boolean boolean38 = node23.hasChildren();
        com.google.javascript.rhino.Node node39 = null;
        // The following exception was thrown during execution in test generation
        try {
            node16.replaceChildAfter(node23, node39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(ancestorIterable37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00455");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        int int22 = node3.getIndexOfChild(node15);
        boolean boolean23 = node3.isBreak();
        boolean boolean24 = node3.isDo();
        boolean boolean25 = node3.isUnscopedQualifiedName();
        boolean boolean26 = node3.isParamList();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(39, node3, 54, 35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean32 = jSDocInfo31.isNoShadow();
        boolean boolean33 = jSDocInfo31.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo31.getParameterType("hi!");
        boolean boolean36 = jSDocInfo31.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo31.getReturnType();
        node3.putProp(38, (java.lang.Object) jSDocInfo31);
        boolean boolean40 = jSDocInfo31.hasParameterType("ERROR");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00456");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 10L);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node4.addChildToBack(node7);
        com.google.javascript.rhino.Node node11 = node4.getNext();
        boolean boolean12 = node4.isFalse();
        boolean boolean13 = node1.isEquivalentToTyped(node4);
        boolean boolean14 = node1.isIn();
        boolean boolean16 = node1.getBooleanProp(15);
        com.google.javascript.rhino.Node node17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFromForTree(node17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test00457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00457");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList95.reverse();
        java.util.ListIterator<java.lang.reflect.Type> typeItor98 = typeList96.listIterator((int) (byte) 0);
        boolean boolean99 = typeItor98.hasNext();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertNotNull(typeItor98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test00458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00458");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        int int5 = jSDocInfo0.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        boolean boolean7 = jSDocInfo0.hasModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00459");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        java.util.ListIterator<java.lang.reflect.Type> typeItor96 = typeList95.listIterator();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition97 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int98 = stringPosition97.getPositionOnStartLine();
        int int99 = typeList95.lastIndexOf((java.lang.Object) stringPosition97);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test00460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00460");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("java.io.IOException");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(java.io.IOException)" + "'", str1, "(java.io.IOException)");
    }

    @Test
    public void test00461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00461");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int4 = typePosition3.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int6 = typePosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int9 = typePosition8.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList11 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition3, typePosition5, typePosition7, typePosition8, typePosition10);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int15 = typePosition14.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int20 = typePosition19.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList22 = com.google.common.collect.ImmutableList.of(typePosition12, typePosition14, typePosition16, typePosition18, typePosition19, typePosition21);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray24 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray25 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray24;
        nodeSourcePositionArray25[0] = typePosition7;
        nodeSourcePositionArray25[1] = typePosition21;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder30 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray25);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int32 = typePosition31.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int36 = typePosition35.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int39 = typePosition38.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList41 = com.google.common.collect.ImmutableList.of(typePosition31, typePosition33, typePosition35, typePosition37, typePosition38, typePosition40);
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder42 = nodeSourcePositionBuilder30.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition40);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder43 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int45 = typePosition44.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int47 = typePosition46.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int49 = typePosition48.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition51 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int52 = typePosition51.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition53 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList54 = com.google.common.collect.ImmutableList.of(typePosition44, typePosition46, typePosition48, typePosition50, typePosition51, typePosition53);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition55 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int56 = typePosition55.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition57 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int58 = typePosition57.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition59 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int60 = typePosition59.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition61 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition62 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int63 = typePosition62.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition64 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList65 = com.google.common.collect.ImmutableList.of(typePosition55, typePosition57, typePosition59, typePosition61, typePosition62, typePosition64);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray67 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray68 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray67;
        nodeSourcePositionArray68[0] = typePosition50;
        nodeSourcePositionArray68[1] = typePosition64;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder73 = nodeSourcePositionBuilder43.add(nodeSourcePositionArray68);
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder74 = nodeSourcePositionBuilder42.add(nodeSourcePositionArray68);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition75 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int76 = typePosition75.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition77 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int78 = typePosition77.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition79 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int80 = typePosition79.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition81 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition82 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int83 = typePosition82.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition84 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList85 = com.google.common.collect.ImmutableList.of(typePosition75, typePosition77, typePosition79, typePosition81, typePosition82, typePosition84);
        int int86 = typePosition84.getPositionOnStartLine();
        boolean boolean87 = typePosition84.hasBrackets();
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder88 = nodeSourcePositionBuilder42.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition84);
        int int89 = typePosition84.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(typePositionList11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(typePositionList22);
        org.junit.Assert.assertNotNull(sourcePositionArray24);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray25);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(typePositionList41);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(typePositionList54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(typePositionList65);
        org.junit.Assert.assertNotNull(sourcePositionArray67);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray68);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder73);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(typePositionList85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test00462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00462");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.wasEmptyNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node15.isEquivalentToTyped(node19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node19, "");
        com.google.javascript.rhino.Node node29 = jSTypeExpression28.getRoot();
        boolean boolean30 = jSTypeExpression28.isOptionalArg();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeExpression28.evaluate(jSTypeStaticScope31, jSTypeRegistry32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test00463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00463");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int4 = typePosition3.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int6 = typePosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int9 = typePosition8.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList11 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition3, typePosition5, typePosition7, typePosition8, typePosition10);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int15 = typePosition14.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int20 = typePosition19.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList22 = com.google.common.collect.ImmutableList.of(typePosition12, typePosition14, typePosition16, typePosition18, typePosition19, typePosition21);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray24 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray25 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray24;
        nodeSourcePositionArray25[0] = typePosition7;
        nodeSourcePositionArray25[1] = typePosition21;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder30 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray25);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int32 = typePosition31.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int36 = typePosition35.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int39 = typePosition38.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList41 = com.google.common.collect.ImmutableList.of(typePosition31, typePosition33, typePosition35, typePosition37, typePosition38, typePosition40);
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder42 = nodeSourcePositionBuilder30.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition40);
        int int43 = typePosition40.getEndLine();
        int int44 = typePosition40.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(typePositionList11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(typePositionList22);
        org.junit.Assert.assertNotNull(sourcePositionArray24);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray25);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(typePositionList41);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test00464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00464");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(visibility7);
    }

    @Test
    public void test00465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00465");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        boolean boolean7 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test00466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00466");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "hi!", 38, 10);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(46, node5);
        boolean boolean7 = node6.isGetProp();
        boolean boolean8 = node6.isFor();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node11.addChildToBack(node14);
        boolean boolean18 = node14.isName();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        boolean boolean24 = node22.isAssignAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node22.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(41, node22);
        // The following exception was thrown during execution in test generation
        try {
            node6.addChildBefore(node14, node26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
    }

    @Test
    public void test00467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00467");
        com.google.javascript.rhino.Node node0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        int int22 = node3.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean26 = node25.hasChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node29.putProp((int) (short) 1, (java.lang.Object) 1);
        node29.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node38 = node25.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean39 = node38.wasEmptyNode();
        com.google.javascript.rhino.Node node40 = node3.useSourceInfoFrom(node38);
        java.lang.Object obj42 = node40.getProp((int) (short) 10);
        boolean boolean43 = node40.isAdd();
        boolean boolean44 = node40.isExprResult();
        boolean boolean45 = node40.isNE();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList46 = com.google.common.collect.ImmutableList.of(node0, node40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 0");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test00468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00468");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition4 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition6 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList7 = com.google.common.collect.ImmutableList.of(namePosition1, namePosition2, namePosition3, namePosition4, namePosition5, namePosition6);
        int int8 = namePosition5.getPositionOnStartLine();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = node11.getParent();
        com.google.javascript.rhino.Node node14 = node11.getAncestor((int) (short) 0);
        node14.putBooleanProp((int) (short) 10, false);
        namePosition5.setItem(node14);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(35, node14, (int) (short) 100, 50);
        com.google.javascript.rhino.Node node22 = node21.getParent();
        org.junit.Assert.assertNotNull(namePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test00469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00469");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isStringKey();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = null;
        int int10 = node8.getIndexOfChild(node9);
        node8.putProp((int) (short) 1, (java.lang.Object) 1);
        node8.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int17 = node8.getSideEffectFlags();
        boolean boolean18 = node8.isParamList();
        int int19 = node8.getLineno();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(30, node3, node8, 46, 38);
        boolean boolean23 = node3.isWhile();
        com.google.javascript.rhino.jstype.JSType jSType24 = node3.getJSType();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.hasChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node32.putProp((int) (short) 1, (java.lang.Object) 1);
        node32.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node41 = node28.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean45 = node44.isContinue();
        boolean boolean47 = node44.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(42, node41, node44, 42, (int) (byte) 100);
        node44.setOptionalArg(false);
        boolean boolean53 = node44.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node54 = node3.removeChildAfter(node44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test00470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00470");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        boolean boolean26 = node16.isNE();
        // The following exception was thrown during execution in test generation
        try {
            node16.setSideEffectFlags(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test00471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00471");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.lang.String str93 = typeList91.toString();
        java.lang.String str94 = typeList91.toString();
        java.util.LinkedHashSet<java.lang.String>[] strSetArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashSet<java.lang.String>[] strSetArray96 = typeList91.toArray(strSetArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str93, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str94, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00472");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo9.getParameterNames();
        node2.setJSDocInfo(jSDocInfo9);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node2.getStaticSourceFile();
        boolean boolean14 = node2.wasEmptyNode();
        java.lang.Appendable appendable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.appendStringTree(appendable15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00473");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        node2.setOptionalArg(true);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean10 = node9.hasChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node13.putProp((int) (short) 1, (java.lang.Object) 1);
        node13.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node22 = node9.useSourceInfoIfMissingFromForTree(node13);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node13.setStaticSourceFile(staticSourceFile23);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node node26 = node13.getLastSibling();
        boolean boolean27 = node13.isVoid();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = null;
        int int33 = node31.getIndexOfChild(node32);
        node31.putProp((int) (short) 1, (java.lang.Object) 1);
        node31.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int40 = node31.getSideEffectFlags();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = null;
        int int48 = node46.getIndexOfChild(node47);
        node43.addChildToBack(node46);
        com.google.javascript.rhino.Node node50 = node43.getNext();
        com.google.javascript.rhino.Node node51 = node31.useSourceInfoFromForTree(node43);
        boolean boolean52 = node43.isNot();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(10, node43, (int) ' ', (int) '4');
        boolean boolean56 = node55.isQualifiedName();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        boolean boolean61 = node60.isDo();
        com.google.javascript.rhino.Node node62 = node55.srcref(node60);
        boolean boolean63 = node62.isWith();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = null;
        int int68 = node66.getIndexOfChild(node67);
        node66.putProp((int) (short) 1, (java.lang.Object) 1);
        node66.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int75 = node66.getSideEffectFlags();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = null;
        int int83 = node81.getIndexOfChild(node82);
        node78.addChildToBack(node81);
        int int85 = node66.getIndexOfChild(node78);
        boolean boolean86 = node66.isBreak();
        boolean boolean87 = node66.isDo();
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean91 = node90.hasChildren();
        com.google.javascript.rhino.Node node92 = node90.getLastSibling();
        int int93 = node92.getLength();
        node92.setIsSyntheticBlock(false);
        boolean boolean96 = node66.isEquivalentToTyped(node92);
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node((int) (short) 1, node13, node62, node92);
        com.google.javascript.rhino.Node node98 = node2.srcref(node97);
        boolean boolean99 = node98.isGetElem();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00474");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        int int96 = typeList91.size();
        java.lang.Object[] objArray97 = typeList91.toArray();
        java.util.Collection<java.lang.reflect.Type> typeCollection98 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = typeList91.addAll(typeCollection98);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 18 + "'", int96 == 18);
        org.junit.Assert.assertNotNull(objArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray97), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray97), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test00475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00475");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        node2.setSourceEncodedPositionForTree(1);
        boolean boolean14 = node2.isCase();
        boolean boolean15 = node2.isFalse();
        java.lang.Appendable appendable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.appendStringTree(appendable16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00476");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        node2.setOptionalArg(true);
        boolean boolean7 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = null;
        int int12 = node10.getIndexOfChild(node11);
        node10.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean16 = node10.isDec();
        int int17 = node10.getLineno();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList18 = com.google.common.collect.ImmutableList.of(node2, node10);
        node2.setType(15);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.isContinue();
        node23.setQuotedString();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.hasChildren();
        com.google.javascript.rhino.Node node30 = node28.getLastSibling();
        node30.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node35.getIndexOfChild(node36);
        node35.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean41 = node35.isDec();
        com.google.javascript.rhino.Node node42 = node30.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node43 = node23.srcrefTree(node42);
        java.lang.String str44 = node23.getQualifiedName();
        boolean boolean45 = node23.isArrayLit();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = null;
        int int50 = node48.getIndexOfChild(node49);
        node48.putProp((int) (short) 1, (java.lang.Object) 1);
        node48.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int57 = node48.getSideEffectFlags();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = null;
        int int65 = node63.getIndexOfChild(node64);
        node60.addChildToBack(node63);
        int int67 = node48.getIndexOfChild(node60);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean71 = node70.hasChildren();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = null;
        int int76 = node74.getIndexOfChild(node75);
        node74.putProp((int) (short) 1, (java.lang.Object) 1);
        node74.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node83 = node70.useSourceInfoIfMissingFromForTree(node74);
        boolean boolean84 = node83.wasEmptyNode();
        com.google.javascript.rhino.Node node85 = node48.useSourceInfoFrom(node83);
        boolean boolean86 = node48.isCatch();
        boolean boolean87 = node48.isTrue();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildBefore(node23, node48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test00477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00477");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList95.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream98 = typeList95.parallelStream();
        boolean boolean99 = typeList95.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertNotNull(typeStream98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00478");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        int int22 = node3.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean26 = node25.hasChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node29.putProp((int) (short) 1, (java.lang.Object) 1);
        node29.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node38 = node25.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean39 = node38.wasEmptyNode();
        com.google.javascript.rhino.Node node40 = node3.useSourceInfoFrom(node38);
        com.google.javascript.rhino.jstype.JSType jSType41 = node3.getJSType();
        boolean boolean42 = node3.isFor();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = null;
        int int47 = node45.getIndexOfChild(node46);
        node45.putProp((int) (short) 1, (java.lang.Object) 1);
        node45.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int54 = node45.getSideEffectFlags();
        boolean boolean55 = node45.isParamList();
        int int56 = node45.getLineno();
        boolean boolean57 = node45.hasChildren();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean61 = node60.hasChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = null;
        int int66 = node64.getIndexOfChild(node65);
        node64.putProp((int) (short) 1, (java.lang.Object) 1);
        node64.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node73 = node60.useSourceInfoIfMissingFromForTree(node64);
        node73.addSuppression("");
        node73.setSourceEncodedPosition(37);
        com.google.javascript.rhino.Node node78 = node73.getNext();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = node81.getParent();
        boolean boolean83 = node81.isArrayLit();
        node81.setOptionalArg(true);
        int int86 = node81.getType();
        boolean boolean87 = node81.isLabelName();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(48, node3, node45, node73, node81);
        boolean boolean89 = node73.isString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable90 = node73.siblings();
        // The following exception was thrown during execution in test generation
        try {
            double double91 = node73.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR  0 [jsdoc_info: JSDocInfo] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(jSType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(nodeIterable90);
    }

    @Test
    public void test00479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00479");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean5 = node4.hasChildren();
        com.google.javascript.rhino.Node node6 = node4.getLastSibling();
        node6.setSourceFileForTesting("Not declared as a type name");
        boolean boolean9 = node6.isWith();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100, node6, 51, 10);
        com.google.javascript.rhino.Node node13 = node12.cloneNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "hi!", 38, 10);
        java.lang.String str19 = node18.getString();
        int int20 = node18.getLength();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node24.putProp((int) (short) 1, (java.lang.Object) 1);
        node24.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int33 = node24.getSideEffectFlags();
        node24.setSourceEncodedPositionForTree(1);
        boolean boolean36 = node24.isCase();
        boolean boolean37 = node24.isThrow();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) ' ', 49, 32);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("(hi!)");
        boolean boolean44 = node43.isIn();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(38, node24, node41, node43, 39, (-1));
        int int48 = node41.getChildCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = new com.google.javascript.rhino.JSTypeExpression(node41, "([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean54 = node53.hasChildren();
        boolean boolean55 = node53.isAssignAdd();
        boolean boolean56 = node53.isDebugger();
        boolean boolean57 = node53.isFromExterns();
        node53.setSourceEncodedPosition(35);
        boolean boolean60 = node53.isTypeOf();
        com.google.javascript.rhino.Node node61 = node53.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 0, node12, node18, node41, node53, 1, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node61);
    }

    @Test
    public void test00480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00480");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node11.putProp((int) (short) 1, (java.lang.Object) 1);
        node11.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node20 = node7.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.isContinue();
        boolean boolean26 = node23.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(42, node20, node23, 42, (int) (byte) 100);
        boolean boolean30 = node20.isNE();
        com.google.javascript.rhino.Node node31 = node3.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node35.getIndexOfChild(node36);
        node35.putProp((int) (short) 1, (java.lang.Object) 1);
        node35.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int44 = node35.getSideEffectFlags();
        boolean boolean45 = node35.isParamList();
        int int46 = node35.getLineno();
        boolean boolean47 = node35.hasChildren();
        boolean boolean48 = node35.isBlock();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = null;
        int int53 = node51.getIndexOfChild(node52);
        node51.putProp((int) (short) 1, (java.lang.Object) 1);
        node51.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int60 = node51.getSideEffectFlags();
        int int61 = node51.getChildCount();
        boolean boolean62 = node51.isIf();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean66 = node65.hasChildren();
        com.google.javascript.rhino.Node node67 = node65.getParent();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = null;
        int int72 = node70.getIndexOfChild(node71);
        node70.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean76 = node70.isDec();
        boolean boolean77 = node70.isHook();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(31, node35, node51, node65, node70);
        boolean boolean79 = node51.isAssign();
        boolean boolean80 = node51.isParamList();
        boolean boolean81 = node51.isParamList();
        node51.setIsSyntheticBlock(true);
        // The following exception was thrown during execution in test generation
        try {
            node31.addChildToFront(node51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test00481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00481");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        boolean boolean93 = typeList91.isEmpty();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream94 = typeList91.stream();
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeStream94);
    }

    @Test
    public void test00482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00482");
        java.io.IOException iOException3 = new java.io.IOException("(hi!)");
        java.io.IOException iOException4 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException3);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList5 = com.google.common.collect.ImmutableList.of(iOException3);
        java.io.IOException iOException6 = new java.io.IOException("JSDocInfo", (java.lang.Throwable) iOException3);
        java.lang.String str7 = iOException3.toString();
        org.junit.Assert.assertNotNull(iOExceptionList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.io.IOException: (hi!)" + "'", str7, "java.io.IOException: (hi!)");
    }

    @Test
    public void test00483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00483");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getParent();
        com.google.javascript.rhino.InputId inputId6 = new com.google.javascript.rhino.InputId("JSDocInfo");
        java.lang.String str7 = inputId6.getIdName();
        java.lang.String str8 = inputId6.getIdName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        int int14 = node11.getLength();
        boolean boolean15 = node11.isRegExp();
        boolean boolean16 = inputId6.equals((java.lang.Object) boolean15);
        // The following exception was thrown during execution in test generation
        try {
            node4.setInputId(inputId6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JSDocInfo" + "'", str8, "JSDocInfo");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test00484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00484");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        boolean boolean26 = node16.isNE();
        boolean boolean27 = node16.isNew();
        com.google.javascript.rhino.Node node28 = node16.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = node28.isUnscopedQualifiedName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test00485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00485");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(31, "OR ");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node5.putProp((int) (short) 1, (java.lang.Object) 1);
        node5.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int14 = node5.getSideEffectFlags();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = null;
        int int22 = node20.getIndexOfChild(node21);
        node17.addChildToBack(node20);
        int int24 = node5.getIndexOfChild(node17);
        boolean boolean25 = node5.isBreak();
        boolean boolean26 = node5.isDo();
        boolean boolean27 = node5.isUnscopedQualifiedName();
        boolean boolean28 = node5.isParamList();
        boolean boolean29 = node5.isDelProp();
        com.google.javascript.rhino.Node node30 = node2.copyInformationFrom(node5);
        boolean boolean31 = node5.isAssignAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test00486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00486");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        int int5 = node4.getLength();
        com.google.javascript.rhino.Node node7 = node4.getAncestor(45);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = node7.isBlock();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test00487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00487");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.subList(31, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (31) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test00488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00488");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        node2.setOptionalArg(true);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean10 = node9.hasChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node13.putProp((int) (short) 1, (java.lang.Object) 1);
        node13.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node22 = node9.useSourceInfoIfMissingFromForTree(node13);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node13.setStaticSourceFile(staticSourceFile23);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node node26 = node13.getLastSibling();
        boolean boolean27 = node13.isVoid();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = null;
        int int33 = node31.getIndexOfChild(node32);
        node31.putProp((int) (short) 1, (java.lang.Object) 1);
        node31.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int40 = node31.getSideEffectFlags();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = null;
        int int48 = node46.getIndexOfChild(node47);
        node43.addChildToBack(node46);
        com.google.javascript.rhino.Node node50 = node43.getNext();
        com.google.javascript.rhino.Node node51 = node31.useSourceInfoFromForTree(node43);
        boolean boolean52 = node43.isNot();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(10, node43, (int) ' ', (int) '4');
        boolean boolean56 = node55.isQualifiedName();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        boolean boolean61 = node60.isDo();
        com.google.javascript.rhino.Node node62 = node55.srcref(node60);
        boolean boolean63 = node62.isWith();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = null;
        int int68 = node66.getIndexOfChild(node67);
        node66.putProp((int) (short) 1, (java.lang.Object) 1);
        node66.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int75 = node66.getSideEffectFlags();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = null;
        int int83 = node81.getIndexOfChild(node82);
        node78.addChildToBack(node81);
        int int85 = node66.getIndexOfChild(node78);
        boolean boolean86 = node66.isBreak();
        boolean boolean87 = node66.isDo();
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean91 = node90.hasChildren();
        com.google.javascript.rhino.Node node92 = node90.getLastSibling();
        int int93 = node92.getLength();
        node92.setIsSyntheticBlock(false);
        boolean boolean96 = node66.isEquivalentToTyped(node92);
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node((int) (short) 1, node13, node62, node92);
        com.google.javascript.rhino.Node node98 = node2.srcref(node97);
        boolean boolean99 = node97.isObjectLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00489");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        com.google.javascript.rhino.jstype.JSType jSType40 = node39.getJSType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node39.siblings();
        com.google.javascript.rhino.Node node42 = node39.cloneTree();
        com.google.javascript.rhino.Node node43 = null;
        // The following exception was thrown during execution in test generation
        try {
            node42.addChildrenToBack(node43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test00490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00490");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        boolean boolean10 = node5.isFor();
        int int11 = node5.getType();
        boolean boolean12 = node5.hasOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean16 = node15.isContinue();
        boolean boolean17 = node15.isVarArgs();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean21 = node20.hasChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node24.putProp((int) (short) 1, (java.lang.Object) 1);
        node24.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node33 = node20.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        node24.setStaticSourceFile(staticSourceFile34);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node24.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node5.addChildBefore(node15, node24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
    }

    @Test
    public void test00491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00491");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.wasEmptyNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node15.isEquivalentToTyped(node19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node19, "");
        com.google.javascript.rhino.Node node29 = jSTypeExpression28.getRoot();
        boolean boolean30 = jSTypeExpression28.isOptionalArg();
        boolean boolean31 = jSTypeExpression28.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression28);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression32);
    }

    @Test
    public void test00492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00492");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        boolean boolean9 = node5.isTypeOf();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.isContinue();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.Node node19 = node17.getLastSibling();
        node19.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node24.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean30 = node24.isDec();
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = node12.srcrefTree(node31);
        node32.setCharno(0);
        node5.addChildrenToBack(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = null;
        int int40 = node38.getIndexOfChild(node39);
        node38.putProp((int) (short) 1, (java.lang.Object) 1);
        node38.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int47 = node38.getSideEffectFlags();
        boolean boolean48 = node38.isExprResult();
        boolean boolean49 = node38.wasEmptyNode();
        com.google.javascript.rhino.Node node50 = node32.copyInformationFromForTree(node38);
        boolean boolean51 = node38.isIf();
        boolean boolean52 = node38.isNE();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node53 = node38.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test00493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00493");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor93 = typeList91.iterator();
        // The following exception was thrown during execution in test generation
        try {
            typeItor93.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeItor93);
    }

    @Test
    public void test00494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00494");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        boolean boolean4 = node3.isDo();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean9 = node8.hasChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = null;
        int int14 = node12.getIndexOfChild(node13);
        node12.putProp((int) (short) 1, (java.lang.Object) 1);
        node12.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node21 = node8.useSourceInfoIfMissingFromForTree(node12);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.isContinue();
        boolean boolean27 = node24.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(42, node21, node24, 42, (int) (byte) 100);
        node24.setOptionalArg(false);
        boolean boolean33 = node24.hasChildren();
        com.google.javascript.rhino.Node node34 = node3.copyInformationFrom(node24);
        boolean boolean35 = node34.isNumber();
        node34.removeProp(50);
        // The following exception was thrown during execution in test generation
        try {
            node34.setString("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 35.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test00495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00495");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        node3.setSourceEncodedPositionForTree(1);
        boolean boolean15 = node3.isCase();
        boolean boolean16 = node3.isThrow();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(1, node3);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean22 = node21.hasChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = null;
        int int27 = node25.getIndexOfChild(node26);
        node25.putProp((int) (short) 1, (java.lang.Object) 1);
        node25.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node34 = node21.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.isContinue();
        boolean boolean40 = node37.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(42, node34, node37, 42, (int) (byte) 100);
        boolean boolean44 = node43.isDec();
        com.google.javascript.rhino.Node node45 = node43.cloneTree();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node43.children();
        node43.setOptionalArg(false);
        com.google.javascript.rhino.Node node49 = node17.srcrefTree(node43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.isContinue();
        boolean boolean54 = node52.isFromExterns();
        boolean boolean55 = node52.wasEmptyNode();
        com.google.javascript.rhino.Node node56 = node49.copyInformationFromForTree(node52);
        boolean boolean57 = node56.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test00496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00496");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00497");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        com.google.javascript.rhino.Node node22 = node15.getNext();
        com.google.javascript.rhino.Node node23 = node3.useSourceInfoFromForTree(node15);
        boolean boolean24 = node15.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(10, node15, (int) ' ', (int) '4');
        boolean boolean28 = node27.isQualifiedName();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        boolean boolean33 = node32.isDo();
        com.google.javascript.rhino.Node node34 = node27.srcref(node32);
        com.google.javascript.rhino.InputId inputId35 = node34.getInputId();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean39 = node38.hasChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = null;
        int int44 = node42.getIndexOfChild(node43);
        node42.putProp((int) (short) 1, (java.lang.Object) 1);
        node42.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node51 = node38.useSourceInfoIfMissingFromForTree(node42);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = null;
        node42.setStaticSourceFile(staticSourceFile52);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node42.getStaticSourceFile();
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node42.setJSType(jSType55);
        java.lang.String str57 = node42.getQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = node34.checkTreeEquals(node42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(inputId35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test00498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00498");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node3.addChildToBack(node6);
        java.util.Set<java.lang.String> strSet10 = node6.getDirectives();
        boolean boolean11 = node6.isFor();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder12 = node6.new FileLevelJsDocBuilder();
        boolean boolean13 = node6.isVarArgs();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(37, node6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00499");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation((int) 'a', 35, (int) 'a', 48);
        java.lang.String str8 = stringPosition0.getItem();
        stringPosition0.setPositionInformation(40, 10, (int) (short) 100, 40);
        stringPosition0.setItem("OR \n");
        int int16 = stringPosition0.getStartLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation((int) (byte) 10, 41, 0, 44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 10?end-line: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 40 + "'", int16 == 40);
    }

    @Test
    public void test00500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00500");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        node4.setSourceFileForTesting("Not declared as a type name");
        boolean boolean7 = node4.isBreak();
        int int8 = node4.getSideEffectFlags();
        boolean boolean9 = node4.isAnd();
        boolean boolean10 = node4.isCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }
}

